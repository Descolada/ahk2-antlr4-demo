{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAI,WAAW;AAAK,IAAI,WAAW;AAAK,IAAI,kBAAkB;AAAK,IAAI,aAAa;AAAM,IAAI,eAAe;AAAmB,IAAI,cAAc;AAAM,OAAO,MAAM,CAAC,aAAa,GAAG;AAAmB;AAEzM,+KAA+K,GAC/K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,GACA,IAAI,aAAa;AACjB,IAAI,YAAY,OAAO,MAAM,CAAC,MAAM;AACpC,SAAS,OAAO,UAAU;IACxB,UAAU,IAAI,CAAC,IAAI,EAAE;IACrB,IAAI,CAAC,GAAG,GAAG;QACT,MAAM,OAAO,MAAM,CAAC,OAAO,CAAC,WAAW;QACvC,kBAAkB,EAAE;QACpB,mBAAmB,EAAE;QACrB,QAAQ,SAAU,EAAE;YAClB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,YAAa;QAChD;QACA,SAAS,SAAU,EAAE;YACnB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;QAC9B;IACF;IACA,OAAO,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG;AACtC;AACA,OAAO,MAAM,CAAC,MAAM,GAAG;AACvB,OAAO,MAAM,CAAC,OAAO,GAAG,CAAC;AACzB,IAAI,cAAc,0BAA0B,KAC1C,eAAe,0BAA0B,KACzC,gBAAgB,mCAAmC,KACnD,eAAe,mCAAmC,KAClD,iBAAiB;AACnB,SAAS;IACP,OAAO,YAAa,CAAA,OAAO,aAAa,eAAe,SAAS,QAAQ,CAAC,OAAO,CAAC,YAAY,IAAI,SAAS,QAAQ,GAAG,WAAU;AACjI;AACA,SAAS;IACP,OAAO,YAAa,CAAA,OAAO,aAAa,cAAc,SAAS,IAAI,GAAG,eAAc;AACtF;AAEA,wCAAwC;AACxC,IAAI,YAAY,WAAW,SAAS;AACpC,IAAI,CAAC,aAAa,OAAO,OAAO,MAAM,CAAC,IAAI,KAAK,YAC9C,IAAI;IACF,4CAA4C;IAC5C,YAAY,OAAO,MAAM,CAAC,IAAI,CAAC;AACjC,EAAE,OAAM;AACN,UAAU;AACZ;AAEF,IAAI,WAAW;AACf,IAAI,OAAO;AACX,IAAI,WAAW,cAAc,OAAO,aAAa,eAAe,SAAS,QAAQ,KAAK,YAAY,CAAC;IAAC;IAAa;IAAa;CAAU,CAAC,QAAQ,CAAC,YAAY,QAAQ;AAEtK,wCAAwC;AACxC,IAAI,SAAS,OAAO,MAAM,CAAC,MAAM;AACjC,IAAI,CAAC,UAAU,CAAC,OAAO,eAAe,EAAE;IACtC,wBAAwB;IACxB,IAAI,SAAS,OAAO,YAAY,cAAc,OAAO,WAAW,cAAc,OAAO,SAAS;IAE9F,oDAAoD;IACpD,0DAA0D;IAC1D,IAAI,oBAAoB;IACxB,IAAI;QACD,CAAA,GAAG,IAAG,EAAG;IACZ,EAAE,OAAO,KAAK;QACZ,oBAAoB,IAAI,KAAK,CAAC,QAAQ,CAAC;IACzC;IACA,IAAI;IACJ,IAAI,aACF,KAAK,IAAI,YAAY;SAErB,IAAI;QACF,4FAA4F;QAC5F,IAAI,EACF,UAAU,EACV,UAAU,EACX,GAAG,OAAO,MAAM,CAAC,IAAI,CAAC,uBAAuB,OAAO;QACrD,IAAI,eAAe,QAAQ,eAAe,KAAK,KAAK,WAAW,QAAQ,EAAE;YACvE,WAAW,EAAE,CAAC,WAAW,OAAM;gBAC7B,IAAI;oBACF,MAAM,cAAc;oBACpB,WAAW,WAAW,CAAC;gBACzB,EAAE,OAAM;oBACN,WAAW,WAAW,CAAC;gBACzB;YACF;YAEA,gGAAgG;YAChG,eAAe,IAAM,WAAW,WAAW,CAAC;QAC9C;IACF,EAAE,OAAM;QACN,IAAI,OAAO,cAAc,aACvB,IAAI;YACF,KAAK,IAAI,UAAU,WAAW,QAAQ,WAAY,CAAA,OAAO,MAAM,OAAO,EAAC,IAAK;QAC9E,EAAE,OAAO,KAAK;YACZ,mCAAmC;YACnC,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,oDACvC,QAAQ,KAAK,CAAC,IAAI,OAAO;QAE7B;IAEJ;IAEF,IAAI,IAAI;QACN,aAAa;QACb,GAAG,SAAS,GAAG,eAAgB,MAAM,wBAAwB,GAAzB;YAClC,IAAI,KAAK,eAAe,MAAK,KAAK,KAAK,CAAC,MAAM,IAAI;YAClD,MAAM,cAAc;QACtB;QACA,IAAI,cAAc,WAAW;YAC3B,GAAG,OAAO,GAAG,SAAU,CAAC;gBACtB,IAAI,EAAE,OAAO,EACX,QAAQ,KAAK,CAAC,EAAE,OAAO;YAE3B;YACA,GAAG,OAAO,GAAG;gBACX,QAAQ,IAAI,CAAC;YACf;QACF;IACF;AACF;AACA,eAAe,cAAc,KAAK,eAAe,GAAhB;IAC/B,gBAAgB,CAAC,EAAE,0BAA0B;IAC7C,iBAAiB,CAAC,EAAE,0BAA0B;IAC9C,iBAAiB,EAAE;IACnB,kBAAkB,EAAE;IACpB,iBAAiB;IACjB,IAAI,KAAK,IAAI,KAAK,UAChB;SACK,IAAI,KAAK,IAAI,KAAK,UAAU;QACjC,uCAAuC;QACvC,IAAI,OAAO,aAAa,aACtB;QAEF,IAAI,SAAS,KAAK,MAAM;QAExB,oBAAoB;QACpB,IAAI,UAAU,OAAO,KAAK,CAAC,CAAA;YACzB,OAAO,MAAM,IAAI,KAAK,SAAS,MAAM,IAAI,KAAK,QAAQ,eAAe,OAAO,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,YAAY;QACvH;QAEA,0EAA0E;QAC1E,2EAA2E;QAC3E,kEAAkE;QAClE,2EAA2E;QAC3E,sCAAsC;QACtC,IAAI,WAAW,kBAAkB,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,OAAO,KAAK,iBAAiB,OAAO,WAAW,eAAe,OAAO,gBAAgB,aACvI,UAAU,CAAC,OAAO,aAAa,CAAC,IAAI,YAAY,mBAAmB;YACjE,YAAY;QACd;QAEF,IAAI,SAAS;YACX,QAAQ,KAAK;YAEb,yEAAyE;YACzE,IAAI,OAAO,WAAW,eAAe,OAAO,gBAAgB,aAC1D,OAAO,aAAa,CAAC,IAAI,YAAY;YAEvC,MAAM,gBAAgB;YACtB;YAEA,8FAA8F;YAC9F,IAAI,kBAAkB,CAAC;YACvB,IAAK,IAAI,IAAI,GAAG,IAAI,eAAe,MAAM,EAAE,IAAK;gBAC9C,IAAI,KAAK,cAAc,CAAC,EAAE,CAAC,EAAE;gBAC7B,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE;oBACxB,UAAU,cAAc,CAAC,EAAE,CAAC,EAAE,EAAE;oBAChC,eAAe,CAAC,GAAG,GAAG;gBACxB;YACF;QACF,OAAO;IACT;IACA,IAAI,KAAK,IAAI,KAAK,SAAS;QACzB,+BAA+B;QAC/B,KAAK,IAAI,kBAAkB,KAAK,WAAW,CAAC,IAAI,CAAE;YAChD,IAAI,QAAQ,eAAe,SAAS,GAAG,eAAe,SAAS,GAAG,eAAe,KAAK;YACtF,QAAQ,KAAK,CAAC,4BAAkB,eAAe,OAAO,GAAG,OAAO,QAAQ,SAAS,eAAe,KAAK,CAAC,IAAI,CAAC;QAC7G;QACA,IAAI,OAAO,aAAa,aAAa;YACnC,gCAAgC;YAChC;YACA,IAAI,UAAU,mBAAmB,KAAK,WAAW,CAAC,IAAI;YACtD,aAAa;YACb,SAAS,IAAI,CAAC,WAAW,CAAC;QAC5B;IACF;AACF;AACA,SAAS;IACP,IAAI,UAAU,SAAS,cAAc,CAAC;IACtC,IAAI,SAAS;QACX,QAAQ,MAAM;QACd,QAAQ,GAAG,CAAC;IACd;AACF;AACA,SAAS,mBAAmB,WAAW;IACrC,IAAI,UAAU,SAAS,aAAa,CAAC;IACrC,QAAQ,EAAE,GAAG;IACb,IAAI,YAAY;IAChB,KAAK,IAAI,cAAc,YAAa;QAClC,IAAI,QAAQ,WAAW,MAAM,CAAC,MAAM,GAAG,WAAW,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG;YAClE,OAAO,GAAG,EAAE;SACT,EAAE,aAAa,QAAQ,UAAU,OAAO,GAAG,EAAE,SAAS,CAAC,EAAE,KAAK,6BAA6B,EAAE,mBAAmB,MAAM,QAAQ,EAAE,2FAA2F,EAAE,MAAM,QAAQ,CAAC;AACrP,EAAE,MAAM,IAAI,EAAE;QACV,GAAG,MAAM,WAAW,KAAK;QACzB,aAAa;AACjB;AACA;AACA,oBAAa,EAAE,WAAW,OAAO,CAAC;;aAErB,EAAE,MAAM;;UAEX,EAAE,WAAW,KAAK,CAAC,GAAG,CAAC,CAAA,OAAQ,uBAAa,OAAO,UAAU,IAAI,CAAC,IAAI;;QAExE,EAAE,WAAW,aAAa,GAAG,CAAC,8CAAuC,EAAE,WAAW,aAAa,CAAC,sCAAsC,CAAC,GAAG,GAAG;;IAEjJ,CAAC;IACH;IACA,aAAa;IACb,QAAQ,SAAS,GAAG;IACpB,OAAO;AACT;AACA,SAAS;IACP,IAAI,OAAO,aAAa,eAAe,YAAY,UACjD,SAAS,MAAM;SACV,IAAI,OAAO,WAAW,eAAe,UAAU,OAAO,OAAO,IAAI,OAAO,OAAO,CAAC,MAAM,EAC3F,OAAO,OAAO,CAAC,MAAM;SAErB,IAAI;QACF,IAAI,EACF,UAAU,EACV,UAAU,EACX,GAAG,OAAO,MAAM,CAAC,IAAI,CAAC,uBAAuB,OAAO;QACrD,IAAI,eAAe,QAAQ,eAAe,KAAK,KAAK,WAAW,QAAQ,EACrE,WAAW,WAAW,CAAC;IAE3B,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;IAChB;AAEJ;AACA,SAAS,WAAW,MAAM,EAAE,EAAE,EAAE,mCAAmC;IACjE,IAAI,UAAU,OAAO,OAAO;IAC5B,IAAI,CAAC,SACH,OAAO,EAAE;IAEX,IAAI,UAAU,EAAE;IAChB,IAAI,GAAG,GAAG;IACV,IAAK,KAAK,QACR,IAAK,KAAK,OAAO,CAAC,EAAE,CAAC,EAAE,CAAE;QACvB,MAAM,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;QACtB,IAAI,QAAQ,MAAM,MAAM,OAAO,CAAC,QAAQ,GAAG,CAAC,IAAI,MAAM,GAAG,EAAE,KAAK,IAC9D,QAAQ,IAAI,CAAC;YAAC;YAAQ;SAAE;IAE5B;IAEF,IAAI,OAAO,MAAM,EACf,UAAU,QAAQ,MAAM,CAAC,WAAW,OAAO,MAAM,EAAE;IAErD,OAAO;AACT;AACA,SAAS,WAAW,IAAI;IACtB,IAAI,OAAO,KAAK,YAAY,CAAC;IAC7B,IAAI,CAAC,MACH;IAEF,IAAI,UAAU,KAAK,SAAS;IAC5B,QAAQ,MAAM,GAAG;QACf,IAAI,KAAK,UAAU,KAAK,MACtB,aAAa;QACb,KAAK,UAAU,CAAC,WAAW,CAAC;IAEhC;IACA,QAAQ,YAAY,CAAC,QACrB,aAAa;IACb,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,MAAM,KAAK,GAAG;IACnC,aAAa;IACb,KAAK,UAAU,CAAC,YAAY,CAAC,SAAS,KAAK,WAAW;AACxD;AACA,IAAI,aAAa;AACjB,SAAS;IACP,IAAI,cAAc,OAAO,aAAa,aACpC;IAEF,aAAa,WAAW;QACtB,IAAI,QAAQ,SAAS,gBAAgB,CAAC;QACtC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;YACrC,gCAAgC;YAChC,IAAI,KAAK,WAAW,MAAK,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC;YAC/C,IAAI,WAAW;YACf,IAAI,sBAAsB,aAAa,cAAc,IAAI,OAAO,mDAAmD,WAAW,IAAI,CAAC,QAAQ,KAAK,OAAO,CAAC,WAAW,MAAM;YACzK,IAAI,WAAW,gBAAgB,IAAI,CAAC,SAAS,KAAK,OAAO,CAAC,SAAS,MAAM,MAAM,KAAK,CAAC;YACrF,IAAI,CAAC,UACH,WAAW,KAAK,CAAC,EAAE;QAEvB;QACA,aAAa;IACf,GAAG;AACL;AACA,SAAS,YAAY,KAAK;IACxB,IAAI,MAAM,IAAI,KAAK,MAAM;QACvB,IAAI,OAAO,aAAa,aAAa;YACnC,IAAI,SAAS,SAAS,aAAa,CAAC;YACpC,OAAO,GAAG,GAAG,MAAM,GAAG,GAAG,QAAQ,KAAK,GAAG;YACzC,IAAI,MAAM,YAAY,KAAK,YACzB,OAAO,IAAI,GAAG;YAEhB,OAAO,IAAI,QAAQ,CAAC,SAAS;gBAC3B,IAAI;gBACJ,OAAO,MAAM,GAAG,IAAM,QAAQ;gBAC9B,OAAO,OAAO,GAAG;gBAChB,CAAA,iBAAiB,SAAS,IAAI,AAAD,MAAO,QAAQ,mBAAmB,KAAK,KAAK,eAAe,WAAW,CAAC;YACvG;QACF,OAAO,IAAI,OAAO,kBAAkB,YAAY;YAC9C,iBAAiB;YACjB,IAAI,MAAM,YAAY,KAAK,YACzB,OAAO,OAAmB,MAAM,GAAG,GAAG,QAAQ,KAAK,GAAG;iBAEtD,OAAO,IAAI,QAAQ,CAAC,SAAS;gBAC3B,IAAI;oBACF,cAA0B,MAAM,GAAG,GAAG,QAAQ,KAAK,GAAG;oBACtD;gBACF,EAAE,OAAO,KAAK;oBACZ,OAAO;gBACT;YACF;QAEJ;IACF;AACF;AACA,eAAe,gBAAgB,MAAM;IACnC,OAAO,eAAe,GAAG,OAAO,MAAM,CAAC;IACvC,IAAI;IACJ,IAAI;QACF,kEAAkE;QAClE,gEAAgE;QAChE,gEAAgE;QAChE,mDAAmD;QACnD,iDAAiD;QACjD,mDAAmD;QACnD,IAAI,CAAC,mBAAmB;YACtB,IAAI,WAAW,OAAO,GAAG,CAAC,CAAA;gBACxB,IAAI;gBACJ,OAAO,AAAC,CAAA,eAAe,YAAY,MAAK,MAAO,QAAQ,iBAAiB,KAAK,IAAI,KAAK,IAAI,aAAa,KAAK,CAAC,CAAA;oBAC3G,oBAAoB;oBACpB,IAAI,UAAU,OAAO,OAAO,IAAI,OAAO,OAAO,CAAC,WAAW,GAAG,gBAAgB,IAAI,KAAK,OAAO,4BAA4B,eAAe,kBAAkB,0BAA0B;wBAClL,OAAO,OAAO,CAAC,MAAM;wBACrB;oBACF;oBACA,MAAM;gBACR;YACF;YACA,kBAAkB,MAAM,QAAQ,GAAG,CAAC;QACtC;QACA,OAAO,OAAO,CAAC,SAAU,KAAK;YAC5B,SAAS,OAAO,MAAM,CAAC,IAAI,EAAE;QAC/B;IACF,SAAU;QACR,OAAO,OAAO,eAAe;QAC7B,IAAI,iBACF,gBAAgB,OAAO,CAAC,CAAA;YACtB,IAAI,QAAQ;gBACV,IAAI;gBACH,CAAA,kBAAkB,SAAS,IAAI,AAAD,MAAO,QAAQ,oBAAoB,KAAK,KAAK,gBAAgB,WAAW,CAAC;YAC1G;QACF;IAEJ;AACF;AACA,SAAS,SAAS,OAAO,kBAAkB,GAAnB,EAAuB,MAAM,cAAc,GAAf;IAClD,IAAI,UAAU,OAAO,OAAO;IAC5B,IAAI,CAAC,SACH;IAEF,IAAI,MAAM,IAAI,KAAK,OACjB;SACK,IAAI,MAAM,IAAI,KAAK,MAAM;QAC9B,IAAI,OAAO,MAAM,YAAY,CAAC,OAAO,aAAa,CAAC;QACnD,IAAI,MAAM;YACR,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE;gBACrB,iEAAiE;gBACjE,oHAAoH;gBACpH,IAAI,UAAU,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE;gBAClC,IAAK,IAAI,OAAO,QACd,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,EAAE;oBAC5C,IAAI,KAAK,OAAO,CAAC,IAAI;oBACrB,IAAI,UAAU,WAAW,OAAO,MAAM,CAAC,IAAI,EAAE;oBAC7C,IAAI,QAAQ,MAAM,KAAK,GACrB,UAAU,OAAO,MAAM,CAAC,IAAI,EAAE;gBAElC;YAEJ;YACA,IAAI,mBAGF,AAFA,4DAA4D;YAC5D,+CAA+C;YAC9C,CAAA,GAAG,IAAG,EAAG,MAAM,MAAM;YAGxB,aAAa;YACb,IAAI,KAAK,OAAO,eAAe,CAAC,MAAM,EAAE,CAAC;YACzC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG;gBAAC;gBAAI;aAAK;QAChC;QAEA,8FAA8F;QAC9F,0GAA0G;QAC1G,IAAI,OAAO,MAAM,EACf,SAAS,OAAO,MAAM,EAAE;IAE5B;AACF;AACA,SAAS,UAAU,MAAM,EAAE,EAAE;IAC3B,IAAI,UAAU,OAAO,OAAO;IAC5B,IAAI,CAAC,SACH;IAEF,IAAI,OAAO,CAAC,GAAG,EAAE;QACf,8EAA8E;QAC9E,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,EAAE;QACzB,IAAI,UAAU,EAAE;QAChB,IAAK,IAAI,OAAO,KAAM;YACpB,IAAI,UAAU,WAAW,OAAO,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI;YACtD,IAAI,QAAQ,MAAM,KAAK,GACrB,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI;QAE1B;QAEA,sGAAsG;QACtG,OAAO,OAAO,CAAC,GAAG;QAClB,OAAO,OAAO,KAAK,CAAC,GAAG;QAEvB,0BAA0B;QAC1B,QAAQ,OAAO,CAAC,CAAA;YACd,UAAU,OAAO,MAAM,CAAC,IAAI,EAAE;QAChC;IACF,OAAO,IAAI,OAAO,MAAM,EACtB,UAAU,OAAO,MAAM,EAAE;AAE7B;AACA,SAAS,eAAe,OAAO,kBAAkB,GAAnB,EAAuB,GAAG,WAAW,GAAZ,EAAgB,aAAa,uCAAuC,GAAxC;IACjF,gBAAgB,CAAC;IACjB,IAAI,kBAAkB,QAAQ,IAAI,eAChC,OAAO;IAGT,uGAAuG;IACvG,IAAI,UAAU,WAAW,OAAO,MAAM,CAAC,IAAI,EAAE;IAC7C,IAAI,WAAW;IACf,MAAO,QAAQ,MAAM,GAAG,EAAG;QACzB,IAAI,IAAI,QAAQ,KAAK;QACrB,IAAI,IAAI,kBAAkB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE;QACtC,IAAI,GACF,+EAA+E;QAC/E,WAAW;aACN,IAAI,MAAM,MAAM;YACrB,yDAAyD;YACzD,IAAI,IAAI,WAAW,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;YAC3C,IAAI,EAAE,MAAM,KAAK,GAAG;gBAClB,kFAAkF;gBAClF,WAAW;gBACX;YACF;YACA,QAAQ,IAAI,IAAI;QAClB;IACF;IACA,OAAO;AACT;AACA,SAAS,kBAAkB,OAAO,kBAAkB,GAAnB,EAAuB,GAAG,WAAW,GAAZ,EAAgB,aAAa,uCAAuC,GAAxC;IACpF,IAAI,UAAU,OAAO,OAAO;IAC5B,IAAI,CAAC,SACH;IAEF,IAAI,gBAAgB,CAAC,YAAY,CAAC,OAAO,aAAa,CAAC,EAAE;QACvD,2EAA2E;QAC3E,yEAAyE;QACzE,IAAI,CAAC,OAAO,MAAM,EAAE;YAClB,iBAAiB;YACjB,OAAO;QACT;QACA,OAAO,kBAAkB,OAAO,MAAM,EAAE,IAAI;IAC9C;IACA,IAAI,aAAa,CAAC,GAAG,EACnB,OAAO;IAET,aAAa,CAAC,GAAG,GAAG;IACpB,IAAI,SAAS,OAAO,KAAK,CAAC,GAAG;IAC7B,IAAI,CAAC,QACH,OAAO;IAET,gBAAgB,IAAI,CAAC;QAAC;QAAQ;KAAG;IACjC,IAAI,UAAU,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE;QAC9D,eAAe,IAAI,CAAC;YAAC;YAAQ;SAAG;QAChC,OAAO;IACT;IACA,OAAO;AACT;AACA,SAAS;IACP,0BAA0B;IAC1B,IAAK,IAAI,IAAI,GAAG,IAAI,gBAAgB,MAAM,EAAE,IAAK;QAC/C,IAAI,KAAK,eAAe,CAAC,EAAE,CAAC,EAAE;QAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE;YACvB,WAAW,eAAe,CAAC,EAAE,CAAC,EAAE,EAAE;YAClC,cAAc,CAAC,GAAG,GAAG;QACvB;IACF;IACA,kBAAkB,EAAE;AACtB;AACA,SAAS,WAAW,OAAO,kBAAkB,GAAnB,EAAuB,GAAG,WAAW,GAAZ;IACjD,IAAI,SAAS,OAAO,KAAK,CAAC,GAAG;IAC7B,OAAO,OAAO,CAAC,GAAG,GAAG,CAAC;IACtB,IAAI,UAAU,OAAO,GAAG,EACtB,OAAO,GAAG,CAAC,IAAI,GAAG,OAAO,OAAO,CAAC,GAAG;IAEtC,IAAI,UAAU,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,iBAAiB,CAAC,MAAM,EAC7D,OAAO,GAAG,CAAC,iBAAiB,CAAC,OAAO,CAAC,SAAU,EAAE;QAC/C,GAAG,OAAO,OAAO,CAAC,GAAG;IACvB;IAEF,OAAO,OAAO,KAAK,CAAC,GAAG;AACzB;AACA,SAAS,UAAU,OAAO,kBAAkB,GAAnB,EAAuB,GAAG,WAAW,GAAZ;IAChD,sBAAsB;IACtB,OAAO;IAEP,6DAA6D;IAC7D,IAAI,SAAS,OAAO,KAAK,CAAC,GAAG;IAC7B,IAAI,UAAU,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE;QAC9D,IAAI,qBAAqB,EAAE;QAC3B,OAAO,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAU,EAAE;YAC9C,IAAI,mBAAmB,GAAG;gBACxB,OAAO,WAAW,OAAO,MAAM,CAAC,IAAI,EAAE;YACxC;YACA,IAAI,MAAM,OAAO,CAAC,qBAAqB,iBAAiB,MAAM,EAC5D,mBAAmB,IAAI,IAAI;QAE/B;QACA,IAAI,mBAAmB,MAAM,EAAE;YAC7B,IAAI,UAAU,mBAAmB,KAAK,CAAC,SAAU,CAAC;gBAChD,OAAO,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;YAClC;YACA,IAAI,CAAC,SACH,OAAO;YAET;QACF;IACF;AACF;;;AC5kBA;AACA;AACA;AAEA,mBAAmB;AACnB,MAAM,UAAW,SAAS,cAAc,CAAC;AACzC,MAAM,WAAW,SAAS,cAAc,CAAC;AACzC,MAAM,MAAW,SAAS,cAAc,CAAC;AAEzC,IAAI,gBAAgB,CAAC,SAAS;IAC5B,MAAM,OAAO,QAAQ,KAAK;IAC1B,MAAM,QAAQ,CAAA,GAAA,oBAAU,AAAD,EAAE,UAAU,CAAC;IACpC,MAAM,QAAQ,IAAI,CAAA,GAAA,kCAAgB,AAAD,EAAE;IACnC,MAAM,SAAS,IAAI,CAAA,GAAA,2BAAiB,AAAD,EAAE;IACrC,MAAM,SAAS,IAAI,CAAA,GAAA,oCAAiB,AAAD,EAAE;IAErC,sDAAsD;IACtD,MAAM,OAAO,OAAO,OAAO;IAE3B,SAAS,WAAW,GAAG,OAAO,SAAS,CAAC,QAAQ;AAClD;;;;;ACg6hBA,yCACE;AADF,+CAEE;AAFF,kDAGE;AAHF,qDAIE;AAJF,mDAKE;AALF,kDAME;AANF,8CAOE;AAPF,8DAQE;AARF,iEASE;AATF,sDAUE;AAVF,4DAWE;AAXF,oDAYE;AAZF,uDAaE;AAbF,uDAcE;AAdF,0DAeE;AAfF,gDAgBE;AAhBF,4CAiBE;AAjBF,mDAkBE;AAlBF,qDAmBE;AAnBF,yDAoBE;AApBF,gEAqBE;AArBF,gDAsBE;AAtBF,oDAuBE;AAvBF,2CAwBE;AAxBF,0DAyBE;AAzBF,iDA0BE;AA1BF,wDA2BE;AA3BF,uDA4BE;AA5BF,0DA6BE;AA7BF,yCA8BE;AA9BF,mDA+BE;AA/BF,8CAgCE;AAhCF,kDAiCE;AAjCF,mDAkCE;AAlCF,0DAmCE;AAnCF,6DAoCE;AApCF,gDAqCE;AArCF,4DAsCE;AAtCF,uDAuCE;AAvCF,+CAwCE;AAxCF,8DAyCE;AAzCF,6CA0CE;AA1CF,6CA2CE;AA3CF,4DA4CE;AA5CF,+CA6CE;AA7CF,2DA8CE;AA9CF,4DA+CE;AA/CF,8CAgDE;AAhDF,iDAiDE;AAjDF,iDAkDE;AAlDF,2CAmDE;AAnDF,oDAoDE;AApDF,uDAqDE;AArDF,yDAsDE;AAtDF,qDAuDE;AAvDF,wDAwDE;AAxDF,uDAyDE;AAzDF,wDA0DE;AA1DF,8DA2DE;AA3DF,sDA4DE;AA5DF,qDA6DE;AA7DF,qDA8DE;AA9DF,+DA+DE;AA/DF,wDAgEE;AAhEF,yDAiEE;AAjEF,qDAkEE;AAlEF,qDAmEE;AAnEF,qDAoEE;AApEF,kDAqEE;AArEF,gDAsEE;AAtEF,0DAuEE;AAvEF,sDAwEE;AAxEF,yDAyEE;AAzEF,oDA0EE;AA1EF,oDA2EE;AA3EF,gEA4EE;AA5EF,+CA6EE;AA7EF,oDA8EE;AA9EF,sDA+EE;AA/EF,6DAgFE;AAhFF,qDAiFE;AAjFF,4CAkFE;AAlFF,wDAmFE;AAnFF,uDAoFE;AApFF,uDAqFE;AArFF,yDAsFE;AAtFF,uDAuFE;AAvFF,mEAwFE;AAxFF,oDAyFE;AAzFF,yDA0FE;AA1FF,uDA2FE;AA3FF,4DA4FE;AA5FF,oDA6FE;AA7FF,2DA8FE;AA9FF,wDA+FE;AA/FF,qDAgGE;AAhGF,0DAiGE;AAjGF,gDAkGE;AAlGF,oDAmGE;AAnGF,mDAoGE;AApGF,kDAqGE;AArGF,oDAsGE;AAtGF,qDAuGE;AAvGF,qDAwGE;AAxGF,mDAyGE;AAzGF,gEA0GE;AA1GF,yDA2GE;AA3GF,wDA4GE;AA5GF,uDA6GE;AA7GF,6EA8GE;AA9GF,8CA+GE;AA/GF,kDAgHE;AAhHF,+CAiHE;AAjHF,2CAkHE;AAlHF,yDAmHE;AAnHF,mDAoHE;AApHF,sDAqHE;AArHF,mDAsHE;AAtHF,gDAuHE;AAvHF,2CAwHE;AAxHF,2DAyHE;AAzHF,gDA0HE;AA1HF,wDA2HE;AA3HF,2CA4HE;AA5HF,kDA6HE;AA7HF,gDA8HE;AA9HF,6DA+HE;AA/HF,8DAgIE;AAhIF,sDAiIE;AAjIF,+DAkIE;AAlIF,uDAmIE;AAnIF,kEAoIE;AApIF,0DAqIE;AArIF,mDAsIE;AAtIF,0DAuIE;AAvIF,sEAwIE;AAxIF,iDAyIE;AAzIF,uDA0IE;AA1IF,sDA2IE;AA3IF,gEA4IE;AA5IF,kDA6IE;AA7IF,6CA8IE;AA9IF,qDA+IE;AA/IF,2CAgJE;AAhJF,+CAiJE;AAjJF,qDAkJE;AAlJF,sEAmJE;AAvkiBF,IAAI,YAAY,OAAO,cAAc;AACrC,IAAI,SAAS,CAAC,QAAQ,QAAU,UAAU,QAAQ,QAAQ;QAAE;QAAO,cAAc;IAAK;AAEtF,mBAAmB;AACnB,IAAI;AACH,CAAA,CAAC;IACA,WAAW,GAAG,GAAG;IACjB,WAAW,mBAAmB,GAAG;AACnC,CAAA,EAAG,aAAc,CAAA,YAAY,CAAC,CAAA;AAE9B,eAAe;AACf,IAAI;AACH,CAAA,CAAC;IACA,OAAO,YAAY,GAAG;IACtB,OAAO,OAAO,GAAG;IACjB,OAAO,mBAAmB,GAAG;IAC7B,OAAO,GAAG,GAAG,UAAU,GAAG;IAC1B,OAAO,eAAe,GAAG;IACzB,OAAO,cAAc,GAAG;IACxB,OAAO,sBAAsB,GAAG;AAClC,CAAA,EAAG,SAAU,CAAA,QAAQ,CAAC,CAAA;AACtB,IAAI,UAAU,aAAa,GAAG,OAAO,CAAC;IACpC,MAAM,QAAQ;IACd,OAAO,MAAM,WAAW,KAAK,KAAK,KAAK,MAAM,OAAO,KAAK,KAAK;AAChE,GAAG;AAEH,qBAAqB;AACrB,IAAI,SAAS;IACX,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,KAAK;IACL;;;;GAIC,GACD,YAAY,IAAI,CAAE;QAChB,IAAI,MACF,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG,CAAC,CAAC;YACpC,OAAO,UAAU;QACnB;aAEA,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY;IAEhC;IACA;;GAEC,GACD,CAAC,OAAO,QAAQ,CAAC,GAAG;QAClB,MAAM,SAAS,IAAI,CAAC,IAAI,CAAC,MAAM;QAC/B,IAAI,eAAe;QACnB,IAAI,cAAc,IAAI,CAAC,IAAI,CAAC,aAAa;QACzC,MAAM,QAAQ,IAAI,CAAC,IAAI;QACvB,OAAO;YACL,CAAC,OAAO,QAAQ,CAAC;gBACf,OAAO,IAAI;YACb;YACA,MAAM,aAAa,GAAG,OAAO;gBAC3B,MAAO,eAAe,OACpB,IAAI,gBAAgB,GAAG;oBACrB,MAAM,IAAI,cAAc,CAAC;oBACzB,MAAM,QAAQ,AAAC,CAAA,gBAAgB,CAAA,IAAK,IAAI,CAAC,QAAQ,CAAC,IAAI;oBACtD,eAAe;oBACf,OAAO;wBAAE,MAAM;wBAAO;oBAAM;gBAC9B,OAAO;oBACL;oBACA,IAAI,eAAe,QACjB,cAAc,KAAK,CAAC,aAAa;gBAErC;gBAEF,OAAO;oBAAE,MAAM;oBAAM,OAAO,KAAK;gBAAE;YACrC,GAAG;QACL;IACF;IACA;;;;GAIC,GACD,MAAM,KAAK,EAAE;QACX,IAAI,UAAU,KAAK,GACjB,IAAI,CAAC,IAAI,GAAG,IAAI;aACX;YACL,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAE,CAAA,KAAK,KAAI;QACvC;IACF;IACA;;;;;;GAMC,GACD,GAAG,GAAG,EAAE;QACN,MAAM,WAAW,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM;QAC3D,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,EAAE,EAC9B,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,EAAE;QAE7B,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE;YACtC,IAAI,CAAC,MAAM,CAAC,AAAC,CAAA,IAAI,IAAI,CAAC,MAAM,IAAI,CAAA,IAAK;YACrC,MAAM,IAAI,IAAI,IAAI,CAAC,MAAM;YACzB,IAAK,IAAI,IAAI,UAAU,IAAI,GAAG,EAAE,EAC9B,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,EAAE;QAE9B;IACF;IACA;;;;;;;GAOC,GACD,IAAI,KAAK,EAAE;QACT,IAAI,QAAQ,GACV,MAAM,IAAI,WAAW;QAEvB,MAAM,OAAO,UAAU;QACvB,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAC1B,OAAO;QAET,OAAO,AAAC,CAAA,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,QAAQ,EAAC,MAAO;IACjD;IACA;;GAEC,GACD,IAAI,SAAS;QACX,IAAI,SAAS;QACb,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM;QAC1B,MAAM,IAAI,IAAI,CAAC,IAAI;QACnB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IACrB,UAAU,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QAE9B,OAAO;IACT;IACA;;GAEC,GACD,SAAS;QACP,MAAM,SAAS,IAAI,MAAM,IAAI,CAAC,MAAM;QACpC,IAAI,MAAM;QACV,MAAM,SAAS,IAAI,CAAC,IAAI,CAAC,MAAM;QAC/B,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,EAAE,EAAG;YAC/B,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;YACpB,MAAO,MAAM,EAAG;gBACd,MAAM,IAAI,IAAI,CAAC;gBACf,MAAM,CAAC,MAAM,GAAG,AAAC,CAAA,KAAK,CAAA,IAAK,IAAI,CAAC,QAAQ,CAAC,IAAI;gBAC7C,KAAK;YACP;QACF;QACA,OAAO;IACT;IACA;;;;;GAKC,GACD,WAAW,SAAS,EAAE;QACpB,IAAI,YAAY,GACd,MAAM,IAAI,WAAW;QAEvB,KAAK,MAAM,SAAS,IAAI,CAAE;YACxB,IAAI,SAAS,WACX,OAAO;QAEX;QACA,OAAO,KAAK;IACd;IACA;;;;GAIC,GACD,IAAI,KAAK,EAAE;QACT,IAAI,QAAQ,GACV,MAAM,IAAI,WAAW;QAEvB,IAAI,CAAC,MAAM,CAAC;QACZ,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,KAAK,QAAQ;IACzC;IACA;;GAEC,GACD,WAAW;QACT,OAAO,MAAM,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ;IAC1C;IACA,OAAO,KAAK,EAAE;QACZ,MAAM,QAAQ,QAAQ,OAAO;QAC7B,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,MAAM,EAC3B;QAEF,MAAM,OAAO,IAAI,YAAY;QAC7B,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI;QAClB,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM;QAC7B,IAAI,CAAC,IAAI,GAAG;IACd;IACA,SAAS,CAAC,EAAE;QACV,IAAI,IAAK,CAAA,KAAK,IAAI,UAAS;QAC3B,IAAI,AAAC,CAAA,IAAI,SAAQ,IAAM,CAAA,KAAK,IAAI,SAAQ;QACxC,IAAI,IAAK,CAAA,KAAK,CAAA,IAAK;QACnB,IAAI,IAAK,CAAA,KAAK,CAAA;QACd,IAAI,IAAK,CAAA,KAAK,EAAC;QACf,OAAO,IAAI;IACb;AACF;AAEA,0BAA0B;AAC1B,IAAI,KAAK;AACT,IAAI,KAAK;AACT,IAAI,KAAK;AACT,IAAI,KAAK;AACT,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,aAAa,MAAM;IACrB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,cAAc,IAAI;IACzB,aAAc,CACd;IACA;;;;;;GAMC,GACD,OAAO,WAAW,OAAO,YAAY,WAAW,EAAE;QAChD,OAAO;IACT;IACA,OAAO,qBAAqB,IAAI,EAAE,KAAK,EAAE;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,OAAO,cAAc;IAChD;IACA;;;;;;;GAOC,GACD,OAAO,OAAO,IAAI,EAAE,KAAK,EAAE;QACzB,QAAQ,KAAK,IAAI,CAAC,OAAO;QACzB,QAAQ,SAAS,KAAK,UAAU,KAAK;QACrC,QAAQ,KAAK,IAAI,CAAC,OAAO;QACzB,OAAO,OAAO;QACd,OAAO,QAAQ,KAAK,SAAS,KAAK;QAClC,OAAO,KAAK,IAAI,CAAC,MAAM,KAAK;QAC5B,OAAO;IACT;IACA;;;;;;;;GAQC,GACD,OAAO,OAAO,IAAI,EAAE,UAAU,EAAE;QAC9B,QAAQ,aAAa;QACrB,QAAQ,SAAS;QACjB,OAAO,KAAK,IAAI,CAAC,MAAM;QACvB,QAAQ,SAAS;QACjB,OAAO,KAAK,IAAI,CAAC,MAAM;QACvB,QAAQ,SAAS;QACjB,OAAO;IACT;IACA;;;;;;;GAOC,GACD,OAAO,SAAS,KAAK,EAAE,IAAI,EAAE;QAC3B,OAAO,YAAY,MAAM,CAAC,YAAY,MAAM,CAAC,QAAQ,YAAY,WAAW,EAAE,QAAQ;IACxF;AACF;AAEA,uCAAuC;AACvC,IAAI,2BAA2B,MAAM;IACnC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,WAAW,IAAI,4BAA4B;IAClD,SAAS,GAAG,EAAE;QACZ,IAAI,OAAO,MACT,OAAO;QAET,OAAO,IAAI,QAAQ;IACrB;IACA,OAAO,CAAC,EAAE,CAAC,EAAE;QACX,IAAI,KAAK,MACP,OAAO,KAAK;QAEd,OAAO,EAAE,MAAM,CAAC;IAClB;AACF;AAEA,wCAAwC;AACxC,IAAI,4BAA4B,MAAM;IACpC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,WAAW,IAAI,6BAA6B;IACnD,SAAS,GAAG,EAAE;QACZ,IAAI,OAAO,MACT,OAAO;QAET,OAAO,yBAAyB,QAAQ,CAAC,QAAQ,CAAC;IACpD;IACA,OAAO,CAAC,EAAE,CAAC,EAAE;QACX,IAAI,KAAK,MACP,OAAO,KAAK;QAEd,IAAI,OAAO,MAAM,YAAY,OAAO,MAAM,UACxC,OAAO,MAAM;QAEf,OAAO,yBAAyB,QAAQ,CAAC,MAAM,CAAC,GAAG;IACrD;AACF;AAEA,sBAAsB;AACtB,IAAI,UAAU,MAAM;IAClB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,oBAAoB,KAAK;IAChC,OAAO,kBAAkB,GAAG;IAC5B,qBAAqB;IACrB,WAAW;IACX,QAAQ;IACR,UAAU;IACV,6BAA6B,GAC7B,YAAY,EAAE;IACd,YAAY,eAAe,EAAE,kBAAkB,SAAS,eAAe,CAAE;QACvE,IAAI,2BAA2B,UAAU;YACvC,IAAI,CAAC,UAAU,GAAG,gBAAgB,UAAU;YAC5C,IAAI,CAAC,OAAO,GAAG,gBAAgB,OAAO,CAAC,KAAK,CAAC;YAC7C,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAK;gBAC5C,MAAM,SAAS,IAAI,CAAC,OAAO,CAAC,EAAE;gBAC9B,IAAI,QACF,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,KAAK,CAAC;YAEnC;YACA,IAAI,CAAC,SAAS,GAAG,gBAAgB,SAAS;YAC1C,IAAI,CAAC,SAAS,GAAG,gBAAgB,SAAS;QAC5C,OAAO;YACL,IAAI,CAAC,UAAU,GAAG,mBAAmB,0BAA0B,QAAQ;YACvE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,KAAK,KAAK,CAAC,SAAS,eAAe,GAAG,SAAS,iBAAiB;QACnF;IACF;IACA;;;;;;;;GAQC,GACD,SAAS,CAAC,EAAE;QACV,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,EACjC,IAAI,CAAC,MAAM;QAEb,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;QACzB,IAAI,SAAS,IAAI,CAAC,OAAO,CAAC,EAAE;QAC5B,IAAI,CAAC,QAAQ;YACX,SAAS;gBAAC;aAAE;YACZ,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG;YAClB,EAAE,IAAI,CAAC,SAAS;YAChB,OAAO;QACT;QACA,KAAK,MAAM,YAAY,OAAQ;YAC7B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,IACnC,OAAO;QAEX;QACA,OAAO,IAAI,CAAC;QACZ,EAAE,IAAI,CAAC,SAAS;QAChB,OAAO;IACT;IACA,IAAI,CAAC,EAAE;QACL,IAAI,KAAK,MACP,OAAO;QAET,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;QACzB,MAAM,SAAS,IAAI,CAAC,OAAO,CAAC,EAAE;QAC9B,IAAI,CAAC,QACH,OAAO,KAAK;QAEd,KAAK,MAAM,KAAK,OAAQ;YACtB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAC5B,OAAO;QAEX;QACA,OAAO,KAAK;IACd;IACA;;;;;;GAMC,GACD,OAAO,CAAC,EAAE;QACR,IAAI,KAAK,MACP,OAAO;QAET,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;QACzB,MAAM,SAAS,IAAI,CAAC,OAAO,CAAC,EAAE;QAC9B,IAAI,CAAC,QACH,OAAO;QAET,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;YACtC,MAAM,WAAW,MAAM,CAAC,EAAE;YAC1B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,IAAI;gBACvC,OAAO,MAAM,CAAC,GAAG;gBACjB,EAAE,IAAI,CAAC,SAAS;gBAChB,OAAO;YACT;QACF;QACA,OAAO;IACT;IACA,WAAW;QACT,IAAI,OAAO,WAAW,UAAU;QAChC,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAAE;YACjC,IAAI,UAAU,MACZ;YAEF,KAAK,MAAM,KAAK,OAAQ;gBACtB,IAAI,KAAK,MACP;gBAEF,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC1D;QACF;QACA,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI;QACxC,OAAO;IACT;IACA,OAAO,CAAC,EAAE;QACR,IAAI,MAAM,IAAI,EACZ,OAAO;QAET,IAAI,CAAE,CAAA,aAAa,QAAO,GACxB,OAAO;QAET,IAAI,EAAE,IAAI,KAAK,IAAI,CAAC,IAAI,EACtB,OAAO;QAET,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B;IACA,IAAI,CAAC,EAAE;QACL,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAC;QAC/B,OAAO,aAAa;IACtB;IACA,SAAS,CAAC,EAAE;QACV,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B;IACA,aAAa,GAAG,EAAE;QAChB,IAAI,OAAO,MACT,OAAO;QAET,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,KAAK;IAChC;IACA,CAAC,CAAC,OAAO,QAAQ,CAAC,GAAG;QACnB,OAAO,IAAI,CAAC,OAAO;IACrB;IACA,UAAU;QACR,MAAM,IAAI,IAAI,MAAM,IAAI,CAAC,IAAI;QAC7B,IAAI,IAAI;QACR,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAAE;YACjC,IAAI,UAAU,MACZ;YAEF,KAAK,MAAM,KAAK,OAAQ;gBACtB,IAAI,KAAK,MACP;gBAEF,CAAC,CAAC,IAAI,GAAG;YACX;QACF;QACA,OAAO;IACT;IACA,YAAY,UAAU,EAAE;QACtB,IAAI,sBAAsB,UACxB,KAAK,MAAM,UAAU,WAAW,OAAO,CAAE;YACvC,IAAI,UAAU,MACZ;YAEF,KAAK,MAAM,KAAK,OAAQ;gBACtB,IAAI,KAAK,MACP;gBAEF,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IACrB,OAAO;YAEX;QACF;aAEA,KAAK,MAAM,KAAK,WAAY;YAC1B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IACrB,OAAO;QAEX;QAEF,OAAO;IACT;IACA,OAAO,CAAC,EAAE;QACR,IAAI,UAAU;QACd,KAAK,MAAM,KAAK,EAAG;YACjB,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAC;YAC/B,IAAI,aAAa,GACf,UAAU;QAEd;QACA,OAAO;IACT;IACA,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,eAAe;QAC1D,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,SAAS,GAAG,KAAK,KAAK,CAAC,SAAS,eAAe,GAAG,SAAS,iBAAiB;IACnF;IACA,WAAW;QACT,IAAI,IAAI,CAAC,IAAI,KAAK,GAChB,OAAO;QAET,IAAI,MAAM;QACV,IAAI,QAAQ;QACZ,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAAE;YACjC,IAAI,UAAU,MACZ;YAEF,KAAK,MAAM,KAAK,OAAQ;gBACtB,IAAI,KAAK,MACP;gBAEF,IAAI,OACF,QAAQ;qBAER,OAAO;gBAET,OAAO,EAAE,QAAQ;YACnB;QACF;QACA,OAAO;QACP,OAAO;IACT;IACA,gBAAgB;QACd,IAAI,MAAM;QACV,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAAE;YACjC,IAAI,UAAU,MAAM;gBAClB,OAAO;gBACP;YACF;YACA,OAAO;YACP,IAAI,QAAQ;YACZ,KAAK,MAAM,KAAK,OAAQ;gBACtB,IAAI,OACF,QAAQ;qBAER,OAAO;gBAET,IAAI,KAAK,MACP,OAAO;qBAEP,OAAO,EAAE,QAAQ;YAErB;YACA,OAAO;QACT;QACA,OAAO;IACT;IACA,UAAU,CAAC,EAAE;QACX,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QACtC,MAAM,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG;QACvC,OAAO;IACT;IACA,SAAS;QACP,MAAM,MAAM,IAAI,CAAC,OAAO;QACxB,MAAM,cAAc,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG;QAC1C,MAAM,WAAW,IAAI,CAAC,aAAa,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,SAAS,GAAG,KAAK,KAAK,CAAC,cAAc,SAAS,iBAAiB;QACpE,KAAK,MAAM,UAAU,IAAK;YACxB,IAAI,CAAC,QACH;YAEF,KAAK,MAAM,KAAK,OAAQ;gBACtB,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;gBACzB,IAAI,YAAY,IAAI,CAAC,OAAO,CAAC,EAAE;gBAC/B,IAAI,CAAC,WAAW;oBACd,YAAY,EAAE;oBACd,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG;gBACpB;gBACA,UAAU,IAAI,CAAC;YACjB;QACF;IACF;IACA,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,SAAS;IACvB;IACA,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,SAAS,KAAK;IAC5B;IACA;;;;;GAKC,GACD,cAAc,QAAQ,EAAE;QACtB,OAAO,IAAI,MAAM;IACnB;AACF;AAEA,uBAAuB;AACvB,IAAI,WAAW,MAAM;IACnB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,mBAAmB,IAAI,UAAU,IAAI,IAAI;IAChD,OAAO,0BAA0B,IAAI;IACrC,OAAO,QAAQ,EAAE,CAAC;IAClB,MAAM;IACN,KAAK;IACL,eAAe;IACf,YAAY,KAAK,EAAE,IAAI,CAAE;QACvB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,cAAc,GAAG,KAAK,IAAI,CAAC,MAAM,OAAO,MAAM;IACrD;IACA;;;;;;;;;;;;;GAaC,GACD,OAAO,GAAG,CAAC,EAAE,CAAC,EAAE;QACd,IAAI,MAAM,KAAK,IAAI,KAAK,IAAI,UAAU,uBAAuB,EAC3D,OAAO,IAAI,UAAU,GAAG;QAE1B,IAAI,CAAC,UAAU,KAAK,CAAC,EAAE,EACrB,UAAU,KAAK,CAAC,EAAE,GAAG,IAAI,UAAU,GAAG;QAExC,OAAO,UAAU,KAAK,CAAC,EAAE;IAC3B;IACA,OAAO,CAAC,EAAE;QACR,OAAO,IAAI,CAAC,KAAK,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,IAAI;IACvD;IACA,WAAW;QACT,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,sDAAsD,GACtD,qBAAqB,KAAK,EAAE;QAC1B,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK,IAAI,IAAI,CAAC,IAAI,GAAG,MAAM,KAAK;IAC5D;IACA,oDAAoD,GACpD,wBAAwB,KAAK,EAAE;QAC7B,OAAO,IAAI,CAAC,KAAK,IAAI,MAAM,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,MAAM,KAAK;IAC9D;IACA,uEAAuE,GACvE,YAAY,KAAK,EAAE;QACjB,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;IACjC;IACA,qDAAqD,GACrD,oBAAoB,KAAK,EAAE;QACzB,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI;IAChC;IACA,6CAA6C,GAC7C,uBAAuB,KAAK,EAAE;QAC5B,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,MAAM,IAAI;IAC7D;IACA,gDAAgD,GAChD,SAAS,KAAK,EAAE;QACd,OAAO,IAAI,CAAC,oBAAoB,CAAC,UAAU,IAAI,CAAC,mBAAmB,CAAC;IACtE;IACA,yDAAyD,GACzD,SAAS,KAAK,EAAE;QACd,OAAO,IAAI,CAAC,KAAK,KAAK,MAAM,IAAI,GAAG,KAAK,IAAI,CAAC,IAAI,KAAK,MAAM,KAAK,GAAG;IACtE;IACA,iBAAiB,KAAK,EAAE;QACtB,OAAO,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI;IAC7D;IACA,+DAA+D,GAC/D,MAAM,KAAK,EAAE;QACX,OAAO,UAAU,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,KAAK,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,IAAI;IACvF;IACA,qDAAqD,GACrD,aAAa,KAAK,EAAE;QAClB,OAAO,UAAU,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,KAAK,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,IAAI;IACvF;IACA;;;;;GAKC,GACD,+BAA+B,KAAK,EAAE;QACpC,IAAI,OAAO;QACX,IAAI,MAAM,uBAAuB,CAAC,IAAI,GACpC,OAAO,UAAU,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI;aAC9D,IAAI,MAAM,sBAAsB,CAAC,IAAI,GAC1C,OAAO,UAAU,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,KAAK,GAAG;QAEhD,OAAO;IACT;IACA,WAAW;QACT,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE;IACtC;IACA,IAAI,SAAS;QACX,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,EACxB,OAAO;QAET,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG;IAClC;AACF;AAEA,oBAAoB;AACpB,IAAI,aAAa,MAAM;IACrB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,cAAc,EAAE,CAAC;IACxB;;;;;;;GAOC,GACD,OAAO,mBAAmB,IAAI,YAAY,YAAY,WAAW,EAAE,YAAY,WAAW,EAAE,YAAY,WAAW,EAAE;IACrH,aAAa;IACb,aAAa;IACb,cAAc;IACd,aAAa;IACb;;;;;;;;;;;;GAYC,GACD,YAAY,YAAY,EAAE,aAAa,EAAE,YAAY,CAAE;QACrD,IAAI,CAAC,YAAY,GAAG,gBAAgB,YAAY,WAAW;QAC3D,IAAI,CAAC,aAAa,GAAG,iBAAiB,YAAY,WAAW;QAC7D,IAAI,CAAC,YAAY,GAAG,gBAAgB,YAAY,WAAW;QAC3D,IAAI,CAAC,YAAY,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,GAAG,CAC7D,IAAI,CAAC,YAAY,CAAC,MAAM,EACxB,IAAI,CAAC,aAAa,CAAC,MAAM,KACtB;IACP;IACA;;;;;;;;;;;;;GAaC,GACD,OAAO,eAAe,UAAU,EAAE;QAChC,IAAI,cAAc,QAAQ,WAAW,MAAM,KAAK,GAC9C,OAAO,YAAY,gBAAgB;QAErC,MAAM,eAAe;eAAI;SAAW;QACpC,MAAM,gBAAgB;eAAI;SAAW;QACrC,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAK;YAC1C,MAAM,YAAY,UAAU,CAAC,EAAE;YAC/B,IAAI,aAAa,MACf;YAEF,IAAI,UAAU,MAAM,GAAG,GAAG;gBACxB,MAAM,YAAY,UAAU,WAAW,CAAC;gBACxC,IAAI,cAAc,IAAI;oBACpB,aAAa,CAAC,EAAE,GAAG;oBACnB;gBACF,OAAO,IAAI,aAAa,MAAM,aAAa,IAAI;oBAC7C,YAAY,CAAC,EAAE,GAAG;oBAClB;gBACF;YACF;YACA,YAAY,CAAC,EAAE,GAAG;YAClB,aAAa,CAAC,EAAE,GAAG;QACrB;QACA,OAAO,IAAI,YAAY,cAAc,eAAe;IACtD;IACA,kBAAkB;QAChB,OAAO,IAAI,CAAC,YAAY;IAC1B;IACA,eAAe,SAAS,EAAE;QACxB,IAAI,aAAa,KAAK,YAAY,IAAI,CAAC,YAAY,CAAC,MAAM,EACxD,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU;QAErC,OAAO;IACT;IACA,gBAAgB,SAAS,EAAE;QACzB,IAAI,aAAa,KAAK,YAAY,IAAI,CAAC,aAAa,CAAC,MAAM,EACzD,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU;QAEtC,IAAI,cAAc,MAAM,GAAG,EACzB,OAAO;QAET,OAAO;IACT;IACA,eAAe,SAAS,EAAE;QACxB,IAAI,aAAa,KAAK,YAAY,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YAC1D,MAAM,cAAc,IAAI,CAAC,YAAY,CAAC,UAAU;YAChD,IAAI,eAAe,MACjB,OAAO;QAEX;QACA,MAAM,cAAc,IAAI,CAAC,cAAc,CAAC;QACxC,IAAI,eAAe,MACjB,OAAO;QAET,MAAM,eAAe,IAAI,CAAC,eAAe,CAAC;QAC1C,IAAI,gBAAgB,MAClB,OAAO;QAET,OAAO,GAAG,WAAW;IACvB;IACA,kBAAkB;QAChB,OAAO,IAAI,CAAC,YAAY;IAC1B;IACA,mBAAmB;QACjB,OAAO,IAAI,CAAC,aAAa;IAC3B;IACA,kBAAkB;QAChB,OAAO,IAAI,CAAC,YAAY;IAC1B;AACF;AAEA,0BAA0B;AAC1B,IAAI,cAAc,MAAM;IACtB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,4CAA4C,GAC5C,YAAY,EAAE,CAAC;IACf,eAAe;IACf,YAAY,GAAG,CAAE;QACf,IAAI,KAAK;YACP,IAAI,MAAM,OAAO,CAAC,MAChB,KAAK,MAAM,MAAM,IACf,IAAI,CAAC,MAAM,CAAC;iBAGd,IAAI,CAAC,MAAM,CAAC;QAEhB;IACF;IACA,+DAA+D,GAC/D,OAAO,GAAG,CAAC,EAAE,CAAC,EAAE;QACd,MAAM,IAAI,IAAI;QACd,EAAE,QAAQ,CAAC,GAAG;QACd,OAAO;IACT;IACA,+DAA+D,GAC/D,OAAO,GAAG,IAAI,EAAE;QACd,MAAM,SAAS,IAAI;QACnB,KAAK,MAAM,OAAO,KAChB,OAAO,MAAM,CAAC;QAEhB,OAAO;IACT;IACA,CAAC,OAAO,QAAQ,CAAC,GAAG;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,QAAQ,CAAC;IACxC;IACA,IAAI,KAAK,EAAE;QACT,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM;IAC9B;IACA;;;;GAIC,GACD,IAAI,aAAa;QACf,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,GAC5B,OAAO,MAAM,YAAY;QAE3B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK;IAChC;IACA;;;;GAIC,GACD,IAAI,aAAa;QACf,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,GAC5B,OAAO,MAAM,YAAY;QAE3B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI;IACvD;IACA,QAAQ;QACN,IAAI,CAAC,cAAc,GAAG,KAAK;QAC3B,IAAI,CAAC,SAAS,GAAG,EAAE;IACrB;IACA;;;GAGC,GACD,OAAO,CAAC,EAAE;QACR,IAAI,CAAC,WAAW,CAAC,IAAI,SAAS,GAAG;IACnC;IACA;;;;;;;GAOC,GACD,SAAS,CAAC,EAAE,CAAC,EAAE;QACb,IAAI,CAAC,WAAW,CAAC,IAAI,SAAS,GAAG;IACnC;IACA,YAAY,QAAQ,EAAE;QACpB,IAAI,CAAC,cAAc,GAAG,KAAK;QAC3B,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,GAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aACf;YACL,IAAK,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,MAAO;gBACpD,MAAM,WAAW,IAAI,CAAC,SAAS,CAAC,IAAI;gBACpC,IAAI,SAAS,MAAM,CAAC,WAClB;gBAEF,IAAI,SAAS,QAAQ,CAAC,aAAa,CAAC,SAAS,QAAQ,CAAC,WAAW;oBAC/D,MAAM,SAAS,SAAS,KAAK,CAAC;oBAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG;oBACtB,IAAK,IAAI,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAI;wBACrD,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI;wBAChC,IAAI,CAAC,OAAO,QAAQ,CAAC,SAAS,OAAO,QAAQ,CAAC,OAC5C;wBAEF,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK;wBAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,OAAO,KAAK,CAAC;oBACrC;oBACA;gBACF;gBACA,IAAI,SAAS,oBAAoB,CAAC,WAAW;oBAC3C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,GAAG;oBAC9B;gBACF;YACF;YACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;QACtB;IACF;IACA,OAAO,KAAK,EAAE;QACZ,MAAM,SAAS,CAAC,OAAO,CAAC,CAAC;YACvB,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,GAAG,IAAI;QACP,OAAO,IAAI;IACb;IACA,yBAAyB,UAAU,EAAE;QACnC,MAAM,SAAS,IAAI;QACnB,IAAI,CAAC,YACH,OAAO;QAET,IAAI,WAAW,MAAM,KAAK,GACxB,OAAO;QAET,OAAO,MAAM,CAAC;QACd,OAAO,OAAO,QAAQ,CAAC,IAAI;IAC7B;IACA,WAAW,UAAU,EAAE,UAAU,EAAE;QACjC,MAAM,SAAS,IAAI;QACnB,OAAO,WAAW,CAAC,IAAI,SAAS,YAAY;QAC5C,OAAO,OAAO,QAAQ,CAAC,IAAI;IAC7B;IACA,0DAA0D,GAC1D,GAAG,IAAI,EAAE;QACP,MAAM,SAAS,IAAI;QACnB,OAAO,MAAM,CAAC,IAAI;QAClB,KAAK,OAAO,CAAC,CAAC;YACZ,OAAO,OAAO,MAAM,CAAC;QACvB;QACA,OAAO;IACT;IACA,IAAI,KAAK,EAAE;QACT,IAAI,MAAM,MAAM,KAAK,GACnB,OAAO,IAAI;QAEb,MAAM,cAAc,IAAI,CAAC,SAAS;QAClC,MAAM,iBAAiB,MAAM,SAAS;QACtC,IAAI;QACJ,MAAM,SAAS,YAAY,MAAM;QACjC,MAAM,YAAY,eAAe,MAAM;QACvC,IAAI,IAAI;QACR,IAAI,IAAI;QACR,MAAO,IAAI,UAAU,IAAI,UAAW;YAClC,MAAM,OAAO,WAAW,CAAC,EAAE;YAC3B,MAAM,SAAS,cAAc,CAAC,EAAE;YAChC,IAAI,KAAK,oBAAoB,CAAC,SAC5B;iBACK,IAAI,OAAO,oBAAoB,CAAC,OACrC;iBACK,IAAI,KAAK,gBAAgB,CAAC,SAAS;gBACxC,IAAI,CAAC,cACH,eAAe,IAAI;gBAErB,aAAa,WAAW,CAAC,KAAK,YAAY,CAAC;gBAC3C;YACF,OAAO,IAAI,OAAO,gBAAgB,CAAC,OAAO;gBACxC,IAAI,CAAC,cACH,eAAe,IAAI;gBAErB,aAAa,WAAW,CAAC,KAAK,YAAY,CAAC;gBAC3C;YACF,OAAO,IAAI,CAAC,KAAK,QAAQ,CAAC,SAAS;gBACjC,IAAI,CAAC,cACH,eAAe,IAAI;gBAErB,aAAa,WAAW,CAAC,KAAK,YAAY,CAAC;gBAC3C,IAAI,KAAK,sBAAsB,CAAC,SAC9B;qBACK,IAAI,OAAO,sBAAsB,CAAC,OACvC;YAEJ;QACF;QACA,IAAI,CAAC,cACH,OAAO,IAAI;QAEb,OAAO;IACT;IACA;;;;GAIC,GACD,SAAS,KAAK,EAAE;QACd,IAAI,IAAI,CAAC,MAAM,KAAK,GAClB,OAAO,IAAI;QAEb,MAAM,SAAS,IAAI,aAAa,IAAI;QACpC,IAAI,MAAM,MAAM,KAAK,GACnB,OAAO;QAET,IAAI,UAAU;QACd,IAAI,SAAS;QACb,MAAO,UAAU,OAAO,SAAS,CAAC,MAAM,IAAI,SAAS,MAAM,SAAS,CAAC,MAAM,CAAE;YAC3E,MAAM,iBAAiB,OAAO,SAAS,CAAC,QAAQ;YAChD,MAAM,gBAAgB,MAAM,SAAS,CAAC,OAAO;YAC7C,IAAI,cAAc,IAAI,GAAG,eAAe,KAAK,EAAE;gBAC7C;gBACA;YACF;YACA,IAAI,cAAc,KAAK,GAAG,eAAe,IAAI,EAAE;gBAC7C;gBACA;YACF;YACA,IAAI;YACJ,IAAI;YACJ,IAAI,cAAc,KAAK,GAAG,eAAe,KAAK,EAC5C,gBAAgB,IAAI,SAAS,eAAe,KAAK,EAAE,cAAc,KAAK,GAAG;YAE3E,IAAI,cAAc,IAAI,GAAG,eAAe,IAAI,EAC1C,eAAe,IAAI,SAAS,cAAc,IAAI,GAAG,GAAG,eAAe,IAAI;YAEzE,IAAI;gBACF,IAAI,cAAc;oBAChB,OAAO,SAAS,CAAC,QAAQ,GAAG;oBAC5B,OAAO,SAAS,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG;oBACxC;oBACA;gBACF,OAAO;oBACL,OAAO,SAAS,CAAC,QAAQ,GAAG;oBAC5B;gBACF;mBAEA,IAAI,cAAc;gBAChB,OAAO,SAAS,CAAC,QAAQ,GAAG;gBAC5B;YACF,OACE,OAAO,SAAS,CAAC,MAAM,CAAC,SAAS;QAGvC;QACA,OAAO;IACT;IACA,SAAS,EAAE,EAAE;QACX,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM;QAChC,IAAI,IAAI;QACR,IAAI,IAAI,KAAK;QACb,MAAO,KAAK,EAAG;YACb,MAAM,KAAK,KAAK,KAAK,CAAC,AAAC,CAAA,IAAI,CAAA,IAAK;YAChC,MAAM,WAAW,IAAI,CAAC,SAAS,CAAC,GAAG;YACnC,IAAI,SAAS,IAAI,GAAG,IAClB,IAAI,KAAK;iBACJ,IAAI,SAAS,KAAK,GAAG,IAC1B,IAAI,KAAK;iBAET,OAAO;QAEX;QACA,OAAO;IACT;IACA,YAAY,QAAQ,EAAE;QACpB,IAAI,CAAC,cAAc,GAAG,KAAK;QAC3B,IAAI,SAAS,KAAK,KAAK,SAAS,IAAI,EAClC,IAAI,CAAC,SAAS,CAAC,SAAS,KAAK;aACxB,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM;YAClC,IAAI,MAAM;YACV,KAAK,MAAM,YAAY,IAAI,CAAC,SAAS,CAAE;gBACrC,IAAI,SAAS,IAAI,IAAI,SAAS,KAAK,EACjC;qBACK,IAAI,SAAS,KAAK,GAAG,SAAS,KAAK,IAAI,SAAS,IAAI,GAAG,SAAS,IAAI,EAAE;oBAC3E,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,SAAS,SAAS,KAAK,EAAE,SAAS,KAAK;oBACjE,MAAM,IAAI,IAAI,SAAS,SAAS,IAAI,EAAE,SAAS,IAAI;oBACnD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,GAAG;oBAC9B;gBACF,OAAO,IAAI,SAAS,KAAK,IAAI,SAAS,KAAK,IAAI,SAAS,IAAI,IAAI,SAAS,IAAI,EAAE;oBAC7E,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK;oBAC3B,MAAM,MAAM;gBACd,OAAO,IAAI,SAAS,KAAK,GAAG,SAAS,IAAI,EACvC,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,SAAS,SAAS,KAAK,EAAE,SAAS,KAAK;qBAC5D,IAAI,SAAS,IAAI,GAAG,SAAS,IAAI,EACtC,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,SAAS,SAAS,IAAI,EAAE,SAAS,IAAI;gBAEjE,OAAO;YACT;QACF;IACF;IACA,UAAU,KAAK,EAAE;QACf,IAAI,CAAC,cAAc,GAAG,KAAK;QAC3B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAK;YAC9C,MAAM,WAAW,IAAI,CAAC,SAAS,CAAC,EAAE;YAClC,IAAI,QAAQ,SAAS,KAAK,EACxB;iBACK,IAAI,UAAU,SAAS,KAAK,IAAI,UAAU,SAAS,IAAI,EAAE;gBAC9D,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG;gBACzB;YACF,OAAO,IAAI,UAAU,SAAS,KAAK,EAAE;gBACnC,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,SAAS,SAAS,KAAK,GAAG,GAAG,SAAS,IAAI;gBAClE;YACF,OAAO,IAAI,UAAU,SAAS,IAAI,EAAE;gBAClC,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,SAAS,SAAS,KAAK,EAAE,SAAS,IAAI,GAAG;gBACjE;YACF,OAAO,IAAI,QAAQ,SAAS,IAAI,EAAE;gBAChC,MAAM,UAAU,IAAI,SAAS,SAAS,KAAK,EAAE,QAAQ;gBACrD,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,SAAS,QAAQ,GAAG,SAAS,IAAI;gBACzD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,GAAG;gBAC5B;YACF;QACF;IACF;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,KAAK,MAAM,YAAY,IAAI,CAAC,SAAS,CAAE;gBACrC,OAAO,WAAW,MAAM,CAAC,MAAM,SAAS,KAAK;gBAC7C,OAAO,WAAW,MAAM,CAAC,MAAM,SAAS,IAAI;YAC9C;YACA,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG;QACxE;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA;;;;GAIC,GACD,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,MAAM,SAAS,CAAC,MAAM,EAClD,OAAO;QAET,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAK;YAC9C,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,SAAS,CAAC,EAAE,GAC9C,OAAO;QAEX;QACA,OAAO;IACT;IACA,SAAS,eAAe,EAAE;QACxB,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,GAC5B,OAAO;QAET,IAAI,SAAS;QACb,IAAI,IAAI,CAAC,MAAM,GAAG,GAChB,UAAU;QAEZ,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,EAAG;YAC9C,MAAM,WAAW,IAAI,CAAC,SAAS,CAAC,EAAE;YAClC,MAAM,QAAQ,SAAS,KAAK;YAC5B,MAAM,OAAO,SAAS,IAAI;YAC1B,IAAI,UAAU,MAAM;gBAClB,IAAI,UAAU,MAAM,GAAG,EACrB,UAAU;qBACL,IAAI,iBACT,UAAU,MAAM,OAAO,aAAa,CAAC,SAAS;qBAE9C,UAAU;YAEd,OACE,IAAI,iBACF,UAAU,MAAM,OAAO,aAAa,CAAC,SAAS,SAAS,OAAO,aAAa,CAAC,QAAQ;iBAEpF,UAAU,QAAQ,OAAO;YAG7B,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,GAC9B,UAAU;QAEd;QACA,IAAI,IAAI,CAAC,MAAM,GAAG,GAChB,UAAU;QAEZ,OAAO;IACT;IACA,uBAAuB,UAAU,EAAE;QACjC,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,GAC5B,OAAO;QAET,IAAI,SAAS;QACb,IAAI,IAAI,CAAC,MAAM,GAAG,GAChB,UAAU;QAEZ,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,EAAG;YAC9C,MAAM,WAAW,IAAI,CAAC,SAAS,CAAC,EAAE;YAClC,MAAM,QAAQ,SAAS,KAAK;YAC5B,MAAM,OAAO,SAAS,IAAI;YAC1B,IAAI,UAAU;gBACZ,IAAI,UAAU,MAAM,GAAG,EACrB,UAAU;qBAEV,UAAU,IAAI,CAAC,WAAW,CAAC,YAAY;mBAGzC,IAAK,IAAI,KAAK,OAAO,MAAM,MAAM,EAAE,GAAI;gBACrC,IAAI,KAAK,OACP,UAAU;gBAEZ,UAAU,IAAI,CAAC,WAAW,CAAC,YAAY;YACzC;YAEF,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,GAC9B,UAAU;QAEd;QACA,IAAI,IAAI,CAAC,MAAM,GAAG,GAChB,UAAU;QAEZ,OAAO;IACT;IACA,sBAAsB,SAAS,EAAE;QAC/B,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,GAC5B,OAAO;QAET,IAAI,SAAS;QACb,IAAI,IAAI,CAAC,MAAM,GAAG,GAChB,UAAU;QAEZ,MAAM,aAAa,WAAW,cAAc,CAAC;QAC7C,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,EAAG;YAC9C,MAAM,WAAW,IAAI,CAAC,SAAS,CAAC,EAAE;YAClC,MAAM,QAAQ,SAAS,KAAK;YAC5B,MAAM,OAAO,SAAS,IAAI;YAC1B,IAAI,UAAU;gBACZ,IAAI,UAAU,MAAM,GAAG,EACrB,UAAU;qBAEV,UAAU,IAAI,CAAC,WAAW,CAAC,YAAY;mBAGzC,IAAK,IAAI,KAAK,OAAO,MAAM,MAAM,EAAE,GAAI;gBACrC,IAAI,KAAK,OACP,UAAU;gBAEZ,UAAU,IAAI,CAAC,WAAW,CAAC,YAAY;YACzC;YAEF,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,GAC9B,UAAU;QAEd;QACA,IAAI,IAAI,CAAC,MAAM,GAAG,GAChB,UAAU;QAEZ,OAAO;IACT;IACA,UAAU;QACR,MAAM,OAAO,EAAE;QACf,KAAK,MAAM,YAAY,IAAI,CAAC,SAAS,CACnC,IAAK,IAAI,IAAI,SAAS,KAAK,EAAE,KAAK,SAAS,IAAI,EAAE,IAC/C,KAAK,IAAI,CAAC;QAGd,OAAO;IACT;IACA,iDAAiD,GACjD,IAAI,SAAS;QACX,IAAI,SAAS;QACb,KAAK,MAAM,YAAY,IAAI,CAAC,SAAS,CACnC,UAAU,SAAS,MAAM;QAE3B,OAAO;IACT;IACA,YAAY,UAAU,EAAE,KAAK,EAAE;QAC7B,IAAI,UAAU,MAAM,GAAG,EACrB,OAAO;QAET,IAAI,UAAU,MAAM,OAAO,EACzB,OAAO;QAET,OAAO,WAAW,cAAc,CAAC;IACnC;AACF;AAEA,uBAAuB;AACvB,IAAI,eAAe,aAAa,GAAG,OAAO,CAAC;IACzC,OAAO,OAAO,UAAU,MAAM,KAAK;AACrC,GAAG;AACH,IAAI,gBAAgB,aAAa,GAAG,OAAO,CAAC;IAC1C,OAAO,MAAM,OAAO,SAAS;AAC/B,GAAG;AACH,IAAI,gBAAgB,aAAa,GAAG,OAAO,CAAC;IAC1C,OAAO,MAAM,OAAO,CAAC,SAAS,MAAM,MAAM,GAAG,CAAC,eAAe,IAAI,CAAC,QAAQ,MAAM;AAClF,GAAG;AACH,IAAI,cAAc,aAAa,GAAG,OAAO,CAAC,GAAG;IAC3C,IAAI,MAAM,GACR,OAAO;IAET,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,EACvB,OAAO;IAET,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QACjC,MAAM,OAAO,CAAC,CAAC,EAAE;QACjB,MAAM,QAAQ,CAAC,CAAC,EAAE;QAClB,IAAI,SAAS,OACX;QAEF,IAAI,CAAC,QAAQ,CAAC,KAAK,MAAM,CAAC,QACxB,OAAO;IAEX;IACA,OAAO;AACT,GAAG;AACH,IAAI,oBAAoB,aAAa,GAAG,OAAO,CAAC,GAAG;IACjD,IAAI,MAAM,GACR,OAAO;IAET,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,EACvB,OAAO;IAET,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QACjC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EACf,OAAO;IAEX;IACA,OAAO;AACT,GAAG;AACH,IAAI,mBAAmB,aAAa,GAAG,OAAO,CAAC,GAAG,eAAe,KAAK;IACpE,IAAI,EAAE,OAAO,CAAC,OAAO,OAAO,OAAO,CAAC,OAAO,OAAO,OAAO,CAAC,OAAO;IACjE,IAAI,cACF,IAAI,EAAE,OAAO,CAAC,MAAM;IAEtB,OAAO;AACT,GAAG;AAEH,6BAA6B;AAC7B,IAAI,kBAAkB,MAAM;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,eAAe;IACf,OAAO,WAAW,CAAC,EAAE,CAAC,EAAE;QACtB,IAAI,MAAM,QAAQ,MAAM,iBAAiB,IAAI,EAC3C,OAAO;QAET,IAAI,MAAM,QAAQ,MAAM,iBAAiB,IAAI,EAC3C,OAAO;QAET,MAAM,SAAS,IAAI,IAAI,GAAG;QAC1B,IAAI,OAAO,QAAQ,CAAC,MAAM,KAAK,GAC7B,OAAO,OAAO,QAAQ,CAAC,EAAE;QAE3B,OAAO;IACT;IACA,OAAO,UAAU,CAAC,EAAE,CAAC,EAAE;QACrB,IAAI,MAAM,MACR,OAAO;QAET,IAAI,MAAM,MACR,OAAO;QAET,IAAI,MAAM,iBAAiB,IAAI,IAAI,MAAM,iBAAiB,IAAI,EAC5D,OAAO,iBAAiB,IAAI;QAE9B,MAAM,SAAS,IAAI,GAAG,GAAG;QACzB,IAAI,OAAO,QAAQ,CAAC,MAAM,KAAK,GAC7B,OAAO,OAAO,QAAQ,CAAC,EAAE;aAEzB,OAAO;IAEX;IACA,OAAO,2BAA2B,GAAG,EAAE;QACrC,MAAM,SAAS,EAAE;QACjB,KAAK,MAAM,WAAW,IACpB,IAAI,mBAAmB,iBAAiB,mBAAmB,EACzD,OAAO,IAAI,CAAC;QAGhB,OAAO;IACT;IACA;;;;;;;;;;;;;;;GAeC,GACD,eAAe,OAAO,EAAE,gBAAgB,EAAE;QACxC,OAAO,IAAI;IACb;AACF;AACA,IAAI,MAAM,MAAM,aAAa;IAC3B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,SAAS;IACT;;;GAGC,GACD,YAAY,CAAC,EAAE,CAAC,CAAE;QAChB,KAAK;QACL,MAAM,WAAW,IAAI;QACrB,IAAI,aAAa,MACf,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClB,SAAS,GAAG,CAAC;QACf;aAEA,SAAS,GAAG,CAAC;QAEf,IAAI,aAAa,MACf,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClB,SAAS,GAAG,CAAC;QACf;aAEA,SAAS,GAAG,CAAC;QAEf,MAAM,uBAAuB,gBAAgB,0BAA0B,CAAC;QACxE,IAAI,qBAAqB,MAAM,GAAG,GAAG;YACnC,IAAI,UAAU;YACd,qBAAqB,OAAO,CAAC,CAAC;gBAC5B,IAAI,YAAY,QAAQ,EAAE,UAAU,GAAG,QAAQ,UAAU,EACvD,UAAU;YAEd;YACA,IAAI,SACF,SAAS,GAAG,CAAC;QAEjB;QACA,IAAI,CAAC,QAAQ,GAAG,SAAS,OAAO;IAClC;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,IAAG,GACxB,OAAO;QAET,OAAO,YAAY,IAAI,CAAC,QAAQ,EAAE,MAAM,QAAQ;IAClD;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,KAAK,MAAM,WAAW,IAAI,CAAC,QAAQ,CACjC,OAAO,WAAW,oBAAoB,CAAC,MAAM;YAE/C,OAAO,WAAW,MAAM,CAAC,MAAM;YAC/B,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG;QACvE;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA;;;;;;GAMC,GACD,SAAS,MAAM,EAAE,eAAe,EAAE;QAChC,KAAK,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAE;YACnC,IAAI,CAAC,QAAQ,QAAQ,CAAC,QAAQ,kBAC5B,OAAO;QAEX;QACA,OAAO;IACT;IACA,eAAe,MAAM,EAAE,eAAe,EAAE;QACtC,IAAI,UAAU;QACd,MAAM,WAAW,EAAE;QACnB,KAAK,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAE;YACnC,MAAM,YAAY,QAAQ,cAAc,CAAC,QAAQ;YACjD,YAAY,cAAc;YAC1B,IAAI,cAAc,MAChB,OAAO;iBACF,IAAI,cAAc,gBAAgB,IAAI,EAC3C,SAAS,IAAI,CAAC;QAElB;QACA,IAAI,CAAC,SACH,OAAO,IAAI;QAEb,IAAI,SAAS,MAAM,KAAK,GACtB,OAAO,gBAAgB,IAAI;QAE7B,IAAI,SAAS;QACb,SAAS,OAAO,CAAC,CAAC;YAChB,SAAS,WAAW,OAAO,IAAI,gBAAgB,UAAU,CAAC,QAAQ;QACpE;QACA,OAAO;IACT;IACA,WAAW;QACT,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC3B,OAAO,EAAE,QAAQ;QACnB;QACA,OAAO,AAAC,CAAA,EAAE,MAAM,GAAG,IAAI,EAAE,KAAK,CAAC,KAAK,CAAA,EAAG,IAAI,CAAC;IAC9C;AACF;AACA,IAAI,KAAK,MAAM,YAAY;IACzB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,SAAS;IACT;;;GAGC,GACD,YAAY,CAAC,EAAE,CAAC,CAAE;QAChB,KAAK;QACL,MAAM,WAAW,IAAI;QACrB,IAAI,aAAa,KACf,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClB,SAAS,GAAG,CAAC;QACf;aAEA,SAAS,GAAG,CAAC;QAEf,IAAI,aAAa,KACf,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClB,SAAS,GAAG,CAAC;QACf;aAEA,SAAS,GAAG,CAAC;QAEf,MAAM,uBAAuB,gBAAgB,0BAA0B,CAAC;QACxE,IAAI,qBAAqB,MAAM,GAAG,GAAG;YACnC,MAAM,IAAI,qBAAqB,IAAI,CAAC,CAAC,IAAI;gBACvC,OAAO,GAAG,SAAS,CAAC;YACtB;YACA,MAAM,UAAU,CAAC,CAAC,EAAE,MAAM,GAAG,EAAE;YAC/B,SAAS,GAAG,CAAC;QACf;QACA,IAAI,CAAC,QAAQ,GAAG,SAAS,OAAO;IAClC;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;aACF,IAAI,CAAE,CAAA,iBAAiB,GAAE,GAC9B,OAAO;aAEP,OAAO,YAAY,IAAI,CAAC,QAAQ,EAAE,MAAM,QAAQ;IAEpD;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,KAAK,MAAM,WAAW,IAAI,CAAC,QAAQ,CACjC,OAAO,WAAW,oBAAoB,CAAC,MAAM;YAE/C,OAAO,WAAW,MAAM,CAAC,MAAM;YAC/B,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG;QACvE;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA;;GAEC,GACD,SAAS,MAAM,EAAE,eAAe,EAAE;QAChC,KAAK,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAE;YACnC,IAAI,QAAQ,QAAQ,CAAC,QAAQ,kBAC3B,OAAO;QAEX;QACA,OAAO;IACT;IACA,eAAe,MAAM,EAAE,eAAe,EAAE;QACtC,IAAI,UAAU;QACd,MAAM,WAAW,EAAE;QACnB,KAAK,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAE;YACnC,MAAM,YAAY,QAAQ,cAAc,CAAC,QAAQ;YACjD,YAAY,cAAc;YAC1B,IAAI,cAAc,gBAAgB,IAAI,EACpC,OAAO,gBAAgB,IAAI;iBACtB,IAAI,cAAc,MACvB,SAAS,IAAI,CAAC;QAElB;QACA,IAAI,CAAC,SACH,OAAO,IAAI;QAEb,IAAI,SAAS,MAAM,KAAK,GACtB,OAAO;QAET,IAAI,SAAS;QACb,SAAS,OAAO,CAAC,CAAC;YAChB,SAAS,WAAW,OAAO,IAAI,gBAAgB,SAAS,CAAC,QAAQ;QACnE;QACA,OAAO;IACT;IACA,WAAW;QACT,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC3B,OAAO,EAAE,QAAQ;QACnB;QACA,OAAO,AAAC,CAAA,EAAE,MAAM,GAAG,IAAI,EAAE,KAAK,CAAC,KAAK,CAAA,EAAG,IAAI,CAAC;IAC9C;AACF;AACC,CAAA,CAAC;IACA,MAAM,kBAAkB;QACtB,MAAO;YACL,OAAO,IAAI,EAAE;QACf,CAAC;QACD,UAAU;QACV,UAAU;QACV,eAAe;QACf,uBAAuB;QACvB,YAAY,SAAS,EAAE,SAAS,EAAE,cAAc,CAAE;YAChD,KAAK;YACL,IAAI,CAAC,SAAS,GAAG,aAAa;YAC9B,IAAI,CAAC,SAAS,GAAG,aAAa;YAC9B,IAAI,CAAC,cAAc,GAAG,kBAAkB;QAC1C;QACA,SAAS,MAAM,EAAE,YAAY,EAAE;YAC7B,MAAM,WAAW,IAAI,CAAC,cAAc,GAAG,eAAe;YACtD,OAAO,OAAO,OAAO,CAAC,UAAU,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS;QAChE;QACA,WAAW;YACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;gBAClC,IAAI,WAAW,WAAW,UAAU;gBACpC,WAAW,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,SAAS;gBACrD,WAAW,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,SAAS;gBACrD,WAAW,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,cAAc,GAAG,IAAI;gBACjE,WAAW,WAAW,MAAM,CAAC,UAAU;gBACvC,IAAI,CAAC,cAAc,GAAG;YACxB;YACA,OAAO,IAAI,CAAC,cAAc;QAC5B;QACA,OAAO,KAAK,EAAE;YACZ,IAAI,IAAI,KAAK,OACX,OAAO;YAET,OAAO,IAAI,CAAC,SAAS,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,cAAc,KAAK,MAAM,cAAc;QACjI;QACA,WAAW;YACT,OAAO,MAAM,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,GAAG;QACvD;IACF;IACA,iBAAiB,SAAS,GAAG;IAC7B,MAAM,4BAA4B;QAChC,MAAO;YACL,OAAO,IAAI,EAAE;QACf,CAAC;QACD,WAAW;QACX,YAAY,UAAU,CAAE;YACtB,KAAK;YACL,IAAI,CAAC,UAAU,GAAG,cAAc;QAClC;QACA,SAAS,MAAM,EAAE,YAAY,EAAE;YAC7B,OAAO,OAAO,QAAQ,CAAC,cAAc,IAAI,CAAC,UAAU;QACtD;QACA,eAAe,MAAM,EAAE,YAAY,EAAE;YACnC,IAAI,OAAO,QAAQ,CAAC,gBAAgB,MAAM,IAAI,CAAC,UAAU,GACvD,OAAO,iBAAiB,IAAI;YAE9B,OAAO;QACT;QACA,UAAU,KAAK,EAAE;YACf,OAAO,IAAI,CAAC,UAAU,GAAG,MAAM,UAAU;QAC3C;QACA,WAAW;YACT,OAAO,KAAK,IAAI,CAAC,UAAU;QAC7B;QACA,OAAO,KAAK,EAAE;YACZ,IAAI,IAAI,KAAK,OACX,OAAO;YAET,OAAO,IAAI,CAAC,UAAU,KAAK,MAAM,UAAU;QAC7C;QACA,WAAW;YACT,OAAO,MAAM,IAAI,CAAC,UAAU,GAAG;QACjC;IACF;IACA,iBAAiB,mBAAmB,GAAG;IACvC,iBAAiB,IAAI,GAAG,IAAI;AAC9B,CAAA,EAAG,mBAAoB,CAAA,kBAAkB,CAAC,CAAA;AAE1C,uBAAuB;AACvB,IAAI,YAAY,MAAM;IACpB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,qDAAqD,GACrD,MAAM;IACN,gEAAgE,GAChE,IAAI;IACJ;;;;;;;;;GASC,GACD,0BAA0B,MAAM;IAChC,yBAAyB;IACzB,6BAA6B,MAAM;IACnC,yBAAyB;IACzB,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,CAAA,eAAgB;IAC9B;IACA,eAAe;IACf,8BAA8B;IAC9B;;;;;;GAMC,GACD,CAAA,OAAQ,GAAG,KAAK;IAChB,CAAA,eAAgB,CAAC;IACjB,yEAAyE,GACzE,YAAY,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,eAAe,CAAE;QAC9C,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG;QAChB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,CAAA,eAAgB,GAAG,mBAAmB,gBAAgB,IAAI;QAC/D,IAAI,CAAC,uBAAuB,GAAG,EAAE,uBAAuB;QACxD,IAAI,EAAE,0BAA0B,KAAK,KAAK,GACxC,IAAI,CAAC,0BAA0B,GAAG,EAAE,0BAA0B;IAElE;IACA,OAAO,UAAU,GAAG,EAAE,eAAe,EAAE;QACrC,OAAO,IAAI,WAAW,KAAK,IAAI,KAAK,EAAE,IAAI,OAAO,EAAE,mBAAmB,IAAI,eAAe;IAC3F;IACA,OAAO,kBAAkB,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,eAAe,EAAE;QAC7D,OAAO,IAAI,WAAW;YAAE;QAAI,GAAG,OAAO,SAAS;IACjD;IACA,OAAO,iBAAiB,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE;QAC9C,OAAO,IAAI,WAAW,QAAQ,OAAO,WAAW,OAAO,OAAO,EAAE,OAAO,eAAe;IACxF;IACA,OAAO,0BAA0B,KAAK,EAAE,CAAC,EAAE,eAAe,EAAE;QAC1D,OAAO,IAAI,WAAW,GAAG,SAAS,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE;IACxD;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,WAAW,WAAW,UAAU,CAAC;YACrC,WAAW,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,KAAK,CAAC,WAAW;YAC7D,WAAW,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,GAAG;YAC/C,WAAW,WAAW,oBAAoB,CAAC,UAAU,IAAI,CAAC,CAAA,OAAQ;YAClE,WAAW,WAAW,oBAAoB,CAAC,UAAU,IAAI,CAAC,eAAe;YACzE,WAAW,WAAW,MAAM,CAAC,UAAU;YACvC,IAAI,CAAC,cAAc,GAAG;QACxB;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA;;;;GAIC,GACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,CAAA,OAAQ;IACtB;IACA,IAAI,QAAQ,OAAO,EAAE;QACnB,IAAI,CAAC,CAAA,OAAQ,GAAG;QAChB,IAAI,CAAC,cAAc,GAAG,KAAK;IAC7B;IACA;;;;GAIC,GACD,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,MAAM,KAAK,CAAC,WAAW,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM,GAAG,IAAK,CAAA,IAAI,CAAC,OAAO,KAAK,OAAO,MAAM,OAAO,KAAK,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,OAAO,CAAA,KAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,eAAe,KAAK,IAAI,CAAC,0BAA0B,KAAK,MAAM,0BAA0B;IAC5S;IACA,SAAS,MAAM,EAAE,UAAU,IAAI,EAAE;QAC/B,IAAI,MAAM;QACV,IAAI,SACF,MAAM,MAAM,IAAI,CAAC,GAAG;QAEtB,OAAO,MAAM,IAAI,CAAC,KAAK,GAAG,MAAO,CAAA,IAAI,CAAC,OAAO,KAAK,OAAO,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,MAAM,EAAC,IAAM,CAAA,IAAI,CAAC,eAAe,KAAK,gBAAgB,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,KAAK,EAAC,IAAM,CAAA,IAAI,CAAC,uBAAuB,GAAG,SAAS,IAAI,CAAC,uBAAuB,GAAG,EAAC,IAAK;IACrR;AACF;AAEA,sBAAsB;AACtB,IAAI,WAAW,MAAM;IACnB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,uBAAuB,GAAG;IACjC,OAAO,eAAe,EAAE;IACxB,OAAO,QAAQ,EAAE;IACjB,OAAO,aAAa,EAAE;IACtB,OAAO,cAAc,EAAE;IACvB,OAAO,mBAAmB,EAAE;IAC5B,OAAO,mBAAmB,EAAE;IAC5B,OAAO,cAAc,EAAE;IACvB,OAAO,YAAY,EAAE;IACrB,OAAO,YAAY,EAAE;IACrB,OAAO,iBAAiB,EAAE;IAC1B,OAAO,kBAAkB,GAAG;IAC5B,OAAO,iBAAiB,GAAG;IAC3B,OAAO,WAAW,GAAG;IACrB,OAAO,YAAY,UAAU,oBAAoB,CAAC;IAClD,cAAc,EAAE;IAChB,YAAY,EAAE;IACd,yCAAyC;IACzC,yBAAyB,MAAM;IAC/B,yEAAyE,GACzE,oBAAoB;IACpB,yDAAyD,GACzD,cAAc,EAAE,CAAC;IACjB,WAAW;QACT,OAAO,IAAI,CAAC,WAAW;IACzB;IACA,OAAO,KAAK,EAAE;QACZ,OAAO,IAAI,CAAC,WAAW,KAAK,MAAM,WAAW;IAC/C;IACA,WAAW;QACT,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE;IAC9B;IACA,qBAAqB,KAAK,EAAE,UAAU,EAAE;QACtC,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,GAC9B,IAAI,CAAC,sBAAsB,GAAG,WAAW,SAAS;aAC7C,IAAI,IAAI,CAAC,sBAAsB,KAAK,WAAW,SAAS,EAC7D,IAAI,CAAC,sBAAsB,GAAG;QAEhC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,GAAG;IACpC;IACA,cAAc,UAAU,EAAE;QACxB,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,GAC9B,IAAI,CAAC,sBAAsB,GAAG,WAAW,SAAS;aAC7C,IAAI,IAAI,CAAC,sBAAsB,KAAK,WAAW,SAAS,EAC7D,IAAI,CAAC,sBAAsB,GAAG;QAEhC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IACxB;IACA,cAAc,CAAC,EAAE,CAAC,EAAE;QAClB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,GAAG;IAChC;IACA,iBAAiB,KAAK,EAAE;QACtB,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO;QACzC,OAAO,CAAC,CAAC,EAAE;IACb;AACF;AAEA,+BAA+B;AAC/B,IAAI,oBAAoB,MAAM;IAC5B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;GAIC,GACD,OAAO,qBAAqB,WAAW;IACvC,OAAO,oBAAoB,MAAM;IACjC,eAAe;IACf,YAAY,cAAc,CAAE;QAC1B,IAAI,CAAC,cAAc,GAAG;IACxB;IACA,OAAO,yBAAyB;QAC9B,IAAI,OAAO,WAAW,UAAU,CAAC;QACjC,OAAO,WAAW,MAAM,CAAC,MAAM;QAC/B,OAAO;IACT;IACA,OAAO,wBAAwB,MAAM,EAAE,WAAW,EAAE;QAClD,IAAI,OAAO,WAAW,UAAU,CAAC;QACjC,OAAO,WAAW,oBAAoB,CAAC,MAAM;QAC7C,OAAO,WAAW,MAAM,CAAC,MAAM;QAC/B,OAAO,WAAW,MAAM,CAAC,MAAM;QAC/B,OAAO;IACT;IACA,OAAO,sBAAsB,OAAO,EAAE,YAAY,EAAE;QAClD,IAAI,OAAO,WAAW,UAAU,CAAC;QACjC,KAAK,MAAM,UAAU,QACnB,OAAO,WAAW,oBAAoB,CAAC,MAAM;QAE/C,KAAK,MAAM,eAAe,aACxB,OAAO,WAAW,MAAM,CAAC,MAAM;QAEjC,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,QAAQ,MAAM;QACjD,OAAO;IACT;IACA,UAAU;QACR,OAAO;IACT;IACA,eAAe;QACb,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,mBAAmB,kBAAkB;IACvF;IACA,WAAW;QACT,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,SAAS,MAAM,EAAE;QACf,OAAO;IACT;AACF;AAEA,wCAAwC;AACxC,IAAI,6BAA6B,MAAM,oCAAoC;IACzE,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO;IACP,YAAY;IACZ,YAAY,MAAM,EAAE,WAAW,CAAE;QAC/B,KAAK,CACH,SAAS,kBAAkB,uBAAuB,CAAC,QAAQ,eAAe,kBAAkB,sBAAsB;QAEpH,IAAI,CAAC,MAAM,GAAG,UAAU;QACxB,IAAI,CAAC,WAAW,GAAG;IACrB;IACA,UAAU,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC,MAAM;IACpB;IACA,eAAe,MAAM,EAAE;QACrB,OAAO,IAAI,CAAC,WAAW;IACzB;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,2BAA0B,GAC/C,OAAO;QAET,IAAI,IAAI,CAAC,QAAQ,OAAO,MAAM,QAAQ,IACpC,OAAO;QAET,IAAI,IAAI,CAAC,WAAW,KAAK,MAAM,WAAW,EACxC,OAAO;QAET,IAAI,IAAI,CAAC,MAAM,IAAI,MACjB,OAAO,MAAM,MAAM,IAAI;QAEzB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,MAAM;IACxC;IACA,WAAW;QACT,MAAM,KAAK,IAAI,CAAC,MAAM,KAAK,OAAO,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ;QAC3D,IAAI,GAAG,MAAM,KAAK,GAAG;YACnB,IAAI,IAAI,CAAC,WAAW,KAAK,kBAAkB,kBAAkB,EAC3D,OAAO;YAET,OAAO,KAAK,IAAI,CAAC,WAAW;QAC9B,OACE,OAAO,KAAK,IAAI,CAAC,WAAW,GAAG,MAAM;IAEzC;IACA,IAAI,SAAS;QACX,OAAO;IACT;AACF;AAEA,oCAAoC;AACpC,IAAI,yBAAyB,MAAM,gCAAgC;IACjE,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;GAGC,GACD,OAAO,WAAW,IAAI,0BAA0B;IAChD,aAAc;QACZ,KAAK,CAAC,KAAK,GAAG,kBAAkB,kBAAkB;IACpD;IACA,UAAU;QACR,OAAO;IACT;IACA,YAAY;QACV,OAAO;IACT;IACA,iBAAiB;QACf,OAAO,IAAI,CAAC,WAAW;IACzB;IACA,OAAO,KAAK,EAAE;QACZ,OAAO,IAAI,KAAK;IAClB;IACA,WAAW;QACT,OAAO;IACT;AACF;AAEA,wBAAwB;AACxB,IAAI,aAAa;IACf,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,UAAU,EAAE;IACnB,OAAO,UAAU,EAAE;IACnB,OAAO,QAAQ,EAAE;IACjB,OAAO,OAAO,EAAE;IAChB,OAAO,YAAY,EAAE;IACrB,8BAA8B;IAC9B,OAAO,OAAO,EAAE;IAChB,OAAO,SAAS,EAAE;IAClB,OAAO,MAAM,EAAE;IACf,mDAAmD;IACnD,OAAO,UAAU,EAAE;IACnB,OAAO,WAAW,EAAE;IACpB,OAAO,aAAa,GAAG;IACvB,mCAAmC,GACnC,OAAO;IACP,YAAY,MAAM,CAAE;QAClB,IAAI,CAAC,MAAM,GAAG;IAChB;IACA;;;;;;;;GAQC,GACD,IAAI,YAAY;QACd,OAAO;IACT;IACA,IAAI,QAAQ;QACV,OAAO;IACT;IACA,WAAW;QACT,OAAO;IACT;AACF;AAEA,2BAA2B;AAC3B,IAAI,gBAAgB,cAAc;IAChC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,IAAI;IACJ,YAAY,MAAM,EAAE,GAAG,CAAE;QACvB,KAAK,CAAC;QACN,IAAI,KACF,IAAI,CAAC,GAAG,GAAG;aAEX,IAAI,CAAC,GAAG,GAAG,YAAY,EAAE,CAAC,MAAM,YAAY,EAAE,MAAM,YAAY;IAEpE;IACA,IAAI,iBAAiB;QACnB,OAAO,WAAW,GAAG;IACvB;IACA,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,GAAG;IACjB;IACA,QAAQ,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE;QAChD,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;IAC3B;IACA,WAAW;QACT,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ;IAC1B;AACF;AAEA,8BAA8B;AAC9B,IAAI,mBAAmB,cAAc;IACnC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,IAAI,iBAAiB;QACnB,OAAO,WAAW,OAAO;IAC3B;IACA,QAAQ,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE;QAC9C,OAAO,UAAU,kBAAkB,UAAU,kBAAkB,CAAC,KAAK,CAAC,QAAQ,QAAQ,gBAAgB;IACxG;IACA,WAAW;QACT,OAAO,MAAM,KAAK,CAAC;IACrB;AACF;AAEA,qCAAqC;AACrC,IAAI,2BAA2B;IAC7B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,cAAc;IACd,YAAY,aAAa,CAAE;QACzB,IAAI,CAAC,aAAa,GAAG;IACvB;IACA,SAAS,GAAG,EAAE;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,GAAG;IAC5C;IACA,OAAO,CAAC,EAAE,CAAC,EAAE;QACX,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG;IAC/C;AACF;AAEA,sBAAsB;AACtB,IAAI,UAAU,MAAM;IAClB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,aAAa;IACb,YAAY,WAAW,CAAE;QACvB,IAAI,uBAAuB,UACzB,IAAI,CAAC,YAAY,GAAG,IAAI,QAAQ,YAAY,YAAY;aACnD;YACL,cAAc,eAAe,0BAA0B,QAAQ;YAC/D,IAAI,CAAC,YAAY,GAAG,IAAI,QAAQ,IAAI,yBAAyB;QAC/D;IACF;IACA,QAAQ;QACN,IAAI,CAAC,YAAY,CAAC,KAAK;IACzB;IACA,YAAY,GAAG,EAAE;QACf,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YAAE;QAAI;IAC1C;IACA,IAAI,GAAG,EAAE;QACP,MAAM,SAAS,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YAAE;QAAI;QAC3C,IAAI,CAAC,QACH,OAAO,KAAK;QAEd,OAAO,OAAO,KAAK;IACrB;IACA,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO;IAClC;IACA;;;;;;;;GAQC,GACD,IAAI,GAAG,EAAE,KAAK,EAAE;QACd,MAAM,UAAU,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YAAE;YAAK;QAAM;QACnD,IAAI;QACJ,IAAI,CAAC,SACH,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YAAE;YAAK;QAAM;aAC9B;YACL,SAAS,QAAQ,KAAK;YACtB,QAAQ,KAAK,GAAG;QAClB;QACA,OAAO;IACT;IACA;;;;;;;;GAQC,GACD,YAAY,GAAG,EAAE,KAAK,EAAE;QACtB,MAAM,UAAU,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YAAE;YAAK;QAAM;QACnD,IAAI;QACJ,IAAI,CAAC,SACH,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YAAE;YAAK;QAAM;aAEnC,SAAS,QAAQ,KAAK;QAExB,OAAO;IACT;IACA,OAAO;QACL,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;YACtC,OAAO,OAAO,GAAG;QACnB;IACF;IACA,SAAS;QACP,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;YACtC,OAAO,OAAO,KAAK;QACrB;IACF;IACA,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI;IAC/B;IACA,WAAW;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ;IACnC;IACA,OAAO,CAAC,EAAE;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,YAAY;IAChD;AACF;AAEA,2BAA2B;AAC3B,IAAI,eAAe;IACjB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,SAAS,KAAK;IACd,OAAO;IACP,YAAY,MAAM,CAAE;QAClB,IAAI,CAAC,MAAM,GAAG;IAChB;IACA,SAAS,EAAE,EAAE;QACX,OAAO;IACT;IACA,YAAY;QACV,OAAO,IAAI,CAAC,MAAM;IACpB;IACA,aAAa;QACX,OAAO,IAAI,CAAC,MAAM;IACpB;IACA,oBAAoB;QAClB,IAAI,IAAI,CAAC,MAAM,KAAK,MAClB,OAAO,SAAS,gBAAgB;QAElC,MAAM,aAAa,IAAI,CAAC,MAAM,CAAC,UAAU;QACzC,OAAO,IAAI,SAAS,YAAY;IAClC;IACA,gBAAgB;QACd,OAAO;IACT;IACA,OAAO,OAAO,EAAE;QACd,OAAO,QAAQ,aAAa,CAAC,IAAI;IACnC;IACA,UAAU;QACR,OAAO,IAAI,CAAC,MAAM,EAAE,QAAQ;IAC9B;IACA,WAAW;QACT,IAAI,IAAI,CAAC,MAAM,EAAE,SAAS,MAAM,GAAG,EACjC,OAAO;aAEP,OAAO,IAAI,CAAC,MAAM,EAAE,QAAQ;IAEhC;IACA,eAAe;QACb,OAAO,IAAI,CAAC,QAAQ;IACtB;AACF;AAEA,wBAAwB;AACxB,IAAI,YAAY,cAAc;IAC5B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,OAAO,EAAE;QACd,OAAO,QAAQ,cAAc,CAAC,IAAI;IACpC;AACF;AAEA,qBAAqB;AACrB,IAAI,cAAc,MAAM;IACtB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;GAGC,GACD,gEAAgE;IAChE,OAAO,eAAe;QAAC;QAAM;KAAK,CAAC;IACnC;;;;;GAKC,GACD,OAAO;IACP,WAAW;IACX,MAAM;IACN,KAAK;IACL;;GAEC,GACD,KAAK;IACL;;GAEC,GACD,KAAK;IACL;;GAEC,GACD,OAAO;IACP;;GAEC,GACD,QAAQ;IACR;;;GAGC,GACD,CAAA,IAAK,CAAC;IACN,YAAY,OAAO,CAAE;QACnB,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI;QACxB,IAAI,CAAC,MAAM,GAAG,QAAQ,MAAM;QAC5B,IAAI,CAAC,UAAU,GAAG,QAAQ,UAAU,IAAI;QACxC,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI,IAAI;QAC5B,IAAI,CAAC,MAAM,GAAG,QAAQ,MAAM,IAAI;QAChC,IAAI,CAAC,OAAO,GAAG,QAAQ,OAAO,IAAI,MAAM,eAAe;QACvD,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK,IAAI;QAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI,IAAI;QAC5B,IAAI,CAAC,CAAA,IAAK,GAAG,QAAQ,IAAI;QACzB,IAAI,QAAQ,IAAI,KAAK,KAAK,KAAK,QAAQ,MAAM,CAAC,EAAE,KAAK,MACnD,IAAI,CAAC,IAAI,GAAG,QAAQ,MAAM,CAAC,EAAE,CAAC,IAAI;QAEpC,IAAI,QAAQ,MAAM,KAAK,KAAK,KAAK,QAAQ,MAAM,CAAC,EAAE,KAAK,MACrD,IAAI,CAAC,MAAM,GAAG,QAAQ,MAAM,CAAC,EAAE,CAAC,MAAM;IAE1C;IACA;;;;;;;;;;;GAWC,GACD,OAAO,UAAU,KAAK,EAAE;QACtB,MAAM,SAAS;YAAC,MAAM,WAAW;YAAE,MAAM,WAAW;SAAC;QACrD,OAAO,IAAI,aAAa;YACtB,MAAM,MAAM,IAAI;YAChB,MAAM,MAAM,IAAI;YAChB,YAAY,MAAM,UAAU;YAC5B,QAAQ,MAAM,MAAM;YACpB,SAAS,MAAM,OAAO;YACtB,OAAO,MAAM,KAAK;YAClB,MAAM,MAAM,IAAI;YAChB,MAAM,MAAM,IAAI;YAChB;QACF;IACF;IACA;;;;;GAKC,GACD,OAAO,SAAS,IAAI,EAAE,IAAI,EAAE;QAC1B,OAAO,IAAI,aAAa;YAAE;YAAM;YAAM,QAAQ,aAAa,YAAY;QAAC;IAC1E;IACA,OAAO,WAAW,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;QACpD,OAAO,IAAI,aAAa;YAAE;YAAM;YAAS;YAAO;YAAM;QAAO;IAC/D;IACA,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;IACvB;IACA,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;IACvB;IACA,IAAI,YAAY,KAAK,EAAE;QACrB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG;IACnB;IACA;;;;;;;;;GASC,GACD,QAAQ;QACN,MAAM,IAAI,IAAI,aAAa;YACzB,QAAQ,IAAI,CAAC,MAAM;YACnB,MAAM,IAAI,CAAC,IAAI;YACf,SAAS,IAAI,CAAC,OAAO;YACrB,OAAO,IAAI,CAAC,KAAK;YACjB,MAAM,IAAI,CAAC,IAAI;YACf,YAAY,IAAI,CAAC,UAAU;YAC3B,MAAM,IAAI,CAAC,IAAI;YACf,QAAQ,IAAI,CAAC,MAAM;YACnB,MAAM,IAAI,CAAC,CAAA,IAAK;QAClB;QACA,OAAO;IACT;IACA,SAAS,UAAU,EAAE;QACnB,IAAI,aAAa;QACjB,IAAI,IAAI,CAAC,OAAO,GAAG,GACjB,aAAa,cAAc,IAAI,CAAC,OAAO;QAEzC,IAAI,OAAO,IAAI,CAAC,IAAI;QACpB,IAAI,MAAM;YACR,OAAO,KAAK,OAAO,CAAC,OAAO;YAC3B,OAAO,KAAK,OAAO,CAAC,OAAO;YAC3B,OAAO,KAAK,OAAO,CAAC,OAAO;QAC7B,OACE,OAAO;QAET,IAAI,aAAa,OAAO,IAAI,CAAC,IAAI;QACjC,IAAI,YACF,aAAa,WAAW,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,KAAK;QAElE,OAAO,OAAO,IAAI,CAAC,UAAU,GAAG,MAAM,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,GAAG,OAAO,OAAO,QAAQ,aAAa,MAAM,aAAa,MAAM,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,GAAG;IACnK;IACA,IAAI,OAAO;QACT,IAAI,IAAI,CAAC,CAAA,IAAK,KAAK,KAAK,GACtB,OAAO,IAAI,CAAC,CAAA,IAAK;QAEnB,MAAM,QAAQ,IAAI,CAAC,WAAW;QAC9B,IAAI,CAAC,OACH,OAAO,KAAK;QAEd,MAAM,KAAK,MAAM,IAAI;QACrB,IAAI,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,GAAG,IACjC,OAAO,MAAM,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI;QAErD,OAAO;IACT;IACA,IAAI,KAAK,IAAI,EAAE;QACb,IAAI,CAAC,CAAA,IAAK,GAAG;IACf;IACA,+BAA+B;IAC/B,QAAQ,IAAI,EAAE;QACZ,IAAI,CAAC,CAAA,IAAK,GAAG;IACf;IACA,QAAQ,KAAK,EAAE;QACb,IAAI,CAAC,IAAI,GAAG;IACd;IACA,QAAQ,IAAI,EAAE;QACZ,IAAI,CAAC,IAAI,GAAG;IACd;IACA,sBAAsB,GAAG,EAAE;QACzB,IAAI,CAAC,MAAM,GAAG;IAChB;IACA,WAAW,OAAO,EAAE;QAClB,IAAI,CAAC,OAAO,GAAG;IACjB;IACA,cAAc,KAAK,EAAE;QACnB,IAAI,CAAC,UAAU,GAAG;IACpB;AACF;AAEA,oBAAoB;AACpB,IAAI,QAAQ,MAAM;IAChB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;GAIC,GACD,OAAO,aAAa,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;QAC1C,YAAY,aAAa;QACzB,IAAI,OACF,YAAY,MAAM,SAAS;QAE7B,IAAI,IAAI,OAAO,WAAW,CAAC,MAAM;QACjC,IAAI,iBAAiB,GAAG;QACxB,MAAM,IAAI,KAAK,aAAa;QAC5B,IAAI,MAAM,GACR,OAAO;QAET,IAAI,MAAM,MAAM,IAAI;QACpB,IAAI,IAAI,GAAG;YACT,IAAI,OAAO,YAAY,CAAC,KAAK,QAAQ,CAAC,IAAI;YAC1C,MAAM,IAAI,MAAM,CAAC;QACnB;QACA,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;YAC1B,IAAI,OAAO,YAAY,CAAC,KAAK,QAAQ,CAAC,IAAI;YAC1C,MAAM,IAAI,MAAM,CAAC,MAAM;QACzB;QACA,MAAM,IAAI,MAAM,CAAC;QACjB,OAAO;IACT;IACA,OAAO,YAAY,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE;QACtC,YAAY,aAAa;QACzB,IAAI,OACF,YAAY,MAAM,SAAS;QAE7B,IAAI,cAAc,MAAM;YACtB,IAAI,aAAa,mBAAmB;gBAClC,MAAM,UAAU,EAAE,WAAW;gBAC7B,MAAM,YAAY,QAAQ,YAAY;gBACtC,IAAI,cAAc,GAChB,OAAO,SAAS,CAAC,EAAE,SAAS,CAAC,GAAG,MAAM;gBAExC,OAAO,SAAS,CAAC,EAAE,SAAS,CAAC;YAC/B,OAAO,IAAI,aAAa,WACtB,OAAO,EAAE,QAAQ;iBACZ,IAAI,aAAa,cACtB,OAAO,EAAE,MAAM,CAAC,IAAI;QAExB;QACA,MAAM,UAAU,EAAE,UAAU;QAC5B,IAAI,QAAQ,UACV,OAAO,QAAQ,IAAI;QAErB,OAAO,OAAO,EAAE,UAAU;IAC5B;IACA;;GAEC,GACD,OAAO,YAAY,CAAC,EAAE;QACpB,MAAM,OAAO,EAAE;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,aAAa,IAAI,IACrC,KAAK,IAAI,CAAC,EAAE,QAAQ,CAAC;QAEvB,OAAO;IACT;IACA;;;GAGC,GACD,OAAO,aAAa,CAAC,EAAE;QACrB,IAAI,EAAE,MAAM,KAAK,MACf,OAAO,EAAE;QAEX,IAAI,YAAY,EAAE;QAClB,IAAI,IAAI,EAAE,MAAM;QAChB,MAAO,MAAM,KAAM;YACjB,YAAY;gBAAC;aAAE,CAAC,MAAM,CAAC;YACvB,IAAI,EAAE,MAAM;QACd;QACA,OAAO;IACT;IACA;;GAEC,GACD,OAAO,aAAa,CAAC,EAAE,CAAC,EAAE;QACxB,IAAI,MAAM,QAAQ,MAAM,QAAQ,EAAE,MAAM,KAAK,MAC3C,OAAO;QAET,IAAI,IAAI,EAAE,MAAM;QAChB,MAAO,MAAM,KAAM;YACjB,IAAI,MAAM,GACR,OAAO;YAET,IAAI,EAAE,MAAM;QACd;QACA,OAAO;IACT;IACA,OAAO,kBAAkB,CAAC,EAAE,KAAK,EAAE;QACjC,OAAO,OAAO,YAAY,CAAC,GAAG,OAAO;IACvC;IACA,OAAO,iBAAiB,CAAC,EAAE,SAAS,EAAE;QACpC,OAAO,OAAO,YAAY,CAAC,GAAG,WAAW;IAC3C;IACA,OAAO,aAAa,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE;QACxC,MAAM,QAAQ,EAAE;QAChB,OAAO,cAAc,CAAC,GAAG,OAAO,YAAY;QAC5C,OAAO;IACT;IACA,OAAO,YAAY,CAAC,EAAE;QACpB,IAAI,QAAQ;YAAC;SAAE;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,aAAa,IAAI,IACrC,QAAQ,MAAM,MAAM,CAAC,OAAO,WAAW,CAAC,EAAE,QAAQ,CAAC;QAErD,OAAO;IACT;IACA;;;GAGC,GACD,OAAO,gCAAgC,CAAC,EAAE,eAAe,EAAE,cAAc,EAAE;QACzE,MAAM,KAAK,EAAE,aAAa;QAC1B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YAC3B,MAAM,QAAQ,EAAE,QAAQ,CAAC;YACzB,MAAM,IAAI,IAAI,CAAC,+BAA+B,CAAC,OAAO,iBAAiB;YACvE,IAAI,MAAM,MACR,OAAO;QAEX;QACA,IAAI,aAAa,mBAAmB;YAClC,IAAI,mBAAmB,EAAE,KAAK,CAAC,UAAU,IAAI,iCAAiC;YAC7E,CAAA,EAAE,IAAI,KAAK,QAAQ,kBAAkB,EAAE,IAAI,CAAC,UAAU,AAAD,GACpD,OAAO;QAEX;QACA,OAAO;IACT;IACA;;;;;;GAMC,GACD,OAAO,wBAAwB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE;QAC7D,IAAI,MAAM,MACR;QAEF,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,aAAa,IAAI,IAAK;YAC1C,MAAM,QAAQ,EAAE,QAAQ,CAAC;YACzB,MAAM,QAAQ,MAAM,iBAAiB;YACrC,IAAI,aAAa,qBAAsB,CAAA,MAAM,IAAI,GAAG,cAAc,MAAM,KAAK,GAAG,SAAQ,GACtF;gBAAA,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,OAAO;oBAClC,MAAM,SAAS,YAAY,QAAQ,CAAC,MAAM,YAAY,EAAE;oBACxD,EAAE,QAAQ,CAAC,EAAE,GAAG,IAAI,aAAa;gBACnC;YAAA;QAEJ;IACF;IACA,OAAO,eAAe,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE;QACjD,IAAI,cAAc,aAAa,cAC7B;YAAA,IAAI,EAAE,MAAM,EAAE,SAAS,OACrB,MAAM,IAAI,CAAC;QACb,OACK,IAAI,CAAC,cAAc,aAAa,mBACrC;YAAA,IAAI,EAAE,SAAS,KAAK,OAClB,MAAM,IAAI,CAAC;QACb;QAEF,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,aAAa,IAAI,IACrC,OAAO,cAAc,CAAC,EAAE,QAAQ,CAAC,IAAI,OAAO,YAAY;IAE5D;AACF;AAEA,2BAA2B;AAC3B,IAAI,oBAAoB,MAAM;IAC5B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,QAAQ,IAAI,mBAAmB,MAAM;IAC5C,QAAQ,KAAK;IACb,OAAO,KAAK;IACZ,WAAW,EAAE,CAAC;IACd;;;;;GAKC,GACD,cAAc;IACd,OAAO;IACP;;;;;;;;;;;;;;;;;;GAkBC,GACD,YAAY,MAAM,EAAE,sBAAsB,EAAE,CAAE;QAC5C,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,aAAa,GAAG;IACvB;IACA,mBAAmB,GACnB,SAAS,GAAG,EAAE;QACZ,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa;QACtC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM;QAC3C,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI;QACpB,IAAI,IAAI,QAAQ,EACd,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC;YACpB,IAAI,iBAAiB,WAAW;gBAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACnB,MAAM,MAAM,GAAG,IAAI;YACrB;QACF;IAEJ;IACA,wCAAwC;IACxC,UAAU,SAAS,EAAE,CACrB;IACA,SAAS,SAAS,EAAE,CACpB;IACA,SAAS,KAAK,EAAE;QACd,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACnB,OAAO;IACT;IACA;;;;GAIC,GACD,kBAAkB;QAChB,IAAI,CAAC,QAAQ,CAAC,GAAG;IACnB;IACA,aAAa,KAAK,EAAE;QAClB,MAAM,OAAO,IAAI,aAAa;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACnB,KAAK,MAAM,GAAG,IAAI;QAClB,OAAO;IACT;IACA,aAAa,SAAS,EAAE;QACtB,UAAU,MAAM,GAAG,IAAI;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACnB,OAAO;IACT;IACA,SAAS,CAAC,EAAE,IAAI,EAAE;QAChB,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpC,OAAO;QAET,IAAI,CAAC,MACH,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;QAEzB,KAAK,MAAM,SAAS,IAAI,CAAC,QAAQ,CAC/B,IAAI,iBAAiB,MAAM;YACzB,IAAI,MAAM,GACR,OAAO;iBAEP,KAAK;QAET;QAEF,OAAO;IACT;IACA,SAAS,KAAK,EAAE,CAAC,EAAE;QACjB,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpC,OAAO;QAET,KAAK,MAAM,SAAS,IAAI,CAAC,QAAQ,CAAE;YACjC,IAAI,YAAY,OACd;gBAAA,IAAI,MAAM,MAAM,EAAE,SAAS,OAAO;oBAChC,IAAI,MAAM,GACR,OAAO;yBAEP,KAAK;gBAET;YAAA;QAEJ;QACA,OAAO;IACT;IACA,UAAU,KAAK,EAAE;QACf,MAAM,SAAS,EAAE;QACjB,KAAK,MAAM,SAAS,IAAI,CAAC,QAAQ,CAAE;YACjC,IAAI,YAAY,OACd;gBAAA,IAAI,MAAM,MAAM,EAAE,SAAS,OACzB,OAAO,IAAI,CAAC;YACd;QAEJ;QACA,OAAO;IACT;IACA,uEAAuE;IACvE,eAAe,KAAK,EAAE,OAAO,EAAE;QAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO;IAC9B;IACA,uEAAuE;IACvE,gBAAgB,OAAO,EAAE;QACvB,MAAM,WAAW,EAAE;QACnB,KAAK,MAAM,SAAS,IAAI,CAAC,QAAQ,CAC/B,IAAI,iBAAiB,SACnB,SAAS,IAAI,CAAC;QAGlB,OAAO;IACT;IACA,gBAAgB;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;IAC7B;IACA,oBAAoB;QAClB,IAAI,IAAI,CAAC,KAAK,KAAK,MACjB,OAAO,SAAS,gBAAgB;QAElC,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EACpE,OAAO,IAAI,SAAS,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG;QAErE,OAAO,IAAI,SAAS,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU;IACjE;IACA,QAAQ;QACN,IAAI,KAAK;QACT,IAAI,IAAI,IAAI;QACZ,MAAO,MAAM,KAAM;YACjB,IAAI,EAAE,MAAM;YACZ,MAAM;QACR;QACA,OAAO;IACT;IACA;;;GAGC,GACD,UAAU;QACR,OAAO,IAAI,CAAC,aAAa,KAAK;IAChC;IACA,IAAI,cAAc;QAChB,OAAO,IAAI;IACb;IACA,IAAI,YAAY;QACd,OAAO;IACT;IACA,aAAa;QACX,OAAO,IAAI;IACb;IACA,UAAU;QACR,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,GAC3B,OAAO;QAET,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACxB,OAAO,MAAM,OAAO;QACtB,GAAG,IAAI,CAAC;IACV;IACA;;;;;;;GAOC,GACD,eAAe;QACb,OAAO,IAAI,kBAAkB;IAC/B;IACA;;;;;;GAMC,GACD,aAAa,UAAU,EAAE,CACzB;IACA,OAAO,OAAO,EAAE;QACd,OAAO,QAAQ,aAAa,CAAC,IAAI;IACnC;IACA,aAAa,GAAG,IAAI,EAAE;QACpB,IAAI,KAAK,MAAM,GAAG,GAChB,OAAO,MAAM,YAAY,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,EAAE;QAE/C,OAAO,MAAM,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;IAClD;IACA,SAAS,SAAS,EAAE,IAAI,EAAE;QACxB,YAAY,aAAa;QACzB,OAAO,QAAQ;QACf,IAAI,IAAI,IAAI;QACZ,IAAI,IAAI;QACR,MAAO,MAAM,QAAQ,MAAM,KAAM;YAC/B,IAAI,cAAc,MAChB;gBAAA,IAAI,CAAC,EAAE,OAAO,IACZ,KAAK,EAAE,aAAa;YACtB,OACK;gBACL,MAAM,KAAK,EAAE,SAAS;gBACtB,MAAM,WAAW,MAAM,KAAK,KAAK,UAAU,MAAM,GAAG,SAAS,CAAC,GAAG,GAAG,KAAK;gBACzE,KAAK;YACP;YACA,IAAI,EAAE,MAAM,KAAK,QAAS,CAAA,cAAc,QAAQ,CAAC,EAAE,MAAM,CAAC,OAAO,EAAC,GAChE,KAAK;YAEP,IAAI,EAAE,MAAM;QACd;QACA,KAAK;QACL,OAAO;IACT;AACF;AAEA,oCAAoC;AACpC,IAAI,yBAAyB,MAAM,gCAAgC;IACjE,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU,EAAE,CAAC;IACb,eAAe,EAAE,CAAC;IAClB,YAAY,OAAO,EAAE,YAAY,CAAE;QACjC,KAAK,CAAC,kBAAkB,qBAAqB,CAAC,SAAS;QACvD,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,YAAY,GAAG;QACpB,OAAO,IAAI;IACb;IACA,UAAU;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE,KAAK,kBAAkB,kBAAkB;IACtE;IACA,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM;IACjC;IACA,UAAU,KAAK,EAAE;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM;IAC5B;IACA,eAAe,KAAK,EAAE;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM;IACjC;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,uBAAsB,KAAM,IAAI,CAAC,QAAQ,OAAO,MAAM,QAAQ,IACnF,OAAO;QAET,OAAO,kBAAkB,IAAI,CAAC,YAAY,EAAE,MAAM,YAAY,KAAK,YAAY,IAAI,CAAC,OAAO,EAAE,MAAM,OAAO;IAC5G;IACA,WAAW;QACT,IAAI,IAAI,CAAC,OAAO,IACd,OAAO;QAET,MAAM,UAAU,EAAE;QAClB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAK;YACjD,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,KAAK,kBAAkB,kBAAkB,EAAE;gBACjE,QAAQ,IAAI,CAAC;gBACb;YACF;YACA,QAAQ,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ;YAC1C,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,EACjB,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ;iBAErC,QAAQ,IAAI,CAAC;QAEjB;QACA,OAAO,CAAC,CAAC,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC;AACF;AAEA,qBAAqB;AACrB,IAAI,mCAAmC,aAAa,GAAG,OAAO,CAAC,QAAQ;IACrE,IAAI,gBAAgB,kBAAkB,kBAAkB,IAAI,WAAW,MACrE,OAAO,uBAAuB,QAAQ;SAEtC,OAAO,IAAI,2BAA2B,QAAQ;AAElD,GAAG;AAEH,oCAAoC;AACpC,IAAI,mCAAmC,aAAa,GAAG,OAAO,CAAC,KAAK;IAClE,IAAI,CAAC,cACH,eAAe,kBAAkB,KAAK;IAExC,IAAI,CAAC,aAAa,MAAM,IAAI,iBAAiB,kBAAkB,KAAK,EAClE,OAAO,uBAAuB,QAAQ;IAExC,MAAM,SAAS,iCAAiC,KAAK,aAAa,MAAM;IACxE,MAAM,QAAQ,IAAI,MAAM,CAAC,aAAa,aAAa,CAAC;IACpD,MAAM,aAAa,MAAM,WAAW,CAAC,EAAE;IACvC,OAAO,iCAAiC,QAAQ,WAAW,WAAW,CAAC,WAAW;AACpF,GAAG;AACH,IAAI,6BAA6B,aAAa,GAAG,OAAO,CAAC,SAAS,cAAc;IAC9E,IAAI,QAAQ,OAAO,IACjB,OAAO;IAET,IAAI,WAAW,QAAQ,GAAG,CAAC;IAC3B,IAAI,UACF,OAAO;IAET,WAAW,aAAa,GAAG,CAAC;IAC5B,IAAI,UAAU;QACZ,QAAQ,GAAG,CAAC,SAAS;QACrB,OAAO;IACT;IACA,IAAI,UAAU;IACd,IAAI,UAAU,EAAE;IAChB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,IAAK;QACvC,MAAM,SAAS,2BAA2B,QAAQ,SAAS,CAAC,IAAI,cAAc;QAC9E,IAAI,WAAW,WAAW,QAAQ,SAAS,CAAC,IAAI;YAC9C,IAAI,CAAC,SAAS;gBACZ,UAAU,EAAE;gBACZ,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,IAClC,OAAO,CAAC,EAAE,GAAG,QAAQ,SAAS,CAAC;gBAEjC,UAAU;YACZ;YACA,OAAO,CAAC,EAAE,GAAG;QACf;IACF;IACA,IAAI,CAAC,SAAS;QACZ,aAAa,GAAG,CAAC;QACjB,QAAQ,GAAG,CAAC,SAAS;QACrB,OAAO;IACT;IACA,IAAI;IACJ,IAAI,QAAQ,MAAM,KAAK,GACrB,UAAU,uBAAuB,QAAQ;SACpC,IAAI,QAAQ,MAAM,KAAK,GAC5B,UAAU,iCAAiC,OAAO,CAAC,EAAE,IAAI,KAAK,GAAG,QAAQ,cAAc,CAAC;SAExF,UAAU,IAAI,uBAAuB,SAAS,QAAQ,YAAY;IAEpE,aAAa,GAAG,CAAC;IACjB,QAAQ,GAAG,CAAC,SAAS;IACrB,QAAQ,GAAG,CAAC,SAAS;IACrB,OAAO;AACT,GAAG;AACH,IAAI,QAAQ,aAAa,GAAG,OAAO,CAAC,GAAG,GAAG,gBAAgB;IACxD,IAAI,MAAM,KAAK,EAAE,MAAM,CAAC,IACtB,OAAO;IAET,IAAI,aAAa,8BAA8B,aAAa,4BAC1D,OAAO,gBAAgB,GAAG,GAAG,gBAAgB;IAE/C,IAAI,gBAAgB;QAClB,IAAI,aAAa,wBACf,OAAO;QAET,IAAI,aAAa,wBACf,OAAO;IAEX;IACA,IAAI,aAAa,4BACf,IAAI,IAAI,uBAAuB;QAAC,EAAE,MAAM;KAAC,EAAE;QAAC,EAAE,WAAW;KAAC;IAE5D,IAAI,aAAa,4BACf,IAAI,IAAI,uBAAuB;QAAC,EAAE,MAAM;KAAC,EAAE;QAAC,EAAE,WAAW;KAAC;IAE5D,OAAO,YAAY,GAAG,GAAG,gBAAgB;AAC3C,GAAG;AACH,IAAI,cAAc,aAAa,GAAG,OAAO,CAAC,GAAG,GAAG,gBAAgB;IAC9D,IAAI,YAAY;QACd,IAAI,WAAW,WAAW,GAAG,CAAC,GAAG;QACjC,IAAI,UACF,OAAO;QAET,WAAW,WAAW,GAAG,CAAC,GAAG;QAC7B,IAAI,UACF,OAAO;IAEX;IACA,IAAI,IAAI;IACR,IAAI,IAAI;IACR,IAAI,IAAI;IACR,IAAI,qBAAqB,IAAI,MAAM,EAAE,YAAY,CAAC,MAAM,GAAG,EAAE,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC;IACvF,IAAI,gBAAgB,IAAI,MAAM,EAAE,YAAY,CAAC,MAAM,GAAG,EAAE,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC;IAClF,MAAO,IAAI,EAAE,YAAY,CAAC,MAAM,IAAI,IAAI,EAAE,YAAY,CAAC,MAAM,CAAE;QAC7D,MAAM,UAAU,EAAE,OAAO,CAAC,EAAE;QAC5B,MAAM,UAAU,EAAE,OAAO,CAAC,EAAE;QAC5B,IAAI,EAAE,YAAY,CAAC,EAAE,KAAK,EAAE,YAAY,CAAC,EAAE,EAAE;YAC3C,MAAM,UAAU,EAAE,YAAY,CAAC,EAAE;YACjC,MAAM,cAAc,YAAY,kBAAkB,kBAAkB,IAAI,YAAY,QAAQ,YAAY;YACxG,MAAM,OAAO,YAAY,QAAQ,YAAY,QAAQ,YAAY;YACjE,IAAI,eAAe,MAAM;gBACvB,aAAa,CAAC,EAAE,GAAG;gBACnB,kBAAkB,CAAC,EAAE,GAAG;YAC1B,OAAO;gBACL,aAAa,CAAC,EAAE,GAAG,MAAM,SAAS,SAAS,gBAAgB;gBAC3D,kBAAkB,CAAC,EAAE,GAAG;YAC1B;YACA,KAAK;YACL,KAAK;QACP,OAAO,IAAI,EAAE,YAAY,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,EAAE;YAChD,aAAa,CAAC,EAAE,GAAG;YACnB,kBAAkB,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE;YACzC,KAAK;QACP,OAAO;YACL,aAAa,CAAC,EAAE,GAAG;YACnB,kBAAkB,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE;YACzC,KAAK;QACP;QACA,KAAK;IACP;IACA,IAAI,IAAI,EAAE,YAAY,CAAC,MAAM,EAC3B,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,YAAY,CAAC,MAAM,EAAE,IAAK;QAC9C,aAAa,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE;QAC/B,kBAAkB,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE;QACzC,KAAK;IACP;SAEA,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,YAAY,CAAC,MAAM,EAAE,IAAK;QAC9C,aAAa,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE;QAC/B,kBAAkB,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE;QACzC,KAAK;IACP;IAEF,IAAI,IAAI,cAAc,MAAM,EAAE;QAC5B,IAAI,MAAM,GAAG;YACX,MAAM,OAAO,iCAAiC,aAAa,CAAC,EAAE,IAAI,KAAK,GAAG,kBAAkB,CAAC,EAAE;YAC/F,IAAI,eAAe,MACjB,WAAW,GAAG,CAAC,GAAG,GAAG;YAEvB,OAAO;QACT;QACA,gBAAgB,cAAc,KAAK,CAAC,GAAG;QACvC,qBAAqB,mBAAmB,KAAK,CAAC,GAAG;IACnD;IACA,MAAM,SAAS,IAAI,uBAAuB,eAAe;IACzD,IAAI,OAAO,MAAM,CAAC,IAAI;QACpB,IAAI,eAAe,MACjB,WAAW,GAAG,CAAC,GAAG,GAAG;QAEvB,IAAI,kBAAkB,iBAAiB,EACrC,QAAQ,GAAG,CAAC,mBAAmB,IAAI,QAAQ,IAAI;QAEjD,OAAO;IACT;IACA,IAAI,OAAO,MAAM,CAAC,IAAI;QACpB,IAAI,eAAe,MACjB,WAAW,GAAG,CAAC,GAAG,GAAG;QAEvB,OAAO;IACT;IACA,qBAAqB;IACrB,IAAI,eAAe,MACjB,WAAW,GAAG,CAAC,GAAG,GAAG;IAEvB,IAAI,kBAAkB,iBAAiB,EACrC,QAAQ,GAAG,CAAC,mBAAmB,IAAI,QAAQ,IAAI,SAAS;IAE1D,OAAO;AACT,GAAG;AACH,IAAI,uBAAuB,aAAa,GAAG,OAAO,CAAC;IACjD,MAAM,gBAAgB,IAAI,QAAQ,yBAAyB,QAAQ;IACnE,KAAK,MAAM,UAAU,QAAS;QAC5B,IAAI,QACF;YAAA,IAAI,CAAC,cAAc,WAAW,CAAC,SAC7B,cAAc,GAAG,CAAC,QAAQ;QAC5B;IAEJ;IACA,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,IAClC,IAAI,OAAO,CAAC,EAAE,EACZ,OAAO,CAAC,EAAE,GAAG,cAAc,GAAG,CAAC,OAAO,CAAC,EAAE,KAAK;AAGpD,GAAG;AACH,IAAI,kBAAkB,aAAa,GAAG,OAAO,CAAC,GAAG,GAAG,gBAAgB;IAClE,IAAI,eAAe,MAAM;QACvB,IAAI,WAAW,WAAW,GAAG,CAAC,GAAG;QACjC,IAAI,aAAa,MACf,OAAO;QAET,WAAW,WAAW,GAAG,CAAC,GAAG;QAC7B,IAAI,aAAa,MACf,OAAO;IAEX;IACA,MAAM,YAAY,UAAU,GAAG,GAAG;IAClC,IAAI,cAAc,MAAM;QACtB,IAAI,eAAe,MACjB,WAAW,GAAG,CAAC,GAAG,GAAG;QAEvB,OAAO;IACT;IACA,IAAI,EAAE,WAAW,KAAK,EAAE,WAAW,EAAE;QACnC,MAAM,SAAS,MAAM,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,gBAAgB;QACzD,IAAI,WAAW,EAAE,MAAM,EACrB,OAAO;QAET,IAAI,WAAW,EAAE,MAAM,EACrB,OAAO;QAET,MAAM,MAAM,iCAAiC,QAAQ,EAAE,WAAW;QAClE,IAAI,eAAe,MACjB,WAAW,GAAG,CAAC,GAAG,GAAG;QAEvB,OAAO;IACT,OAAO;QACL,IAAI,eAAe;QACnB,IAAI,MAAM,KAAK,EAAE,MAAM,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,GAC1D,eAAe,EAAE,MAAM;QAEzB,IAAI,iBAAiB,MAAM;YACzB,MAAM,YAAY;gBAAC,EAAE,WAAW;gBAAE,EAAE,WAAW;aAAC;YAChD,IAAI,EAAE,WAAW,GAAG,EAAE,WAAW,EAAE;gBACjC,SAAS,CAAC,EAAE,GAAG,EAAE,WAAW;gBAC5B,SAAS,CAAC,EAAE,GAAG,EAAE,WAAW;YAC9B;YACA,MAAM,WAAW;gBAAC;gBAAc;aAAa;YAC7C,MAAM,MAAM,IAAI,uBAAuB,UAAU;YACjD,IAAI,eAAe,MACjB,WAAW,GAAG,CAAC,GAAG,GAAG;YAEvB,OAAO;QACT;QACA,MAAM,WAAW;YAAC,EAAE,WAAW;YAAE,EAAE,WAAW;SAAC;QAC/C,IAAI,UAAU;YAAC,EAAE,MAAM;YAAE,EAAE,MAAM;SAAC;QAClC,IAAI,EAAE,WAAW,GAAG,EAAE,WAAW,EAAE;YACjC,QAAQ,CAAC,EAAE,GAAG,EAAE,WAAW;YAC3B,QAAQ,CAAC,EAAE,GAAG,EAAE,WAAW;YAC3B,UAAU;gBAAC,EAAE,MAAM;gBAAE,EAAE,MAAM;aAAC;QAChC;QACA,MAAM,OAAO,IAAI,uBAAuB,SAAS;QACjD,IAAI,eAAe,MACjB,WAAW,GAAG,CAAC,GAAG,GAAG;QAEvB,OAAO;IACT;AACF,GAAG;AACH,IAAI,YAAY,aAAa,GAAG,OAAO,CAAC,GAAG,GAAG;IAC5C,IAAI,gBAAgB;QAClB,IAAI,MAAM,uBAAuB,QAAQ,IAAI,MAAM,uBAAuB,QAAQ,EAChF,OAAO,uBAAuB,QAAQ;IAE1C,OAAO;QACL,IAAI,MAAM,uBAAuB,QAAQ,IAAI,MAAM,uBAAuB,QAAQ,EAChF,OAAO,uBAAuB,QAAQ;QAExC,IAAI,MAAM,uBAAuB,QAAQ,EAAE;YACzC,MAAM,WAAW;gBACf,EAAE,WAAW;gBACb,kBAAkB,kBAAkB;aACrC;YACD,MAAM,UAAU;gBAAC,EAAE,MAAM;gBAAE;aAAK;YAChC,OAAO,IAAI,uBAAuB,SAAS;QAC7C;QACA,IAAI,MAAM,uBAAuB,QAAQ,EAAE;YACzC,MAAM,WAAW;gBAAC,EAAE,WAAW;gBAAE,kBAAkB,kBAAkB;aAAC;YACtE,MAAM,UAAU;gBAAC,EAAE,MAAM;gBAAE;aAAK;YAChC,OAAO,IAAI,uBAAuB,SAAS;QAC7C;IACF;IACA,OAAO;AACT,GAAG;AAEH,yBAAyB;AACzB,IAAI,cAAc,MAAM;IACtB,YAAY,GAAG,CAAE;QACf,IAAI,CAAC,GAAG,GAAG;IACb;IACA,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;GAGC,GACD,OAAO,eAAe,MAAM,YAAY,CAAC;IACzC;;;;;;;;;GASC,GACD,qBAAqB,CAAC,EAAE;QACtB,MAAM,QAAQ,EAAE,WAAW,CAAC,MAAM;QAClC,MAAM,OAAO,IAAI,MAAM;QACvB,IAAK,IAAI,MAAM,GAAG,MAAM,OAAO,MAAO;YACpC,MAAM,MAAM,IAAI;YAChB,MAAM,WAAW,IAAI;YACrB,IAAI,CAAC,MAAM,CACT,EAAE,WAAW,CAAC,IAAI,CAAC,MAAM,EACzB,KAAK,GACL,uBAAuB,QAAQ,EAC/B,KACA,UACA,IAAI,UACJ,OACA;YAEF,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC,IAAI,QAAQ,CAAC,aAAa,YAAY,GAC3D,IAAI,CAAC,IAAI,GAAG;QAEhB;QACA,OAAO;IACT;IACA;;;;;;;;;;;;;;;;;GAiBC,GACD,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE;QACtB,MAAM,IAAI,IAAI;QACd,MAAM,cAAc,MAAM,iCAAiC,IAAI,CAAC,GAAG,EAAE,OAAO;QAC5E,IAAI,CAAC,MAAM,CAAC,GAAG,WAAW,aAAa,GAAG,IAAI,WAAW,IAAI,UAAU,MAAM;QAC7E,OAAO;IACT;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BC,GACD,OAAO,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,EAAE;QAC/E,MAAM,IAAI,UAAU,iBAAiB,CAAC,GAAG,GAAG;QAC5C,IAAI,SAAS,GAAG,CAAC,IACf;QAEF,SAAS,GAAG,CAAC;QACb,IAAI,MAAM,WAAW;YACnB,IAAI,CAAC,KAAK;gBACR,KAAK,MAAM,CAAC,MAAM,OAAO;gBACzB;YACF,OAAO,IAAI,IAAI,OAAO,MAAM,QAAQ;gBAClC,KAAK,MAAM,CAAC,MAAM,GAAG;gBACrB;YACF;QACF;QACA,IAAI,EAAE,WAAW,CAAC,SAAS,KAAK,SAAS,SAAS,EAAE;YAClD,IAAI,CAAC,KAAK;gBACR,KAAK,MAAM,CAAC,MAAM,OAAO;gBACzB;YACF,OAAO,IAAI,IAAI,OAAO,MAAM,QAAQ;gBAClC,KAAK,MAAM,CAAC,MAAM,GAAG;gBACrB;YACF;YACA,IAAI,QAAQ,uBAAuB,QAAQ,EAAE;gBAC3C,MAAM,UAAU,gBAAgB,GAAG,CAAC,EAAE,SAAS;gBAC/C,IAAI;oBACF,gBAAgB,KAAK,CAAC,EAAE,SAAS;oBACjC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;wBACnC,MAAM,cAAc,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,GAAG;wBAC1D,IAAI,CAAC,MAAM,CACT,aACA,WACA,IAAI,SAAS,CAAC,IACd,MACA,UACA,iBACA,cACA;oBAEJ;gBACF,SAAU;oBACR,IAAI,SACF,gBAAgB,GAAG,CAAC,EAAE,SAAS;gBAEnC;gBACA;YACF;QACF;QACA,KAAK,MAAM,KAAK,EAAE,WAAW,CAC3B,OAAQ,EAAE,cAAc;YACtB,KAAK,WAAW,IAAI;gBAAE;oBACpB,IAAI,gBAAgB,GAAG,CAAC,EAAE,MAAM,CAAC,SAAS,GACxC;oBAEF,MAAM,aAAa,iCACjB,OAAO,KAAK,GACZ,EAAE,WAAW,CAAC,WAAW;oBAE3B,IAAI;wBACF,gBAAgB,GAAG,CAAC,EAAE,MAAM,CAAC,SAAS;wBACtC,IAAI,CAAC,MAAM,CACT,EAAE,MAAM,EACR,WACA,YACA,MACA,UACA,iBACA,cACA;oBAEJ,SAAU;wBACR,gBAAgB,KAAK,CAAC,EAAE,MAAM,CAAC,SAAS;oBAC1C;oBACA;gBACF;YACA,KAAK,WAAW,SAAS;YACzB,KAAK,WAAW,UAAU;gBACxB,IAAI,cACF,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,KAAK,MAAM,UAAU,iBAAiB,cAAc;qBAErF,KAAK,MAAM,CAAC,aAAa,YAAY;gBAEvC;YAEF,KAAK,WAAW,QAAQ;gBACtB,KAAK,QAAQ,CAAC,MAAM,mBAAmB,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY;gBAC9D;YAEF;gBACE,IAAI,EAAE,SAAS,EACb,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,KAAK,MAAM,UAAU,iBAAiB,cAAc;qBAChF;oBACL,IAAI,MAAM,EAAE,KAAK;oBACjB,IAAI,KAAK;wBACP,IAAI,aAAa,kBACf,MAAM,IAAI,UAAU,CAAC,MAAM,mBAAmB,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY;wBAEvE,KAAK,MAAM,CAAC;oBACd;gBACF;gBACA;QAEJ;IAEJ;AACF;AAEA,iBAAiB;AACjB,IAAI,MAAM;IACR,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,qBAAqB,EAAE;IAC9B,wDAAwD,GACxD,OAAO,QAAQ,EAAE;IACjB,OAAO,SAAS,EAAE;IAClB;;;GAGC,GACD,YAAY;IACZ,4EAA4E,GAC5E,aAAa;IACb,SAAS,EAAE,CAAC;IACZ;;;;GAIC,GACD,kBAAkB,EAAE,CAAC;IACrB,mDAAmD,GACnD,mBAAmB,EAAE,CAAC;IACtB,uCAAuC;IACvC,+CAA+C,GAC/C,kBAAkB,EAAE,CAAC;IACrB,uCAAuC;IACvC,uBAAuB,aAAa,GAAG,IAAI,MAAM;IACjD;;;;;GAKC,GACD,kBAAkB,EAAE,CAAC;IACrB,uCAAuC;IACvC;;;GAGC,GACD,eAAe,EAAE,CAAC;IAClB,mBAAmB,EAAE,CAAC;IACtB,SAAS;IACT,YAAY,WAAW,EAAE,YAAY,CAAE;QACrC,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,IAAI;IACtC;IACA;;;;;GAKC,GACD,WAAW,QAAQ,EAAE,GAAG,EAAE;QACxB,IAAI,CAAC,OAAO,SAAS,mBAAmB,EACtC,OAAO,SAAS,mBAAmB;QAErC,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG;QAClD,IAAI,CAAC,KACH,SAAS,mBAAmB,GAAG;QAEjC,OAAO;IACT;IACA,SAAS,KAAK,EAAE;QACd,IAAI,OACF,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM;QAExC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACnB;IACA,YAAY,KAAK,EAAE;QACjB,IAAI,CAAC,MAAM,CAAC,MAAM,WAAW,CAAC,GAAG;IACnC;IACA,oBAAoB,CAAC,EAAE;QACrB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QAC1B,EAAE,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG;QAC3C,OAAO,EAAE,QAAQ;IACnB;IACA,iBAAiB,QAAQ,EAAE;QACzB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,GAClC,OAAO;aAEP,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS;IAEzC;IACA,uBAAuB;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM;IACpC;IACA;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,kBAAkB,WAAW,EAAE,OAAO,EAAE;QACtC,IAAI,cAAc,KAAK,eAAe,IAAI,CAAC,MAAM,CAAC,MAAM,EACtD,MAAM,IAAI,MAAM;QAElB,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY;QAClC,IAAI,YAAY,IAAI,CAAC,UAAU,CAAC;QAChC,IAAI,CAAC,UAAU,QAAQ,CAAC,MAAM,OAAO,GACnC,OAAO;QAET,IAAI,MAAM;QACV,MAAM,WAAW,IAAI;QACrB,SAAS,MAAM,CAAC;QAChB,SAAS,SAAS,CAAC,MAAM,OAAO;QAChC,MAAO,QAAQ,QAAQ,IAAI,aAAa,IAAI,KAAK,UAAU,QAAQ,CAAC,MAAM,OAAO,EAAG;YAClF,MAAM,gBAAgB,IAAI,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC;YACpD,MAAM,KAAK,cAAc,WAAW,CAAC,EAAE;YACvC,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,WAAW;YAC1C,SAAS,MAAM,CAAC;YAChB,SAAS,SAAS,CAAC,MAAM,OAAO;YAChC,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,UAAU,QAAQ,CAAC,MAAM,OAAO,GAClC,SAAS,MAAM,CAAC,MAAM,GAAG;QAE3B,OAAO;IACT;AACF;AAEA,0BAA0B;AAC1B,IAAI,0BAA0B,MAAM;IAClC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,WAAW,IAAI,2BAA2B;IACjD,SAAS,MAAM,EAAE;QACf,IAAI,WAAW;QACf,WAAW,KAAK,WAAW,OAAO,KAAK,CAAC,WAAW;QACnD,WAAW,KAAK,WAAW,OAAO,GAAG;QACrC,WAAW,KAAK,WAAW,OAAO,eAAe,CAAC,QAAQ;QAC1D,OAAO;IACT;IACA,OAAO,CAAC,EAAE,CAAC,EAAE;QACX,IAAI,MAAM,GACR,OAAO;QAET,OAAO,EAAE,KAAK,CAAC,WAAW,KAAK,EAAE,KAAK,CAAC,WAAW,IAAI,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,EAAE,eAAe,CAAC,MAAM,CAAC,EAAE,eAAe;IACrH;AACF;AACA,IAAI,eAAe;IACjB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;;;;;;;GAWC,GACD,eAAe,IAAI,QAAQ,wBAAwB,QAAQ,EAAE;IAC7D,oEAAoE;IACpE,UAAU,EAAE,CAAC;IACb,YAAY,EAAE;IACd;;;GAGC,GACD,qBAAqB,MAAM;IAC3B,uBAAuB,MAAM;IAC7B;;;;GAIC,GACD,UAAU,MAAM;IAChB;;;;;;GAMC,GACD,WAAW,MAAM;IACjB,kBAAkB,KAAK;IACvB;;;GAGC,GACD,eAAe;IACf,CAAA,cAAe,GAAG,GAAG;IACrB,YAAY,eAAe,CAAE;QAC3B,IAAI,oBAAoB,KAAK;YAC3B,IAAI,OAAO,oBAAoB,WAC7B,IAAI,CAAC,OAAO,GAAG,mBAAmB;iBAC7B;gBACL,MAAM,MAAM;gBACZ,IAAI,CAAC,MAAM,CAAC,IAAI,OAAO;gBACvB,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS;gBAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe;gBAC1C,IAAI,CAAC,kBAAkB,GAAG,IAAI,kBAAkB;gBAChD,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB;YACtD;;IAEJ;IACA,CAAC,OAAO,QAAQ,CAAC,GAAG;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,QAAQ,CAAC;IACtC;IACA;;;;;;;GAOC,GACD,IAAI,MAAM,EAAE,aAAa,IAAI,EAAE;QAC7B,IAAI,IAAI,CAAC,QAAQ,EACf,MAAM,IAAI,MAAM;QAElB,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,OAAO,KAAK,CAAC,WAAW,CAAC,SAAS,KAAK,SAAS,SAAS,EACnF,IAAI,CAAC,cAAc,GAAG;QAExB,IAAI,CAAC,kBAAkB,KAAK,OAAO,eAAe,KAAK,gBAAgB,IAAI;QAC3E,IAAI,CAAC,oBAAoB,KAAK,OAAO,uBAAuB;QAC5D,MAAM,WAAW,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;QAC5C,IAAI,aAAa,QAAQ;YACvB,IAAI,CAAC,CAAA,cAAe,GAAG;YACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAClB;QACF;QACA,MAAM,iBAAiB,CAAC,IAAI,CAAC,OAAO;QACpC,MAAM,SAAS,MAAM,SAAS,OAAO,EAAE,OAAO,OAAO,EAAE,gBAAgB;QACvE,SAAS,uBAAuB,KAAK,OAAO,uBAAuB;QACnE,SAAS,0BAA0B,KAAK,OAAO,0BAA0B;QACzE,SAAS,OAAO,GAAG;IACrB;IACA,0CAA0C,GAC1C,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,OAAO;IACrB;IACA;;;;GAIC,GACD,UAAU;QACR,MAAM,OAAO,IAAI;QACjB,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAC/B,KAAK,GAAG,CAAC,OAAO,GAAG;QAErB,OAAO;IACT;IACA,gBAAgB;QACd,MAAM,QAAQ,EAAE;QAChB,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAC/B,IAAI,OAAO,eAAe,KAAK,gBAAgB,IAAI,EACjD,MAAM,IAAI,CAAC,OAAO,eAAe;QAGrC,OAAO;IACT;IACA,YAAY;QACV,MAAM,SAAS,IAAI;QACnB,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAC/B,OAAO,GAAG,CAAC,OAAO,KAAK;QAEzB,OAAO;IACT;IACA,gBAAgB,WAAW,EAAE;QAC3B,IAAI,IAAI,CAAC,QAAQ,EACf,MAAM,IAAI,MAAM;QAElB,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,GAC7B;QAEF,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAC/B,OAAO,OAAO,GAAG,YAAY,gBAAgB,CAAC,OAAO,OAAO;IAEhE;IACA,OAAO,IAAI,EAAE;QACX,KAAK,MAAM,UAAU,KACnB,IAAI,CAAC,GAAG,CAAC;QAEX,OAAO;IACT;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,eAAe,KAAK,MAAM,eAAe,IAAI,IAAI,CAAC,kBAAkB,KAAK,MAAM,kBAAkB,IAAI,IAAI,CAAC,oBAAoB,KAAK,MAAM,oBAAoB,IAAI,YAAY,IAAI,CAAC,OAAO,EAAE,MAAM,OAAO,GACvR,OAAO;QAET,OAAO;IACT;IACA,WAAW;QACT,IAAI,IAAI,CAAC,CAAA,cAAe,KAAK,IAC3B,IAAI,CAAC,CAAA,cAAe,GAAG,IAAI,CAAC,eAAe;QAE7C,OAAO,IAAI,CAAC,CAAA,cAAe;IAC7B;IACA,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM;IAC5B;IACA,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK;IACjC;IACA,SAAS,IAAI,EAAE;QACb,IAAI,IAAI,CAAC,YAAY,KAAK,MACxB,MAAM,IAAI,MAAM;QAElB,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;IACpC;IACA,aAAa,IAAI,EAAE;QACjB,IAAI,IAAI,CAAC,YAAY,KAAK,MACxB,MAAM,IAAI,MAAM;QAElB,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;IACpC;IACA,QAAQ;QACN,IAAI,IAAI,CAAC,QAAQ,EACf,MAAM,IAAI,MAAM;QAElB,IAAI,CAAC,OAAO,GAAG,EAAE;QACjB,IAAI,CAAC,CAAA,cAAe,GAAG;QACvB,IAAI,CAAC,YAAY,GAAG,IAAI,QAAQ,wBAAwB,QAAQ;IAClE;IACA,YAAY,QAAQ,EAAE;QACpB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,UACF,IAAI,CAAC,YAAY,GAAG;IAExB;IACA,WAAW;QACT,OAAO,cAAc,IAAI,CAAC,OAAO,IAAK,CAAA,IAAI,CAAC,kBAAkB,GAAG,yBAAyB,IAAI,CAAC,kBAAkB,GAAG,EAAC,IAAM,CAAA,IAAI,CAAC,SAAS,KAAK,IAAI,kBAAkB,GAAG,gBAAgB,IAAI,CAAC,SAAS,GAAG,EAAC,IAAM,CAAA,IAAI,CAAC,eAAe,KAAK,OAAO,sBAAsB,IAAI,CAAC,eAAe,GAAG,EAAC,IAAM,CAAA,IAAI,CAAC,oBAAoB,GAAG,0BAA0B,EAAC;IAC3V;IACA,kBAAkB;QAChB,IAAI,OAAO,WAAW,UAAU;QAChC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACpB,OAAO,WAAW,MAAM,CAAC,MAAM,OAAO,QAAQ;QAChD;QACA,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM;QAClD,OAAO;IACT;AACF;AAEA,wBAAwB;AACxB,IAAI,aAAa,cAAc;IAC7B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,KAAK,CAAC;AACpC;AAEA,2BAA2B;AAC3B,IAAI,gBAAgB,cAAc;IAChC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,WAAW,GAAG;IACd,YAAY,MAAM;AACpB;AAEA,6BAA6B;AAC7B,IAAI,kBAAkB,cAAc;IAClC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,SAAS;AACX;AAEA,2BAA2B;AAC3B,IAAI,gBAAgB,cAAc;IAChC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,SAAS,CAAC;IACtC,WAAW;AACb;AAEA,0BAA0B;AAC1B,IAAI,eAAe,cAAc;IAC/B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,QAAQ,CAAC;IACrC,cAAc;AAChB;AAEA,4BAA4B;AAC5B,IAAI,iBAAiB,cAAc;IACjC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,UAAU,CAAC;IACvC,UAAU;IACV,sBAAsB,MAAM;AAC9B;AAEA,2BAA2B;AAC3B,IAAI,gBAAgB,cAAc;IAChC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,SAAS,CAAC;AACxC;AAEA,8BAA8B;AAC9B,IAAI,mBAAmB,cAAc;IACnC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,WAAW,CAAC;AAC1C;AAEA,+BAA+B;AAC/B,IAAI,oBAAoB,cAAc;IACpC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,cAAc,CAAC;AAC7C;AAEA,+BAA+B;AAC/B,IAAI,oBAAoB,cAAc;IACpC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,cAAc,CAAC;AAC7C;AAEA,gCAAgC;AAChC,IAAI,qBAAqB,cAAc;IACrC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,eAAe,CAAC;IAC5C,gDAAgD;IAChD,cAAc;IACd;;;;;;;;;GASC,GACD,yBAAyB,MAAM;AACjC;AAEA,iCAAiC;AACjC,IAAI,sBAAsB,cAAc;IACtC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,gBAAgB,CAAC;IAC7C,cAAc;AAChB;AAEA,iCAAiC;AACjC,IAAI,sBAAsB,cAAc;IACtC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,gBAAgB,CAAC;AAC/C;AAEA,kCAAkC;AAClC,IAAI,uBAAuB,cAAc;IACvC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,SAAS,WAAW,CAAC;AAC1C;AAEA,4BAA4B;AAC5B,IAAI,iBAAiB,cAAc;IACjC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,oEAAoE,GACpE,WAAW;IACX,CAAA,KAAM,CAAC;IACP,YAAY,MAAM,EAAE,KAAK,CAAE;QACzB,KAAK,CAAC;QACN,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,CAAA,KAAM,GAAG,YAAY,EAAE,CAAC,OAAO;IACtC;IACA,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,CAAA,KAAM;IACpB;IACA,IAAI,iBAAiB;QACnB,OAAO,WAAW,IAAI;IACxB;IACA,QAAQ,MAAM,EAAE;QACd,OAAO,IAAI,CAAC,UAAU,KAAK;IAC7B;IACA,WAAW;QACT,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ;IACjC;AACF;AAEA,4BAA4B;AAC5B,IAAI,iBAAiB,cAAc;IACjC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,WAAW;IACX,YAAY;IACZ,YAAY,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,CAAE;QACzD,KAAK,CAAC;QACN,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,WAAW,GAAG;IACrB;IACA,IAAI,YAAY;QACd,OAAO;IACT;IACA,IAAI,iBAAiB;QACnB,OAAO,WAAW,IAAI;IACxB;IACA,QAAQ,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE;QACjD,OAAO;IACT;AACF;AAEA,6BAA6B;AAC7B,IAAI,kBAAkB,cAAc;IAClC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,MAAM;IACN,KAAK;IACL,CAAA,KAAM,GAAG,IAAI,cAAc;IAC3B,YAAY,MAAM,EAAE,KAAK,EAAE,IAAI,CAAE;QAC/B,KAAK,CAAC;QACN,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,CAAA,KAAM,CAAC,QAAQ,CAAC,OAAO;IAC9B;IACA,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,CAAA,KAAM;IACpB;IACA,IAAI,iBAAiB;QACnB,OAAO,WAAW,KAAK;IACzB;IACA,QAAQ,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE;QAChD,OAAO,UAAU,IAAI,CAAC,KAAK,IAAI,UAAU,IAAI,CAAC,IAAI;IACpD;IACA,WAAW;QACT,OAAO,MAAM,OAAO,YAAY,CAAC,IAAI,CAAC,KAAK,IAAI,SAAS,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI;IAC3F;AACF;AAEA,8BAA8B;AAC9B,IAAI,mBAAmB,cAAc;IACnC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,YAAY;IACZ,eAAe;IACf,YAAY,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,CAAE;QAC1D,KAAK,CAAC;QACN,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,WAAW,GAAG,eAAe;QAClC,IAAI,CAAC,cAAc,GAAG,kBAAkB;IAC1C;IACA,IAAI,YAAY;QACd,OAAO;IACT;IACA,IAAI,iBAAiB;QACnB,OAAO,WAAW,MAAM;IAC1B;IACA,QAAQ,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE;QACjD,OAAO;IACT;IACA,WAAW;QACT,OAAO,YAAY,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW;IAC5D;AACF;AAEA,+BAA+B;AAC/B,IAAI,oBAAoB,cAAc;IACpC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,CAAA,yBAA0B,CAAC;IAC3B,YAAY,MAAM,EAAE,4BAA4B,EAAE,CAAE;QAClD,KAAK,CAAC;QACN,IAAI,CAAC,CAAA,yBAA0B,GAAG;IACpC;IACA;;;;;;;GAOC,GACD,IAAI,4BAA4B;QAC9B,OAAO,IAAI,CAAC,CAAA,yBAA0B;IACxC;IACA,IAAI,YAAY;QACd,OAAO;IACT;IACA,IAAI,iBAAiB;QACnB,OAAO,WAAW,OAAO;IAC3B;IACA,UAAU;QACR,OAAO;IACT;IACA,WAAW;QACT,OAAO;IACT;AACF;AAEA,gCAAgC;AAChC,IAAI,qBAAqB,cAAc;IACrC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,IAAI,iBAAiB;QACnB,OAAO,WAAW,QAAQ;IAC5B;IACA,QAAQ,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE;QAC9C,OAAO,UAAU,kBAAkB,UAAU;IAC/C;IACA,WAAW;QACT,OAAO;IACT;AACF;AAEA,yCAAyC;AACzC,IAAI,8BAA8B,cAAc;IAC9C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,MAAM,CAAE;QAClB,KAAK,CAAC;IACR;AACF;AAEA,iCAAiC;AACjC,IAAI,sBAAsB,cAAc;IACtC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,UAAU;IACV,eAAe;IACf,uBAAuB;IACvB,YAAY,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,CAAE;QACxD,KAAK,CAAC;QACN,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,cAAc,GAAG;IACxB;IACA,IAAI,YAAY;QACd,OAAO;IACT;IACA,QAAQ,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE;QACjD,OAAO;IACT;IACA,IAAI,iBAAiB;QACnB,OAAO,WAAW,SAAS;IAC7B;IACA,eAAe;QACb,OAAO,IAAI,gBAAgB,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc;IAC1F;IACA,WAAW;QACT,OAAO,UAAU,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS;IACxD;AACF;AAEA,2CAA2C;AAC3C,IAAI,gCAAgC,cAAc;IAChD,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,WAAW;IACX,YAAY,MAAM,EAAE,UAAU,CAAE;QAC9B,KAAK,CAAC;QACN,IAAI,CAAC,UAAU,GAAG;IACpB;IACA,IAAI,YAAY;QACd,OAAO;IACT;IACA,QAAQ,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE;QACjD,OAAO;IACT;IACA,eAAe;QACb,OAAO,IAAI,gBAAgB,mBAAmB,CAAC,IAAI,CAAC,UAAU;IAChE;IACA,IAAI,iBAAiB;QACnB,OAAO,WAAW,UAAU;IAC9B;IACA,WAAW;QACT,OAAO,IAAI,CAAC,UAAU,GAAG;IAC3B;AACF;AAEA,6BAA6B;AAC7B,IAAI,kBAAkB;IACpB,qDAAqD,GACrD,SAAS;IACT,mDAAmD,GACnD,QAAQ;IACR,kDAAkD,GAClD,MAAM;IACN,kDAAkD,GAClD,MAAM;IACN,qDAAqD,GACrD,UAAU;IACV,sDAAsD,GACtD,WAAW;IACX,kDAAkD,GAClD,MAAM;IACN,kDAAkD,GAClD,MAAM;AACR;AAEA,6BAA6B;AAC7B,IAAI,kBAAkB,MAAM;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,uEAAuE,GACvE,OAAO,WAAW,IAAI,mBAAmB;IACzC,WAAW;IACX,sBAAsB,MAAM;IAC5B,aAAc;QACZ,IAAI,CAAC,UAAU,GAAG,gBAAgB,IAAI;IACxC;IACA,OAAO,GAAG,EAAE;QACV,OAAO,QAAQ,IAAI;IACrB;IACA,WAAW;QACT,OAAO,gBAAgB,IAAI;IAC7B;IACA,QAAQ,KAAK,EAAE;QACb,MAAM,IAAI;IACZ;IACA,WAAW;QACT,OAAO;IACT;AACF;AAEA,gCAAgC;AAChC,IAAI,qBAAqB,MAAM;IAC7B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,QAAQ;IACR,WAAW;IACX,sBAAsB,MAAM;IAC5B,eAAe;IACf,YAAY,OAAO,CAAE;QACnB,IAAI,CAAC,UAAU,GAAG,gBAAgB,OAAO;QACzC,IAAI,CAAC,OAAO,GAAG;IACjB;IACA;;;GAGC,GACD,QAAQ,KAAK,EAAE;QACb,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO;IAC9B;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,UAAU;YAC9C,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,OAAO;YAC3C,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM;QAChD;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,mBAAkB,GACvC,OAAO;QAET,OAAO,IAAI,CAAC,OAAO,KAAK,MAAM,OAAO;IACvC;IACA,WAAW;QACT,OAAO,aAAa,IAAI,CAAC,OAAO,GAAG;IACrC;AACF;AAEA,+BAA+B;AAC/B,IAAI,oBAAoB,MAAM;IAC5B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,YAAY;IACZ,WAAW;IACX,sBAAsB,KAAK;IAC3B,eAAe;IACf;;;;;GAKC,GACD,YAAY,SAAS,EAAE,WAAW,CAAE;QAClC,IAAI,CAAC,UAAU,GAAG,gBAAgB,MAAM;QACxC,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,WAAW,GAAG;IACrB;IACA;;;GAGC,GACD,QAAQ,KAAK,EAAE;QACb,MAAM,MAAM,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW;IACrD;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,UAAU;YAC9C,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,SAAS;YAC7C,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW;YAC/C,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM;QAChD;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,kBAAiB,GACtC,OAAO;QAET,OAAO,IAAI,CAAC,SAAS,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,KAAK,MAAM,WAAW;IACrF;AACF;AAEA,6BAA6B;AAC7B,IAAI,kBAAkB,MAAM;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,WAAW,IAAI,mBAAmB;IACzC,WAAW;IACX,sBAAsB,MAAM;IAC5B,aAAc;QACZ,IAAI,CAAC,UAAU,GAAG,gBAAgB,IAAI;IACxC;IACA,OAAO,GAAG,EAAE;QACV,OAAO,QAAQ,IAAI;IACrB;IACA,WAAW;QACT,OAAO,gBAAgB,IAAI;IAC7B;IACA;;GAEC,GACD,QAAQ,KAAK,EAAE;QACb,MAAM,IAAI;IACZ;IACA,WAAW;QACT,OAAO;IACT;AACF;AAEA,6BAA6B;AAC7B,IAAI,kBAAkB,MAAM;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,KAAK;IACL,WAAW;IACX,sBAAsB,MAAM;IAC5B,eAAe;IACf,YAAY,IAAI,CAAE;QAChB,IAAI,CAAC,UAAU,GAAG,gBAAgB,IAAI;QACtC,IAAI,CAAC,IAAI,GAAG;IACd;IACA,QAAQ,KAAK,EAAE;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI;IACxB;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,UAAU;YAC9C,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI;YACxC,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM;QAChD;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,gBAAe,GACpC,OAAO;QAET,OAAO,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI;IACjC;IACA,WAAW;QACT,OAAO,UAAU,IAAI,CAAC,IAAI,GAAG;IAC/B;AACF;AAEA,iCAAiC;AACjC,IAAI,sBAAsB,MAAM;IAC9B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,KAAK;IACL,WAAW;IACX,sBAAsB,MAAM;IAC5B,eAAe;IACf,YAAY,IAAI,CAAE;QAChB,IAAI,CAAC,UAAU,GAAG,gBAAgB,SAAS;QAC3C,IAAI,CAAC,IAAI,GAAG;IACd;IACA;;;GAGC,GACD,QAAQ,KAAK,EAAE;QACb,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI;IAC1B;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,UAAU;YAC9C,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI;YACxC,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM;QAChD;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,oBAAmB,GACxC,OAAO;QAET,OAAO,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI;IACjC;IACA,WAAW;QACT,OAAO,cAAc,IAAI,CAAC,IAAI,GAAG;IACnC;AACF;AAEA,gCAAgC;AAChC,IAAI,qBAAqB,MAAM;IAC7B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,WAAW,IAAI,sBAAsB;IAC5C,WAAW;IACX,sBAAsB,MAAM;IAC5B,aAAc;QACZ,IAAI,CAAC,UAAU,GAAG,gBAAgB,QAAQ;IAC5C;IACA,OAAO,GAAG,EAAE;QACV,OAAO,QAAQ,IAAI;IACrB;IACA,WAAW;QACT,OAAO,gBAAgB,QAAQ;IACjC;IACA;;GAEC,GACD,QAAQ,KAAK,EAAE;QACb,MAAM,OAAO;IACf;IACA,WAAW;QACT,OAAO;IACT;AACF;AAEA,6BAA6B;AAC7B,IAAI,kBAAkB,MAAM;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,KAAK;IACL,WAAW;IACX,sBAAsB,MAAM;IAC5B,eAAe;IACf,YAAY,IAAI,CAAE;QAChB,IAAI,CAAC,UAAU,GAAG,gBAAgB,IAAI;QACtC,IAAI,CAAC,IAAI,GAAG;IACd;IACA;;;GAGC,GACD,QAAQ,KAAK,EAAE;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI;IACxB;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,UAAU;YAC9C,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI;YACxC,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM;QAChD;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,gBAAe,GACpC,OAAO;QAET,OAAO,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI;IACjC;IACA,WAAW;QACT,OAAO,UAAU,IAAI,CAAC,IAAI,GAAG;IAC/B;AACF;AAEA,6BAA6B;AAC7B,IAAI,kBAAkB,MAAM;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,qBAAqB,EAAE;IAC9B,OAAO,kBAAkB,aAAa,GAAG,IAAI,IAAI;QAC/C;YAAC,SAAS,YAAY;YAAE,KAAK;SAAE;QAC/B;YAAC,SAAS,KAAK;YAAE;SAAW;QAC5B;YAAC,SAAS,UAAU;YAAE;SAAe;QACrC;YAAC,SAAS,WAAW;YAAE;SAAqB;QAC5C;YAAC,SAAS,gBAAgB;YAAE;SAAoB;QAChD;YAAC,SAAS,gBAAgB;YAAE;SAAoB;QAChD;YAAC,SAAS,WAAW;YAAE;SAAiB;QACxC;YAAC,SAAS,SAAS;YAAE;SAAc;QACnC;YAAC,SAAS,SAAS;YAAE;SAAc;QACnC;YAAC,SAAS,cAAc;YAAE;SAAkB;QAC5C;YAAC,SAAS,eAAe;YAAE;SAAmB;QAC9C;YAAC,SAAS,cAAc;YAAE;SAAkB;QAC5C;YAAC,SAAS,QAAQ;YAAE;SAAa;KAClC,EAAE;IACH,OAAO,2BAA2B,aAAa,GAAG,IAAI,IAAI;QACxD;YAAC,gBAAgB,OAAO;YAAE,CAAC;gBACzB,OAAO,IAAI,mBAAmB;YAChC;SAAE;QACF;YAAC,gBAAgB,MAAM;YAAE,CAAC,OAAO;gBAC/B,OAAO,IAAI,kBAAkB,OAAO;YACtC;SAAE;QACF;YAAC,gBAAgB,IAAI;YAAE,CAAC;gBACtB,OAAO,IAAI,gBAAgB;YAC7B;SAAE;QACF;YAAC,gBAAgB,IAAI;YAAE;gBACrB,OAAO,gBAAgB,QAAQ;YACjC;SAAE;QACF;YAAC,gBAAgB,QAAQ;YAAE;gBACzB,OAAO,mBAAmB,QAAQ;YACpC;SAAE;QACF;YAAC,gBAAgB,SAAS;YAAE,CAAC;gBAC3B,OAAO,IAAI,oBAAoB;YACjC;SAAE;QACF;YAAC,gBAAgB,IAAI;YAAE;gBACrB,OAAO,gBAAgB,QAAQ;YACjC;SAAE;QACF;YAAC,gBAAgB,IAAI;YAAE,CAAC;gBACtB,OAAO,IAAI,gBAAgB;YAC7B;SAAE;KACH,EAAE;IACH,OAAO,EAAE,CAAC;IACV,MAAM,EAAE;IACR,uBAAuB;IACvB,gBAAgB;IAChB,YAAY,OAAO,CAAE;QACnB,IAAI,CAAC,SACH,UAAU;YAAE,UAAU;YAAO,WAAW;YAAM,+BAA+B;QAAM;QAErF,IAAI,CAAC,sBAAsB,GAAG;IAChC;IACA,YAAY,IAAI,EAAE;QAChB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,YAAY;QACjB,MAAM,MAAM,IAAI,CAAC,OAAO;QACxB,IAAI,CAAC,UAAU,CAAC;QAChB,IAAI,CAAC,SAAS,CAAC;QACf,IAAI,CAAC,SAAS,CAAC;QACf,MAAM,OAAO,EAAE;QACf,IAAI,CAAC,QAAQ,CAAC,KAAK;QACnB,IAAI,CAAC,SAAS,CAAC,KAAK;QACpB,IAAI,CAAC,aAAa,CAAC;QACnB,IAAI,CAAC,gBAAgB,CAAC;QACtB,IAAI,CAAC,uBAAuB,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC;QACf,IAAI,IAAI,CAAC,sBAAsB,CAAC,6BAA6B,IAAI,IAAI,WAAW,KAAK,IAAI,MAAM,EAAE;YAC/F,IAAI,CAAC,6BAA6B,CAAC;YACnC,IAAI,CAAC,SAAS,CAAC;QACjB;QACA,OAAO;IACT;IACA,eAAe;QACb,MAAM,UAAU,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QACrC,IAAI,YAAY,iBAAiB,kBAAkB,EACjD,MAAM,IAAI,MAAM,4CAA4C,UAAU,gBAAgB,iBAAiB,kBAAkB,GAAG;IAEhI;IACA,UAAU;QACR,MAAM,cAAc,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QACzC,MAAM,eAAe,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QAC1C,OAAO,IAAI,IAAI,aAAa;IAC9B;IACA,WAAW,GAAG,EAAE;QACd,IAAI;QACJ,IAAI;QACJ,MAAM,uBAAuB,EAAE;QAC/B,MAAM,kBAAkB,EAAE;QAC1B,MAAM,aAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QACxC,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,IAAK;YACnC,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACvC,IAAI,cAAc,SAAS,YAAY,EAAE;gBACvC,IAAI,QAAQ,CAAC;gBACb;YACF;YACA,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACvC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW;YACvC,IAAI,cAAc,SAAS,QAAQ,EAAE;gBACnC,MAAM,sBAAsB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;gBACjD,qBAAqB,IAAI,CAAC;oBAAC;oBAAG;iBAAoB;YACpD,OAAO,IAAI,aAAa,iBAAiB;gBACvC,MAAM,iBAAiB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;gBAC5C,gBAAgB,IAAI,CAAC;oBAAC;oBAAG;iBAAe;YAC1C;YACA,IAAI,QAAQ,CAAC;QACf;QACA,IAAK,IAAI,GAAG,IAAI,qBAAqB,MAAM,EAAE,IAAK;YAChD,MAAM,OAAO,oBAAoB,CAAC,EAAE;YACpC,IAAI,CAAC,EAAE,CAAC,aAAa,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK;QACtD;QACA,IAAK,IAAI,GAAG,IAAI,gBAAgB,MAAM,EAAE,IAAK;YAC3C,MAAM,OAAO,eAAe,CAAC,EAAE;YAC/B,IAAI,CAAC,EAAE,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QACxC;QACA,MAAM,qBAAqB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QAChD,IAAK,IAAI,GAAG,IAAI,oBAAoB,IAAK;YACvC,cAAc,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACnC,IAAI,MAAM,CAAC,YAAY,CAAC,SAAS,GAAG;QACtC;QACA,MAAM,sBAAsB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QACjD,IAAK,IAAI,GAAG,IAAI,qBAAqB,IAAK;YACxC,cAAc,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACnC,IAAI,MAAM,CAAC,YAAY,CAAC,mBAAmB,GAAG;QAChD;IACF;IACA,UAAU,GAAG,EAAE;QACb,IAAI;QACJ,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QACvC,IAAI,IAAI,WAAW,KAAK,IAAI,KAAK,EAAE;YACjC,IAAI,eAAe,GAAG,IAAI,MAAM;YAChC,IAAI,eAAe,CAAC,IAAI,CAAC;QAC3B;QACA,IAAI,gBAAgB,GAAG,IAAI,MAAM;QACjC,IAAI,gBAAgB,CAAC,IAAI,CAAC;QAC1B,IAAK,IAAI,GAAG,IAAI,WAAW,IAAK;YAC9B,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YAC/B,IAAI,gBAAgB,CAAC,EAAE,GAAG,IAAI,MAAM,CAAC,EAAE;YACvC,IAAI,IAAI,WAAW,KAAK,IAAI,KAAK,EAAE;gBACjC,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;gBACvC,IAAI,eAAe,CAAC,EAAE,GAAG;YAC3B;QACF;QACA,IAAI,eAAe,GAAG,IAAI,MAAM;QAChC,IAAI,eAAe,CAAC,IAAI,CAAC;QACzB,IAAK,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE,IAAK;YACtC,MAAM,QAAQ,IAAI,MAAM,CAAC,EAAE;YAC3B,IAAI,CAAE,CAAA,iBAAiB,aAAY,GACjC;YAEF,IAAI,eAAe,CAAC,MAAM,SAAS,CAAC,GAAG;YACvC,IAAI,gBAAgB,CAAC,MAAM,SAAS,CAAC,CAAC,SAAS,GAAG;QACpD;IACF;IACA,UAAU,GAAG,EAAE;QACb,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QACvC,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,IAAK;YAClC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YAC/B,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,EAAE;QACzC;IACF;IACA,SAAS,GAAG,EAAE,IAAI,EAAE;QAClB,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QAChC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YAC3B,MAAM,cAAc,IAAI;YACxB,KAAK,IAAI,CAAC;YACV,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YAChC,MAAM,cAAc,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACzC,IAAI,gBAAgB,GAClB,YAAY,MAAM,CAAC;YAErB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;gBAC3B,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;gBAChC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;gBAChC,YAAY,QAAQ,CAAC,IAAI;YAC3B;QACF;IACF;IACA,UAAU,GAAG,EAAE,IAAI,EAAE;QACnB,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QACvC,IAAK,IAAI,GAAG,IAAI,WAAW,IAAK;YAC9B,MAAM,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACjC,MAAM,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACjC,MAAM,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACnC,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YAClC,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YAClC,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YAClC,QAAQ,IAAI,CAAC,WAAW,CAAC,KAAK,OAAO,KAAK,MAAM,MAAM,MAAM;YAC5D,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI;YAChC,SAAS,aAAa,CAAC;QACzB;QACA,IAAK,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE,IAAK;YACtC,QAAQ,IAAI,MAAM,CAAC,EAAE;YACrB,IAAK,IAAI,GAAG,IAAI,MAAM,WAAW,CAAC,MAAM,EAAE,IAAK;gBAC7C,MAAM,IAAI,MAAM,WAAW,CAAC,EAAE;gBAC9B,IAAI,CAAE,CAAA,aAAa,cAAa,GAC9B;gBAEF,IAAI,4BAA4B;gBAChC,IAAI,IAAI,gBAAgB,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,mBAAmB,EAC9D;oBAAA,IAAI,EAAE,UAAU,KAAK,GACnB,4BAA4B,EAAE,MAAM,CAAC,SAAS;gBAChD;gBAEF,QAAQ,IAAI,kBAAkB,EAAE,WAAW,EAAE;gBAC7C,IAAI,eAAe,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC;YACxD;QACF;QACA,IAAK,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE,IAAK;YACtC,QAAQ,IAAI,MAAM,CAAC,EAAE;YACrB,IAAI,iBAAiB,iBAAiB;gBACpC,IAAI,CAAC,MAAM,QAAQ,EACjB,MAAM,IAAI,MAAM;gBAElB,IAAI,MAAM,QAAQ,CAAC,UAAU,EAC3B,MAAM,IAAI,MAAM;gBAElB,MAAM,QAAQ,CAAC,UAAU,GAAG;YAC9B;YACA,IAAI,iBAAiB,mBACnB,IAAK,IAAI,GAAG,IAAI,MAAM,WAAW,CAAC,MAAM,EAAE,IAAK;gBAC7C,SAAS,MAAM,WAAW,CAAC,EAAE,CAAC,MAAM;gBACpC,IAAI,kBAAkB,qBACpB,OAAO,aAAa,GAAG;YAE3B;iBACK,IAAI,iBAAiB,mBAC1B,IAAK,IAAI,GAAG,IAAI,MAAM,WAAW,CAAC,MAAM,EAAE,IAAK;gBAC7C,SAAS,MAAM,WAAW,CAAC,EAAE,CAAC,MAAM;gBACpC,IAAI,kBAAkB,oBACpB,OAAO,aAAa,GAAG;YAE3B;QAEJ;IACF;IACA,cAAc,GAAG,EAAE;QACjB,MAAM,gBAAgB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;QAC3C,IAAK,IAAI,IAAI,GAAG,IAAI,eAAe,IAAK;YACtC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YAC/B,MAAM,WAAW,IAAI,MAAM,CAAC,EAAE;YAC9B,IAAI,eAAe,CAAC,IAAI,CAAC;YACzB,SAAS,QAAQ,GAAG;QACtB;IACF;IACA,iBAAiB,GAAG,EAAE;QACpB,IAAI,IAAI,WAAW,KAAK,IAAI,KAAK,EAAE;YACjC,MAAM,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;YACnC,IAAI,YAAY,GAAG,EAAE;YACrB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;gBAC9B,MAAM,aAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;gBACxC,MAAM,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;gBACnC,MAAM,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;gBACnC,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,OAAO;YACnE;QACF;IACF;IACA,8BAA8B,GAAG,EAAE;QACjC,IAAI;QACJ,MAAM,QAAQ,IAAI,gBAAgB,CAAC,MAAM;QACzC,IAAK,IAAI,GAAG,IAAI,OAAO,IACrB,IAAI,eAAe,CAAC,EAAE,GAAG,IAAI,YAAY,GAAG,IAAI;QAElD,IAAK,IAAI,GAAG,IAAI,OAAO,IACrB,IAAI,CAAC,4BAA4B,CAAC,KAAK;IAE3C;IACA,6BAA6B,GAAG,EAAE,GAAG,EAAE;QACrC,IAAI;QACJ,IAAI;QACJ,MAAM,cAAc,IAAI;QACxB,YAAY,SAAS,GAAG;QACxB,IAAI,QAAQ,CAAC;QACb,MAAM,aAAa,IAAI;QACvB,WAAW,SAAS,GAAG;QACvB,IAAI,QAAQ,CAAC;QACb,YAAY,QAAQ,GAAG;QACvB,IAAI,mBAAmB,CAAC;QACxB,WAAW,UAAU,GAAG;QACxB,IAAI,oBAAoB;QACxB,IAAI,WAAW;QACf,IAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,EAAE;YACjD,WAAW;YACX,IAAK,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE,IAAK;gBACtC,QAAQ,IAAI,MAAM,CAAC,EAAE;gBACrB,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,MAAM;oBACvC,WAAW;oBACX,oBAAoB,MAAM,aAAa,CAAC,WAAW,CAAC,EAAE;oBACtD;gBACF;YACF;YACA,IAAI,sBAAsB,MACxB,MAAM,IAAI,MAAM;QAEpB,OACE,WAAW,IAAI,eAAe,CAAC,IAAI;QAErC,IAAK,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE,IAAK;YACtC,QAAQ,IAAI,MAAM,CAAC,EAAE;YACrB,KAAK,MAAM,cAAc,MAAM,WAAW,CAAE;gBAC1C,IAAI,eAAe,mBACjB;gBAEF,IAAI,WAAW,MAAM,KAAK,UACxB,WAAW,MAAM,GAAG;YAExB;QACF;QACA,MAAM,mBAAmB,IAAI,gBAAgB,CAAC,IAAI;QAClD,MAAO,iBAAiB,WAAW,CAAC,MAAM,GAAG,EAAG;YAC9C,MAAM,aAAa,iBAAiB,gBAAgB,CAAC,iBAAiB,WAAW,CAAC,MAAM,GAAG;YAC3F,YAAY,aAAa,CAAC;QAC5B;QACA,IAAI,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,kBAAkB;QAC9D,IAAI,UACF,WAAW,aAAa,CAAC,IAAI,kBAAkB;QAEjD,MAAM,aAAa,IAAI;QACvB,IAAI,QAAQ,CAAC;QACb,WAAW,aAAa,CAAC,IAAI,eAAe,YAAY,IAAI,eAAe,CAAC,IAAI;QAChF,YAAY,aAAa,CAAC,IAAI,kBAAkB;IAClD;IACA,mBAAmB,KAAK,EAAE,GAAG,EAAE;QAC7B,IAAI,MAAM,SAAS,KAAK,KACtB,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,kBAAiB,GACtC,OAAO;QAET,MAAM,oBAAoB,MAAM,WAAW,CAAC,MAAM,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM;QAChF,IAAI,CAAE,CAAA,6BAA6B,YAAW,GAC5C,OAAO;QAET,IAAI,kBAAkB,sBAAsB,IAAI,kBAAkB,WAAW,CAAC,EAAE,CAAC,MAAM,YAAY,eACjG,OAAO;aAEP,OAAO;IAEX;IACA;;;;;GAKC,GACD,wBAAwB,GAAG,EAAE;QAC3B,KAAK,MAAM,SAAS,IAAI,MAAM,CAAE;YAC9B,IAAI,CAAE,CAAA,iBAAiB,kBAAiB,GACtC;YAEF,IAAI,IAAI,gBAAgB,CAAC,MAAM,SAAS,CAAC,CAAC,mBAAmB,EAAE;gBAC7D,MAAM,oBAAoB,MAAM,WAAW,CAAC,MAAM,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM;gBAChF,IAAI,6BAA6B,cAC/B;oBAAA,IAAI,kBAAkB,sBAAsB,IAAI,kBAAkB,WAAW,CAAC,EAAE,CAAC,MAAM,YAAY,eACjG,MAAM,sBAAsB,GAAG;gBACjC;YAEJ;QACF;IACF;IACA,UAAU,GAAG,EAAE;QACb,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,SAAS,EACxC;QAEF,KAAK,MAAM,SAAS,IAAI,MAAM,CAAE;YAC9B,IAAI,UAAU,MACZ;YAEF,IAAI,CAAC,cAAc,CAAC,MAAM,sBAAsB,IAAI,MAAM,WAAW,CAAC,MAAM,IAAI;YAChF,IAAI,iBAAiB,qBACnB,IAAI,CAAC,cAAc,CAAC,MAAM,aAAa,KAAK;iBACvC,IAAI,iBAAiB,oBAAoB;gBAC9C,IAAI,CAAC,cAAc,CAAC,MAAM,aAAa,KAAK;gBAC5C,IAAI,CAAC,cAAc,CAAC,MAAM,WAAW,CAAC,MAAM,KAAK;gBACjD,IAAI,MAAM,WAAW,CAAC,EAAE,CAAC,MAAM,YAAY,qBAAqB;oBAC9D,IAAI,CAAC,cAAc,CAAC,MAAM,WAAW,CAAC,EAAE,CAAC,MAAM,YAAY;oBAC3D,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,SAAS;gBACtC,OAAO,IAAI,MAAM,WAAW,CAAC,EAAE,CAAC,MAAM,YAAY,cAAc;oBAC9D,IAAI,CAAC,cAAc,CAAC,MAAM,WAAW,CAAC,EAAE,CAAC,MAAM,YAAY;oBAC3D,IAAI,CAAC,cAAc,CAAC,MAAM,SAAS;gBACrC,OACE,MAAM,IAAI,MAAM;YAEpB,OAAO,IAAI,iBAAiB,mBAAmB;gBAC7C,IAAI,CAAC,cAAc,CAAC,MAAM,WAAW,CAAC,MAAM,KAAK;gBACjD,IAAI,CAAC,cAAc,CAAC,MAAM,WAAW,CAAC,EAAE,CAAC,MAAM,YAAY;YAC7D,OAAO,IAAI,iBAAiB,cAC1B,IAAI,CAAC,cAAc,CAAC,MAAM,aAAa,KAAK;iBACvC,IAAI,iBAAiB,gBAC1B,IAAI,CAAC,cAAc,CAAC,MAAM,SAAS,KAAK;iBACnC,IAAI,iBAAiB,iBAC1B,IAAI,CAAC,cAAc,CAAC,MAAM,QAAQ,KAAK;iBAClC,IAAI,iBAAiB,eAC1B,IAAI,CAAC,cAAc,CAAC,MAAM,UAAU,KAAK;iBACpC,IAAI,iBAAiB,eAC1B,IAAI,CAAC,cAAc,CAAC,MAAM,WAAW,CAAC,MAAM,IAAI,KAAK,MAAM,QAAQ,IAAI;iBAEvE,IAAI,CAAC,cAAc,CAAC,MAAM,WAAW,CAAC,MAAM,IAAI,KAAK,iBAAiB;QAE1E;IACF;IACA,eAAe,SAAS,EAAE,OAAO,EAAE;QACjC,IAAI,CAAC,WAAW;YACd,IAAI,YAAY,KAAK,KAAK,YAAY,MACpC,UAAU;YAEZ,MAAM;QACR;IACF;IACA,YAAY,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;QAClD,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI;QAC9B,OAAQ;YACN,KAAK,WAAW,OAAO;gBACrB,OAAO,IAAI,kBAAkB;YAC/B,KAAK,WAAW,KAAK;gBACnB,OAAO,SAAS,IAAI,IAAI,gBAAgB,QAAQ,MAAM,GAAG,EAAE,QAAQ,IAAI,gBAAgB,QAAQ,MAAM;YACvG,KAAK,WAAW,IAAI;gBAClB,OAAO,IAAI,eAAe,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,MAAM;YAC1D,KAAK,WAAW,SAAS;gBACvB,OAAO,IAAI,oBAAoB,QAAQ,MAAM,MAAM,SAAS;YAC9D,KAAK,WAAW,UAAU;gBACxB,OAAO,IAAI,8BAA8B,QAAQ;YACnD,KAAK,WAAW,IAAI;gBAClB,OAAO,SAAS,IAAI,IAAI,eAAe,QAAQ,MAAM,GAAG,IAAI,IAAI,eAAe,QAAQ;YACzF,KAAK,WAAW,MAAM;gBACpB,OAAO,IAAI,iBAAiB,QAAQ,MAAM,MAAM,SAAS;YAC3D,KAAK,WAAW,GAAG;gBACjB,OAAO,IAAI,cAAc,QAAQ,IAAI,CAAC,KAAK;YAC7C,KAAK,WAAW,OAAO;gBACrB,OAAO,IAAI,iBAAiB,QAAQ,IAAI,CAAC,KAAK;YAChD,KAAK,WAAW,QAAQ;gBACtB,OAAO,IAAI,mBAAmB;YAChC;gBACE,MAAM,IAAI,MAAM,oCAAoC,OAAO;QAC/D;IACF;IACA,aAAa,IAAI,EAAE,SAAS,EAAE;QAC5B,MAAM,OAAO,iBAAiB,eAAe,CAAC,GAAG,CAAC;QAClD,IAAI,CAAC,MACH,MAAM,IAAI,MAAM,8BAA8B,OAAO;QAEvD,MAAM,IAAI,IAAI;QACd,EAAE,SAAS,GAAG;QACd,OAAO;IACT;IACA,mBAAmB,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE;QACrC,MAAM,UAAU,iBAAiB,wBAAwB,CAAC,GAAG,CAAC;QAC9D,IAAI,CAAC,SACH,MAAM,IAAI,MAAM,qCAAqC,OAAO;QAE9D,OAAO,QAAQ,OAAO;IACxB;AACF;AAEA,6BAA6B;AAC7B,IAAI,iBAAiB,MAAM,wBAAwB;IACjD,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,CAAA,IAAK,GAAG,EAAE,CAAC;IACX,QAAQ;QACN,KAAK,CAAC;QACN,IAAI,CAAC,CAAA,IAAK,GAAG,EAAE;IACjB;IACA,IAAI,GAAG,EAAE;QACP,OAAO,KAAK,CAAC,IAAI;IACnB;IACA,IAAI,GAAG,EAAE,KAAK,EAAE;QACd,MAAM,SAAS,KAAK,CAAC,IAAI,KAAK;QAC9B,IAAI,WAAW,KAAK,GAClB,IAAI,CAAC,CAAA,IAAK,CAAC,IAAI,CAAC;QAElB,OAAO;IACT;IACA,YAAY,GAAG,EAAE,KAAK,EAAE;QACtB,MAAM,SAAS,KAAK,CAAC,YAAY,KAAK;QACtC,IAAI,WAAW,KAAK,GAClB,IAAI,CAAC,CAAA,IAAK,CAAC,IAAI,CAAC;QAElB,OAAO;IACT;IACA;;GAEC,GACD,SAAS;QACP,OAAO;YACL,CAAC,OAAO,QAAQ,CAAC,EAAE;gBACjB,IAAI,QAAQ;gBACZ,OAAO;oBACL,MAAM,aAAa,GAAG,OAAO;wBAC3B,IAAI,QAAQ,IAAI,CAAC,CAAA,IAAK,CAAC,MAAM,EAC3B,OAAO;4BACL,MAAM;4BACN,OAAO,KAAK,CAAC,IAAI,IAAI,CAAC,CAAA,IAAK,CAAC,QAAQ;wBACtC;wBAEF,OAAO;4BACL,MAAM;4BACN,OAAO,KAAK;wBACd;oBACF,GAAG;gBACL;YACF;QACF;IACF;IACA;;GAEC,GACD,OAAO;QACL,OAAO,IAAI,CAAC,CAAA,IAAK,CAAC,OAAO,QAAQ,CAAC;IACpC;IACA,OAAO,CAAC,EAAE;QACR,IAAI,CAAE,CAAA,aAAa,eAAc,GAC/B,OAAO;QAET,OAAO,KAAK,CAAC,OAAO;IACtB;AACF;AAEA,2BAA2B;AAC3B,IAAI,gBAAgB,MAAM;IACxB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,IAAI;IACJ,OAAO,EAAE,CAAC;IACV,6GAA6G;IAC7G,YAAY;IACZ,OAAO,IAAI,eAAe,yBAAyB,QAAQ,EAAE;IAC7D,kBAAkB,EAAE,CAAC;IACrB,mBAAmB,EAAE,CAAC;IACtB,YAAY,GAAG,CAAE;QACf,IAAI,CAAC,GAAG,GAAG;IACb;IACA,OAAO,cAAc,GAAG,EAAE;QACxB,OAAO,IAAI,eAAe,KAAK,SAAS;IAC1C;IACA,OAAO,cAAc,IAAI,EAAE,IAAI,EAAE;QAC/B,KAAK,IAAI,CAAC,KAAK,MAAM;QACrB,KAAK,MAAM,OAAO,KAAM;YACtB,MAAM,cAAc,IAAI,QAAQ,CAAC,MAAM,GAAG;YAC1C,MAAM,YAAY;mBAAI;aAAI;YAC1B,IAAI,eAAe,SAAS,CAAC,EAAE,CAAC,IAAI,KAAK,MAAM,GAAG,EAChD,KAAK,IAAI,CAAC,UAAU,MAAM,GAAG;iBAE7B,KAAK,IAAI,CAAC,UAAU,MAAM;YAE5B,KAAK,IAAI,CAAC,cAAc,IAAI;YAC5B,KAAK,MAAM,YAAY,UAAW;gBAChC,IAAI,SAAS,KAAK,KAAK,MAAM,GAAG,EAAE;oBAChC,IAAI,SAAS,IAAI,KAAK,MAAM,GAAG,EAC7B;yBAEA,KAAK,IAAI,CAAC;gBAEd,OACE,KAAK,IAAI,CAAC,SAAS,KAAK;gBAE1B,KAAK,IAAI,CAAC,SAAS,IAAI;YACzB;QACF;IACF;IACA;;;;;;;;;;;;;;;;;;;;;;;;;GAyBC,GACD,YAAY;QACV,IAAI,CAAC,WAAW;QAChB,MAAM,YAAY,IAAI,CAAC,QAAQ;QAC/B,IAAI,CAAC,kBAAkB;QACvB,IAAI,CAAC,mBAAmB;QACxB,IAAI,CAAC,+BAA+B;QACpC,IAAI,CAAC,kBAAkB;QACvB,MAAM,aAAa,IAAI,CAAC,OAAO;QAC/B,IAAI,CAAC,QAAQ,CAAC,WAAW;QACzB,IAAI,CAAC,sBAAsB;QAC3B,IAAI,CAAC,eAAe;QACpB,OAAO,IAAI,CAAC,IAAI;IAClB;IACA,cAAc;QACZ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,kBAAkB;QACjD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW;QACnC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY;IACtC;IACA,kBAAkB;QAChB,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,IAAI,KAAK,EAAE;YACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM;YAC3C,KAAK,MAAM,UAAU,IAAI,CAAC,GAAG,CAAC,YAAY,CAAE;gBAC1C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,UAAU;gBAChC,OAAQ,OAAO,UAAU;oBACvB,KAAK,gBAAgB,OAAO;wBAAE;4BAC5B,MAAM,UAAU,OAAO,OAAO;4BAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf;wBACF;oBACA,KAAK,gBAAgB,MAAM;wBAAE;4BAC3B,MAAM,YAAY,OAAO,SAAS;4BAClC,MAAM,cAAc,OAAO,WAAW;4BACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf;wBACF;oBACA,KAAK,gBAAgB,IAAI;wBAAE;4BACzB,MAAM,OAAO,OAAO,IAAI;4BACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf;wBACF;oBACA,KAAK,gBAAgB,IAAI;wBACvB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACf;oBAEF,KAAK,gBAAgB,QAAQ;wBAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACf;oBAEF,KAAK,gBAAgB,SAAS;wBAAE;4BAC9B,MAAM,OAAO,OAAO,IAAI;4BACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf;wBACF;oBACA,KAAK,gBAAgB,IAAI;wBACvB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACf;oBAEF,KAAK,gBAAgB,IAAI;wBAAE;4BACzB,MAAM,OAAO,OAAO,IAAI;4BACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf;wBACF;oBACA;wBACE,MAAM,IAAI,MAAM,CAAC,gCAAgC,EAAE,OAAO,UAAU,CAAC,cAAc,CAAC;gBAExF;YACF;QACF;IACF;IACA,yBAAyB;QACvB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM;QAC9C,KAAK,MAAM,iBAAiB,IAAI,CAAC,GAAG,CAAC,eAAe,CAClD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,WAAW;IAE5C;IACA,SAAS,GAAG,IAAI,EAAE;QAChB,OAAQ,KAAK,MAAM;YACjB,KAAK;gBAAG;oBACN,IAAI,YAAY;oBAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM;oBACrC,KAAK,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,MAAM,CAAE;wBAC/B,IAAI,MAAM,MAAM;4BACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,YAAY;4BACpC;wBACF;wBACA,MAAM,YAAY,EAAE,WAAW,CAAC,SAAS;wBACzC,IAAI,aAAa,iBAAiB,EAAE,SAAS,EAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,WAAW;wBAEzC,IAAI,aAAa,kBAAkB,EAAE,mBAAmB,EACtD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,WAAW;wBAE1C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS;wBAC1B,IAAI,EAAE,WAAW,CAAC,SAAS,KAAK,SAAS,QAAQ,EAC/C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC,WAAW;6BAE1C,IAAI,aAAa,iBACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,CAAC,WAAW;wBAGzC,IAAI,EAAE,WAAW,CAAC,SAAS,KAAK,SAAS,SAAS,EAChD,aAAa,EAAE,WAAW,CAAC,MAAM;wBAEnC,KAAK,MAAM,KAAK,EAAE,WAAW,CAAE;4BAC7B,MAAM,WAAW,EAAE,cAAc;4BACjC,IAAI,aAAa,WAAW,GAAG,IAAI,aAAa,WAAW,OAAO,EAAE;gCAClE,MAAM,KAAK;gCACX,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE;4BACxB;wBACF;oBACF;oBACA,OAAO;gBACT;YACA,KAAK;gBAAG;oBACN,MAAM,CAAC,WAAW,WAAW,GAAG;oBAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;oBACf,KAAK,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,MAAM,CAAE;wBAC/B,IAAI,MAAM,MACR;wBAEF,IAAI,EAAE,WAAW,CAAC,SAAS,KAAK,SAAS,SAAS,EAChD;wBAEF,KAAK,MAAM,KAAK,EAAE,WAAW,CAAE;4BAC7B,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,WAAW,CAAC,KAAK,MAC5C,MAAM,IAAI,MAAM;4BAElB,MAAM,MAAM,EAAE,WAAW;4BACzB,IAAI,MAAM,EAAE,MAAM,CAAC,WAAW;4BAC9B,MAAM,WAAW,EAAE,cAAc;4BACjC,IAAI,OAAO;4BACX,IAAI,OAAO;4BACX,IAAI,OAAO;4BACX,OAAQ;gCACN,KAAK,WAAW,IAAI;oCAClB,MAAM,EAAE,WAAW,CAAC,WAAW;oCAC/B,OAAO,EAAE,MAAM,CAAC,WAAW;oCAC3B,OAAO,EAAE,SAAS;oCAClB,OAAO,EAAE,UAAU;oCACnB;gCAEF,KAAK,WAAW,UAAU;oCAAE;wCAC1B,MAAM,MAAM;wCACZ,OAAO,IAAI,UAAU;wCACrB;oCACF;gCACA,KAAK,WAAW,SAAS;oCAAE;wCACzB,MAAM,KAAK;wCACX,OAAO,GAAG,SAAS;wCACnB,OAAO,GAAG,SAAS;wCACnB,OAAO,GAAG,cAAc,GAAG,IAAI;wCAC/B;oCACF;gCACA,KAAK,WAAW,KAAK;oCACnB,OAAO,EAAE,KAAK;oCACd,OAAO,EAAE,IAAI;oCACb,IAAI,SAAS,MAAM,GAAG,EAAE;wCACtB,OAAO;wCACP,OAAO;oCACT;oCACA;gCAEF,KAAK,WAAW,IAAI;oCAClB,OAAO,EAAE,UAAU;oCACnB,IAAI,SAAS,MAAM,GAAG,EAAE;wCACtB,OAAO;wCACP,OAAO;oCACT;oCACA;gCAEF,KAAK,WAAW,MAAM;oCAAE;wCACtB,MAAM,KAAK;wCACX,OAAO,GAAG,SAAS;wCACnB,OAAO,GAAG,WAAW;wCACrB,OAAO,GAAG,cAAc,GAAG,IAAI;wCAC/B;oCACF;gCACA,KAAK,WAAW,GAAG;oCACjB,OAAO,WAAW,GAAG,CAAC,EAAE,GAAG;oCAC3B;gCAEF,KAAK,WAAW,OAAO;oCACrB,OAAO,WAAW,GAAG,CAAC,EAAE,GAAG;oCAC3B;gCAEF,KAAK,WAAW,QAAQ;oCACtB;gCAEF;4BACF;4BACA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;4BACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACjB;oBACF;oBACA;gBACF;YACA;gBACE,MAAM,IAAI,MAAM;QAEpB;IACF;IACA,UAAU;QACR,eAAe,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE;eAAI,IAAI,CAAC,IAAI,CAAC,IAAI;SAAG;QAC7D,MAAM,aAAa,IAAI;QACvB,IAAI,WAAW;QACf,KAAK,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,GAC5B,WAAW,GAAG,CAAC,GAAG;QAEpB,OAAO;IACT;IACA,qBAAqB;QACnB,MAAM,YAAY,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM;QAClD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACf,IAAI,YAAY,GACd,KAAK,MAAM,kBAAkB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CACpD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,WAAW;IAG/C;IACA,kCAAkC;QAChC,MAAM,YAAY,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM;QAClD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,IAAK;YAClC,MAAM,iBAAiB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;YACnD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,WAAW;YACzC,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,IAAI,KAAK,EACpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;QAE9C;IACF;IACA,sBAAsB;QACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM;QAC3C,KAAK,MAAM,SAAS,IAAI,CAAC,gBAAgB,CACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAEnB;IACA,qBAAqB;QACnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM;QAC1C,KAAK,MAAM,SAAS,IAAI,CAAC,eAAe,CACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAEnB;AACF;AAEA,sBAAsB;AACtB,IAAI,WAAW,MAAM;IACnB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,cAAc,GAAG;IACjB,QAAQ;IACR;;GAEC,GACD,QAAQ,EAAE,CAAC;IACX,gBAAgB,MAAM;IACtB;;;GAGC,GACD,aAAa,GAAG;IAChB,sBAAsB,KAAK;IAC3B;;;;GAIC,GACD,sBAAsB,MAAM;IAC5B;;;;;;;;;;GAUC,GACD,aAAa,KAAK;IAClB,YAAY,OAAO,CAAE;QACnB,IAAI,SACF,IAAI,CAAC,OAAO,GAAG;IAEnB;IACA,OAAO,UAAU,WAAW,EAAE;QAC5B,MAAM,SAAS,IAAI;QACnB,OAAO,WAAW,GAAG;QACrB,OAAO;IACT;IACA,OAAO,YAAY,OAAO,EAAE;QAC1B,OAAO,IAAI,UAAU;IACvB;IACA,OAAO,SAAS,KAAK,EAAE;QACrB,OAAO,MAAM,OAAO,CAAC,QAAQ;IAC/B;IACA;;;;;;;;;;;;;;;;;GAiBC,GACD,OAAO,OAAO,CAAC,EAAE,CAAC,EAAE;QAClB,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO;IACnC;IACA;;GAEC,GACD,YAAY;QACV,MAAM,OAAO,aAAa,GAAG,IAAI;QACjC,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAC/B,KAAK,GAAG,CAAC,OAAO,GAAG;QAErB,IAAI,KAAK,IAAI,KAAK,GAChB,OAAO;QAET,OAAO;IACT;IACA,WAAW;QACT,IAAI,MAAM;QACV,OAAO,IAAI,CAAC,WAAW;QACvB,OAAO;QACP,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK;QAChD,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,OAAO;YACP,IAAI,IAAI,CAAC,UAAU,EACjB,OAAO,cAAc,IAAI,CAAC,UAAU;iBAEpC,OAAO,IAAI,CAAC,UAAU;QAE1B;QACA,OAAO,IAAI,QAAQ;IACrB;AACF;AAEA,0BAA0B;AAC1B,IAAI,eAAe;IACjB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,yEAAyE,GACzE,OAAO,QAAQ,SAAS,SAAS,CAAC,YAAY;IAC9C,IAAI;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,mBAAmB;IACnB,YAAY,GAAG,EAAE,kBAAkB,CAAE;QACnC,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,kBAAkB,GAAG;QAC1B,OAAO,IAAI;IACb;IACA,iBAAiB,OAAO,EAAE;QACxB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAC1B,OAAO;QAET,MAAM,UAAU,IAAI,QAAQ,yBAAyB,QAAQ;QAC7D,OAAO,2BAA2B,SAAS,IAAI,CAAC,kBAAkB,EAAE;IACtE;AACF;AAEA,kCAAkC;AAClC,IAAI,uBAAuB,MAAM;IAC/B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,4CAA4C,GAC5C,OAAO,oBAAoB,MAAM,EAAE,SAAS,EAAE;QAC5C,OAAO,sBAAsB,wBAAwB,CAAC,QAAQ,WAAW;IAC3E;IACA,iGAAiG,GACjG,OAAO,yBAAyB,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE;QAClE,OAAO,kBAAkB,cAAc,IAAI,eAAe,QAAQ,iBAAiB,IAAI,gBAAgB,QAAQ,eAAe;IAChI;AACF;AAEA,0BAA0B;AAC1B,IAAI,eAAe;IACjB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;GAEC,GACD,WAAW,EAAE;IACb;;;GAGC,GACD,cAAc,EAAE;IAChB;;;;;;;;;;GAUC,GACD,mBAAmB,EAAE;IACrB;;;;;GAKC,GACD,eAAe,EAAE;IACjB;;;;GAIC,GACD,aAAa,EAAE;IACf;;;;GAIC,GACD,aAAa,EAAE;IACf;;;GAGC,GACD,gBAAgB;IAChB;;;;GAIC,GACD,cAAc,EAAE;IAChB;;;;;;GAMC,GACD,YAAY,EAAE;IACd;;;;;;GAMC,GACD,YAAY,EAAE;IACd;;;GAGC,GACD,eAAe;IACf;;;GAGC,GACD,qBAAqB;IACrB;;;;GAIC,GACD,OAAO;IACP;;;GAGC,GACD,YAAY;IACZ;;;;GAIC,GACD,eAAe;IACf;;;;;;;;;;;;;;GAcC,GACD,oBAAoB,EAAE;IACtB;;;;;;;;;GASC,GACD,oBAAoB,EAAE;IACtB;;;;;;;;;;GAUC,GACD,aAAa,EAAE;IACf;;;;;;;;;;;;;;GAcC,GACD,mBAAmB,EAAE;IACrB;;;;;;;;;GASC,GACD,mBAAmB,EAAE;IACrB;;;;;GAKC,GACD,YAAY,QAAQ,CAAE;QACpB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,oBAAoB,GAAG,EAAE;QAC9B,IAAI,CAAC,MAAM,GAAG,EAAE;QAChB,IAAI,CAAC,WAAW,GAAG,EAAE;QACrB,IAAI,CAAC,cAAc,GAAG,EAAE;IAC1B;IACA,WAAW;QACT,OAAO,eAAe,IAAI,CAAC,QAAQ,GAAG,4BAA4B,IAAI,CAAC,oBAAoB,CAAC,MAAM,GAAG,cAAc,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,mBAAmB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,oBAAoB,IAAI,CAAC,YAAY,GAAG,yBAAyB,IAAI,CAAC,iBAAiB,GAAG,yBAAyB,IAAI,CAAC,iBAAiB,GAAG,kBAAkB,IAAI,CAAC,UAAU,GAAG,mBAAmB,IAAI,CAAC,WAAW,GAAG,wBAAwB,IAAI,CAAC,gBAAgB,GAAG;IAC7b;AACF;AAEA,4BAA4B;AAC5B,IAAI,iBAAiB,MAAM,wBAAwB;IACjD,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;GAEC,GACD,oBAAoB;IACpB,+BAA+B;IAC/B,YAAY,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,mBAAmB,CAAE;QACvD,KAAK,CAAC,QAAQ,OAAO,WAAW,OAAO,OAAO,EAAE,UAAU,gBAAgB,IAAI,GAAG,OAAO,eAAe;QACvG,IAAI,CAAC,mBAAmB,GAAG,UAAU,sBAAsB,OAAO,mBAAmB,IAAI;QACzF,IAAI,CAAC,8BAA8B,GAAG,gBAAgB,sBAAsB,CAAC,QAAQ,IAAI,CAAC,KAAK;QAC/F,OAAO,IAAI;IACb;IACA,OAAO,mBAAmB,MAAM,EAAE,KAAK,EAAE,mBAAmB,EAAE;QAC5D,OAAO,IAAI,gBAAgB,QAAQ,OAAO,OAAO,OAAO,EAAE;IAC5D;IACA,OAAO,iBAAiB,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE;QAC9C,OAAO,IAAI,gBAAgB,QAAQ,OAAO,WAAW,MAAM,OAAO,mBAAmB;IACvF;IACA,OAAO,kBAAkB,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE;QAC5C,OAAO,IAAI,gBAAgB;YAAE;QAAI,GAAG,OAAO,SAAS;IACtD;IACA,OAAO,uBAAuB,MAAM,EAAE,MAAM,EAAE;QAC5C,OAAO,OAAO,8BAA8B,IAAI,eAAe,UAAU,OAAO,SAAS;IAC3F;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,WAAW,WAAW,UAAU,CAAC;YACrC,WAAW,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,KAAK,CAAC,WAAW;YAC7D,WAAW,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,GAAG;YAC/C,WAAW,WAAW,oBAAoB,CAAC,UAAU,IAAI,CAAC,OAAO;YACjE,WAAW,WAAW,oBAAoB,CAAC,UAAU,IAAI,CAAC,eAAe;YACzE,WAAW,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,8BAA8B,GAAG,IAAI;YACjF,WAAW,WAAW,oBAAoB,CAAC,UAAU,IAAI,CAAC,mBAAmB;YAC7E,WAAW,WAAW,MAAM,CAAC,UAAU;YACvC,IAAI,CAAC,cAAc,GAAG;QACxB;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,OAAO,IAAI,CAAC,8BAA8B,KAAK,MAAM,8BAA8B,IAAK,CAAA,IAAI,CAAC,mBAAmB,IAAI,MAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,MAAM,mBAAmB,IAAI,CAAC,MAAM,mBAAmB,AAAD,KAAM,KAAK,CAAC,OAAO;IAC3P;AACF;AAEA,2BAA2B;AAC3B,IAAI,oBAAoB;IACtB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,CAC/D;IACA,gBAAgB,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,CACnF;IACA,4BAA4B,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE,CAC9F;IACA,yBAAyB,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,CACtF;AACF;AAEA,8BAA8B;AAC9B,IAAI,uBAAuB,MAAM,8BAA8B;IAC7D,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;GAEC,GACD,OAAO,WAAW,IAAI,wBAAwB;IAC9C,YAAY,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,kBAAkB,EAAE,GAAG,EAAE,EAAE,EAAE;QAC1E,QAAQ,KAAK,CAAC,UAAU,OAAO,MAAM,qBAAqB,MAAM;IAClE;AACF;AAEA,4BAA4B;AAC5B,IAAI,qBAAqB,cAAc;IACrC,YAAY,SAAS,CAAE;QACrB,KAAK;QACL,IAAI,CAAC,SAAS,GAAG;QACjB,OAAO,IAAI;IACb;IACA,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE;QAC7D,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACtB,EAAE,WAAW,CAAC,YAAY,iBAAiB,MAAM,QAAQ,KAAK;QAChE;IACF;IACA,gBAAgB,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE;QACjF,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACtB,EAAE,eAAe,CAAC,YAAY,KAAK,YAAY,WAAW,OAAO,WAAW;QAC9E;IACF;IACA,4BAA4B,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE;QAC5F,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACtB,EAAE,2BAA2B,CAAC,YAAY,KAAK,YAAY,WAAW,iBAAiB;QACzF;IACF;IACA,yBAAyB,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE;QACpF,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACtB,EAAE,wBAAwB,CAAC,YAAY,KAAK,YAAY,WAAW,YAAY;QACjF;IACF;AACF;AAEA,oBAAoB;AACpB,IAAI,aAAa,MAAM;IACrB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,MAAM,GAAG;IAChB,OAAO,oBAAoB,aAAa,GAAG,IAAI,MAAM;IACrD,OAAO,oBAAoB,aAAa,GAAG,IAAI,MAAM;IACrD,YAAY;IACZ,YAAY;QAAC,qBAAqB,QAAQ;KAAC,CAAC;IAC5C,cAAc,GAAG;IACjB,aAAa,WAAW,EAAE;QACxB,MAAM,iBAAiB;QACvB,IAAI,mBAAmB,aACrB,QAAQ,KAAK,CAAC,yDAAyD,iBAAiB,OAAO;IAEnG;IACA,iBAAiB,QAAQ,EAAE;QACzB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;IACtB;IACA,uBAAuB;QACrB,IAAI,CAAC,SAAS,GAAG,EAAE;IACrB;IACA,oBAAoB,QAAQ,EAAE;QAC5B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IACzC,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,UAAU;YAClC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG;YACzB;QACF;IAEJ;IACA,oBAAoB;QAClB,OAAO,IAAI,CAAC,SAAS;IACvB;IACA,kBAAkB;QAChB,MAAM,aAAa,IAAI,CAAC,UAAU;QAClC,IAAI,SAAS,YAAY,iBAAiB,CAAC,GAAG,CAAC;QAC/C,IAAI,CAAC,QAAQ;YACX,SAAS,aAAa,GAAG,IAAI;YAC7B,IAAK,IAAI,IAAI,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,IAAK;gBAC/C,MAAM,cAAc,WAAW,cAAc,CAAC;gBAC9C,IAAI,aACF,OAAO,GAAG,CAAC,aAAa;gBAE1B,MAAM,eAAe,WAAW,eAAe,CAAC;gBAChD,IAAI,cACF,OAAO,GAAG,CAAC,cAAc;YAE7B;YACA,OAAO,GAAG,CAAC,OAAO,MAAM,GAAG;YAC3B,YAAY,iBAAiB,CAAC,GAAG,CAAC,YAAY;QAChD;QACA,OAAO;IACT;IACA;;;GAGC,GACD,kBAAkB;QAChB,MAAM,YAAY,IAAI,CAAC,SAAS;QAChC,IAAI,SAAS,YAAY,iBAAiB,CAAC,GAAG,CAAC;QAC/C,IAAI,CAAC,QAAQ;YACX,SAAS,aAAa,GAAG,IAAI;YAC7B,UAAU,OAAO,CAAC,CAAC,UAAU;gBAC3B,OAAO,OAAO,GAAG,CAAC,UAAU;YAC9B;YACA,YAAY,iBAAiB,CAAC,GAAG,CAAC,WAAW;QAC/C;QACA,OAAO;IACT;IACA,aAAa,SAAS,EAAE;QACtB,MAAM,QAAQ,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;QACzC,IAAI,OACF,OAAO;QAET,OAAO,MAAM,YAAY;IAC3B;IACA,4EAA4E,GAC5E,eAAe,CAAC,EAAE;QAChB,MAAM,OAAO,EAAE,cAAc,EAAE;QAC/B,MAAM,SAAS,EAAE,cAAc,EAAE;QACjC,OAAO,UAAU,OAAO,MAAM;IAChC;IACA,IAAI,wBAAwB;QAC1B,OAAO,IAAI,mBAAmB,IAAI,CAAC,SAAS;IAC9C;IACA;;;GAGC,GACD,QAAQ,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE;QAC3C,OAAO;IACT;IACA,gEAAgE;IAChE,SAAS,SAAS,EAAE,WAAW,EAAE;QAC/B,OAAO;IACT;IACA,OAAO,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,CAC5C;IACA,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG;IAC7B;IACA,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,WAAW;IACzB;IACA,IAAI,MAAM,KAAK,EAAE;QACf,IAAI,CAAC,WAAW,GAAG;IACrB;IACA,eAAe;QACb,OAAO,KAAK;IACd;AACF;AAEA,4BAA4B;AAC5B,IAAI,qBAAqB,MAAM;IAC7B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;;GAMC,GACD,OAAO,UAAU,IAAI,sBAAsB;IAC3C;;;;;;;;;;;;;;GAcC,GACD,WAAW,MAAM;IACjB,YAAY,QAAQ,CAAE;QACpB,IAAI,CAAC,QAAQ,GAAG,YAAY;IAC9B;IACA,OAAO,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE;QAC7D,MAAM,IAAI,YAAY,UAAU,CAAC,QAAQ,MAAM,SAAS,OAAO;QAC/D,EAAE,IAAI,GAAG;QACT,EAAE,MAAM,GAAG;QACX,IAAI,MACF,EAAE,IAAI,GAAG;aACJ,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,EAAE,KAAK,MACxC,EAAE,IAAI,GAAG,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO;QAE7C,OAAO;IACT;AACF;AAEA,8BAA8B;AAC9B,IAAI,uBAAuB,MAAM,8BAA8B;IAC7D,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,IAAI;IACJ;;;;GAIC,GACD,iBAAiB,KAAK;IACtB;;;;;;GAMC,GACD,iBAAiB,GAAG;IACpB,WAAW;IACX,MAAM;IACN,YAAY,MAAM,CAAE;QAClB,KAAK,CAAC,OAAO,OAAO;QACpB,IAAI,MAAM,iBAAiB,EACzB,MAAM,iBAAiB,CAAC,IAAI,EAAE;QAEhC,IAAI,CAAC,OAAO,GAAG,OAAO,OAAO;QAC7B,IAAI,CAAC,UAAU,GAAG,OAAO,UAAU;QACnC,IAAI,CAAC,KAAK,GAAG,OAAO,KAAK;QACzB,IAAI,CAAC,GAAG,GAAG,OAAO,GAAG;QACrB,IAAI,IAAI,CAAC,UAAU,KAAK,MACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK;IAE/C;IACA;;;;;;;;;GASC,GACD,oBAAoB;QAClB,IAAI,IAAI,CAAC,UAAU,KAAK,QAAQ,IAAI,CAAC,GAAG,KAAK,MAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,GAAG;aAE1E,OAAO;IAEX;IACA,4DAA4D;IAC5D,WAAW;QACT,OAAO,IAAI,CAAC,OAAO;IACrB;AACF;AAEA,mCAAmC;AACnC,IAAI,4BAA4B,cAAc;IAC5C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,WAAW;IACX,eAAe;IACf,YAAY,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,CAAE;QACpD,KAAK,CAAC;YAAE,SAAS;YAAI,YAAY;YAAO;YAAO,KAAK;QAAK;QACzD,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,cAAc,GAAG;IACxB;IACA,WAAW;QACT,IAAI,SAAS;QACb,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,IAAI,KAAK,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EACzE,SAAS,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU;QAEvE,OAAO,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC;IAC/C;AACF;AAEA,eAAe;AACf,IAAI,QAAQ,MAAM,eAAe;IAC/B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,eAAe,EAAE;IACxB,OAAO,OAAO,GAAG;IACjB,OAAO,OAAO,GAAG;IACjB,OAAO,wBAAwB,MAAM,eAAe,CAAC;IACrD,OAAO,SAAS,MAAM,cAAc,CAAC;IACrC,UAAU;QACR,YAAY;QACZ,YAAY;QACZ,cAAc;QACd,cAAc;IAChB,EAAE;IACF;;;;GAIC,GACD,sBAAsB,GAAG;IACzB,6CAA6C,GAC7C,UAAU,EAAE;IACZ,yCAAyC,GACzC,OAAO,EAAE;IACT,OAAO,OAAO,YAAY,CAAC;IAC3B,uFAAuF,GACvF,qBAAqB,EAAE;IACvB;;GAEC,GACD,wBAAwB,EAAE;IAC1B,MAAM;IACN;;;;;;;;GAQC,GACD,QAAQ,KAAK;IACb;;;GAGC,GACD,SAAS,MAAM;IACf,QAAQ;IACR,CAAA,SAAU,GAAG,EAAE,CAAC;IAChB;;;;GAIC,GACD,CAAA,IAAK,CAAC;IACN,YAAY,KAAK,EAAE,OAAO,CAAE;QAC1B,KAAK;QACL,IAAI,CAAC,OAAO,GAAG;YAAE,GAAG,IAAI,CAAC,OAAO;YAAE,GAAG,OAAO;QAAC;QAC7C,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,OAAO,GAAG,mBAAmB,OAAO;IAC3C;IACA,MAAM,WAAW,IAAI,EAAE;QACrB,IAAI,UACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAElB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,IAAI,GAAG,MAAM,YAAY;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,eAAe;QACpC,IAAI,CAAC,mBAAmB,GAAG;QAC3B,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,qBAAqB,GAAG;QAC7B,IAAI,CAAC,CAAA,IAAK,GAAG,KAAK;QAClB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,IAAI,GAAG,OAAO,YAAY;QAC/B,IAAI,CAAC,CAAA,SAAU,GAAG,EAAE;QACpB,IAAI,CAAC,WAAW,CAAC,KAAK;IACxB;IACA,+EAA+E,GAC/E,YAAY;QACV,IAAI,IAAI,CAAC,KAAK,KAAK,MACjB,MAAM,IAAI,MAAM;QAElB,MAAM,mBAAmB,IAAI,CAAC,KAAK,CAAC,IAAI;QACxC,IAAI;YACF,MAAO,KAAM;gBACX,IAAI,IAAI,CAAC,MAAM,EAAE;oBACf,IAAI,CAAC,OAAO;oBACZ,OAAO,IAAI,CAAC,KAAK;gBACnB;gBACA,IAAI,CAAC,KAAK,GAAG;gBACb,IAAI,CAAC,OAAO,GAAG,MAAM,eAAe;gBACpC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK;gBAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM;gBACjD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI;gBAClD,IAAI,CAAC,CAAA,IAAK,GAAG,KAAK;gBAClB,IAAI,gBAAgB;gBACpB,MAAO,KAAM;oBACX,IAAI,CAAC,IAAI,GAAG,MAAM,YAAY;oBAC9B,IAAI,QAAQ,OAAO,IAAI;oBACvB,IAAI;wBACF,QAAQ,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI;oBACtD,EAAE,OAAO,GAAG;wBACV,IAAI,aAAa,2BAA2B;4BAC1C,IAAI,CAAC,eAAe,CAAC;4BACrB,IAAI,CAAC,OAAO,CAAC;wBACf,OACE,MAAM;oBAEV;oBACA,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,MAAM,GAAG,EAChC,IAAI,CAAC,MAAM,GAAG;oBAEhB,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,YAAY,EAClC,IAAI,CAAC,IAAI,GAAG;oBAEd,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,EAAE;wBAC7B,gBAAgB;wBAChB;oBACF;oBACA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,EAC3B;gBAEJ;gBACA,IAAI,eACF;gBAEF,IAAI,IAAI,CAAC,KAAK,KAAK,MACjB,IAAI,CAAC,IAAI;gBAEX,OAAO,IAAI,CAAC,KAAK;YACnB;QACF,SAAU;YACR,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QACrB;IACF;IACA;;;;;;GAMC,GACD,OAAO;QACL,IAAI,CAAC,IAAI,GAAG,OAAO,IAAI;IACzB;IACA,OAAO;QACL,IAAI,CAAC,IAAI,GAAG,OAAO,IAAI;IACzB;IACA,SAAS,EAAE,EAAE;QACX,IAAI,kBAAkB,KAAK,EACzB,QAAQ,GAAG,CAAC,cAAc;QAE5B,IAAI,CAAC,CAAA,SAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;QAC9B,IAAI,CAAC,IAAI,GAAG;IACd;IACA,UAAU;QACR,IAAI,IAAI,CAAC,CAAA,SAAU,CAAC,MAAM,KAAK,GAC7B,MAAM,IAAI,MAAM;QAElB,IAAI,kBAAkB,KAAK,EACzB,QAAQ,GAAG,CAAC,qBAAqB,IAAI,CAAC,CAAA,SAAU,CAAC,KAAK,CAAC,GAAG;QAE5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA,SAAU,CAAC,GAAG;QAC/B,OAAO,IAAI,CAAC,IAAI;IAClB;IACA,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,CAAA,SAAU;IACxB;IACA;;;;;GAKC,GACD,UAAU,KAAK,EAAE;QACf,IAAI,CAAC,KAAK,GAAG;IACf;IACA;;;;;;GAMC,GACD,OAAO;QACL,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAC3B;YAAC,IAAI;YAAE,IAAI,CAAC,KAAK;SAAC,EAClB,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,CAAA,IAAK,EACV,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,YAAY,KAAK,GACtB,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,kBAAkB;QAEzB,IAAI,CAAC,SAAS,CAAC;QACf,OAAO;IACT;IACA,UAAU;QACR,MAAM,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAC7B;YAAC,IAAI;YAAE,IAAI,CAAC,KAAK;SAAC,EAClB,MAAM,GAAG,EACT,KAAK,GACL,MAAM,eAAe,EACrB,IAAI,CAAC,KAAK,CAAC,KAAK,EAChB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GACnB,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,MAAM;QAEb,IAAI,CAAC,SAAS,CAAC;QACf,OAAO;IACT;IACA,6DAA6D,GAC7D,eAAe;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK;IACzB;IACA;;;GAGC,GACD,eAAe;QACb,MAAM,SAAS,EAAE;QACjB,IAAI,IAAI,IAAI,CAAC,SAAS;QACtB,MAAO,EAAE,IAAI,KAAK,MAAM,GAAG,CAAE;YAC3B,OAAO,IAAI,CAAC;YACZ,IAAI,IAAI,CAAC,SAAS;QACpB;QACA,OAAO;IACT;IACA,gBAAgB,CAAC,EAAE;QACjB,MAAM,QAAQ,IAAI,CAAC,mBAAmB;QACtC,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK;QAC7B,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO;QAChD,MAAM,MAAM,kCAAkC,IAAI,CAAC,eAAe,CAAC,QAAQ;QAC3E,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,kBAAkB,EAAE,KAAK;IAC/G;IACA,gBAAgB,CAAC,EAAE;QACjB,OAAO;IACT;IACA,uBAAuB,CAAC,EAAE;QACxB,IAAI,EAAE,UAAU,CAAC,OAAO,MAAM,GAAG,EAC/B,OAAO;QAET,IAAI,MAAM,MACR,OAAO;QAET,IAAI,MAAM,KACR,OAAO;QAET,IAAI,MAAM,MACR,OAAO;QAET,OAAO;IACT;IACA,oBAAoB,CAAC,EAAE;QACrB,OAAO,MAAM,IAAI,CAAC,sBAAsB,CAAC,KAAK;IAChD;IACA;;;;;GAKC,GACD,QAAQ,EAAE,EAAE;QACV,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,MAAM,GAAG;YAChC,IAAI,cAAc,2BAChB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK;iBAEnC,IAAI,CAAC,KAAK,CAAC,OAAO;;IAGxB;IACA,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,KAAK;IACnB;IACA,IAAI,YAAY,KAAK,EAAE;QACrB,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,KAAK,GAAG;IACf;IACA,IAAI,aAAa,OAAO,EAAE;QACxB,IAAI,CAAC,OAAO,GAAG;IACjB;IACA,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,OAAO;IACrB;IACA,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa;IACjC;IACA,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI;IAC9B;IACA,IAAI,KAAK,IAAI,EAAE;QACb,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG;IAC1B;IACA,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM;IAChC;IACA,IAAI,OAAO,MAAM,EAAE;QACjB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG;IAC5B;IACA,IAAI,OAAO;QACT,IAAI,IAAI,CAAC,CAAA,IAAK,EACZ,OAAO,IAAI,CAAC,CAAA,IAAK;aAEjB,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK;IAE9C;IACA,IAAI,KAAK,IAAI,EAAE;QACb,IAAI,CAAC,CAAA,IAAK,GAAG;IACf;AACF;AAEA,2BAA2B;AAC3B,IAAI,gBAAgB;IAClB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,IAAI;IACJ,WAAW;IACX,YAAY,GAAG,EAAE,UAAU,CAAE;QAC3B,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,UAAU,GAAG;IACpB;IACA,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EACd,OAAO;QAET,IAAI,MAAM;QACV,MAAM,SAAS,IAAI,CAAC,GAAG,CAAC,SAAS;QACjC,KAAK,MAAM,KAAK,OAAQ;YACtB,IAAI,KAAK;YACT,KAAK,EAAE,KAAK,CAAC,MAAM;YACnB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;gBAC3B,MAAM,IAAI,EAAE,KAAK,CAAC,EAAE;gBACpB,IAAI,KAAK,EAAE,WAAW,KAAK,YAAY;oBACrC,OAAO,IAAI,CAAC,cAAc,CAAC;oBAC3B,MAAM,QAAQ,IAAI,CAAC,YAAY,CAAC;oBAChC,OAAO;oBACP,OAAO;oBACP,OAAO;oBACP,OAAO,IAAI,CAAC,cAAc,CAAC;oBAC3B,OAAO;gBACT;YACF;QACF;QACA,OAAO;IACT;IACA,aAAa,CAAC,EAAE;QACd,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI;QAChD,OAAO,GAAG,MAAM;IAClB;IACA,eAAe,CAAC,EAAE;QAChB,MAAM,KAAK,EAAE,WAAW;QACxB,MAAM,eAAe,AAAC,CAAA,EAAE,aAAa,GAAG,MAAM,EAAC,IAAK,MAAM,KAAM,CAAA,EAAE,mBAAmB,GAAG,MAAM,EAAC;QAC/F,IAAI,EAAE,aAAa,EAAE;YACnB,IAAI,EAAE,UAAU,KAAK,MACnB,OAAO,GAAG,aAAa,EAAE,EAAE,EAAE,UAAU,CAAC,QAAQ,IAAI;YAEtD,OAAO,GAAG,aAAa,EAAE,EAAE,EAAE,UAAU,EAAE;QAC3C,OACE,OAAO,GAAG,cAAc;IAE5B;AACF;AAEA,gCAAgC;AAChC,IAAI,qBAAqB,cAAc;IACrC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,GAAG,CAAE;QACf,KAAK,CAAC,KAAK,WAAW,gBAAgB;IACxC;IACA,eAAe,aAAa,GAAG,OAAO,CAAC;QACrC,OAAO,MAAM,OAAO,YAAY,CAAC,KAAK;IACxC,GAAG,gBAAgB;AACrB;AAEA,iBAAiB;AACjB,IAAI,MAAM;IACR,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,GAAG;IACH,SAAS;IACT,iDAAiD,GACjD,cAAc;IACd;;;;;;;;GAQC,GACD,gBAAgB;IAChB;;;GAGC,GACD,SAAS,aAAa,GAAG,IAAI,MAAM;IACnC,YAAY,aAAa,EAAE,QAAQ,CAAE;QACnC,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,QAAQ,GAAG,YAAY;QAC5B,IAAI,gBAAgB;QACpB,IAAI,yBAAyB,oBAC3B;YAAA,IAAI,cAAc,sBAAsB,EAAE;gBACxC,gBAAgB;gBAChB,IAAI,CAAC,EAAE,GAAG,SAAS,SAAS,CAAC;YAC/B;QAAA;QAEF,IAAI,CAAC,eAAe,GAAG;IACzB;IACA,CAAC,OAAO,QAAQ,CAAC,GAAG;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,OAAO,QAAQ,CAAC;IAC9C,EAAE;IACF;;;;;;;;;GASC,GACD,0BAA0B,aAAa,GAAG,OAAO,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,eAAe,EACvB,MAAM,IAAI,MAAM,CAAC,0DAA0D,CAAC;QAE9E,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,aAAa,KAAK,cAAc,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EACpF,OAAO,KAAK;QAEd,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW;IAClC,GAAG,2BAA2B;IAC9B;;;;;GAKC,GACD,0BAA0B,aAAa,GAAG,OAAO,CAAC,YAAY;QAC5D,IAAI,CAAC,IAAI,CAAC,eAAe,EACvB,MAAM,IAAI,MAAM,CAAC,0DAA0D,CAAC;QAE9E,IAAI,aAAa,KAAK,CAAC,IAAI,CAAC,EAAE,EAC5B;QAEF,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,GAAG;IAC9B,GAAG,2BAA2B;IAC9B;;GAEC,GACD,YAAY;QACV,MAAM,SAAS;eAAI,IAAI,CAAC,MAAM,CAAC,MAAM;SAAG;QACxC,OAAO,IAAI,CAAC,CAAC,IAAI;YACf,OAAO,GAAG,WAAW,GAAG,GAAG,WAAW;QACxC;QACA,OAAO;IACT;IACA,SAAS,KAAK,EAAE;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,OAAO,CAAC,QAAQ,OAAO;IACtD;IACA,mBAAmB,OAAO,EAAE;QAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,QAAQ,OAAO;IAChD;IACA,SAAS,KAAK,EAAE;QACd,MAAM,OAAO,MAAM,OAAO,CAAC,QAAQ;QACnC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAClB;QAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM;QACtB,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG;IACzC;IACA,SAAS,UAAU,EAAE;QACnB,IAAI,CAAC,YACH,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,gBAAgB;QAElD,IAAI,CAAC,IAAI,CAAC,EAAE,EACV,OAAO;QAET,MAAM,aAAa,IAAI,cAAc,IAAI,EAAE;QAC3C,OAAO,WAAW,QAAQ,MAAM;IAClC;IACA,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,EAAE,EACV,OAAO;QAET,MAAM,aAAa,IAAI,mBAAmB,IAAI;QAC9C,OAAO,WAAW,QAAQ,MAAM;IAClC;IACA,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI;IACzB;AACF;AAEA,sCAAsC;AACtC,IAAI,2BAA2B,MAAM;IACnC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO;IACP,OAAO;IACP,WAAW;IACX,sBAAsB,KAAK;IAC3B,eAAe;IACf,YAAY,MAAM,EAAE,MAAM,CAAE;QAC1B,IAAI,CAAC,UAAU,GAAG,OAAO,UAAU;QACnC,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,MAAM,GAAG;IAChB;IACA;;;GAGC,GACD,QAAQ,KAAK,EAAE;QACb,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IACtB;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,OAAO,WAAW,UAAU;YAChC,OAAO,WAAW,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM;YAC1C,OAAO,WAAW,oBAAoB,CAAC,MAAM,IAAI,CAAC,MAAM;YACxD,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,MAAM;QAChD;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,CAAE,CAAA,iBAAiB,yBAAwB,GAC7C,OAAO;QAET,OAAO,IAAI,CAAC,MAAM,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,MAAM;IACrE;AACF;AAEA,iCAAiC;AACjC,IAAI,sBAAsB,MAAM;IAC9B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,aAAa;IACb,WAAW;IACX,sBAAsB,MAAM;IAC5B,eAAe;IACf;;;;;;;GAOC,GACD,YAAY,YAAY,CAAE;QACxB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,YAAY,GAAG,gBAAgB,EAAE;QACtC,OAAO,IAAI;IACb;IACA;;;;;;;;;;;;;;GAcC,GACD,OAAO,OAAO,mBAAmB,EAAE,WAAW,EAAE;QAC9C,IAAI,wBAAwB,MAC1B,OAAO,IAAI,qBAAqB;YAAC;SAAY;QAE/C,MAAM,eAAe,oBAAoB,YAAY,CAAC,MAAM,CAAC;YAAC;SAAY;QAC1E,OAAO,IAAI,qBAAqB;IAClC;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,qBAAqB,MAAM,EAAE;QAC3B,IAAI,sBAAsB;QAC1B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAC5C,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,mBAAmB,IAAI,CAAE,CAAA,IAAI,CAAC,YAAY,CAAC,EAAE,YAAY,wBAAuB,GAAI;YAC3G,IAAI,wBAAwB,MAC1B,sBAAsB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;YAEnD,mBAAmB,CAAC,EAAE,GAAG,IAAI,yBAC3B,QACA,IAAI,CAAC,YAAY,CAAC,EAAE;QAExB;QAEF,IAAI,wBAAwB,MAC1B,OAAO,IAAI;aAEX,OAAO,IAAI,qBAAqB;IAEpC;IACA;;;;;;;;;;;;;;;;;;GAkBC,GACD,QAAQ,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE;QAChC,IAAI,UAAU,KAAK,KAAK,eAAe,KAAK,GAC1C;QAEF,IAAI,eAAe;QACnB,MAAM,YAAY,MAAM,KAAK;QAC7B,IAAI;YACF,KAAK,MAAM,eAAe,IAAI,CAAC,YAAY,CAAE;gBAC3C,IAAI,SAAS;gBACb,IAAI,uBAAuB,0BAA0B;oBACnD,MAAM,SAAS,YAAY,MAAM;oBACjC,MAAM,IAAI,CAAC,aAAa;oBACxB,SAAS,YAAY,MAAM;oBAC3B,eAAe,aAAa,WAAW;gBACzC,OAAO,IAAI,YAAY,mBAAmB,EAAE;oBAC1C,MAAM,IAAI,CAAC;oBACX,eAAe;gBACjB;gBACA,OAAO,OAAO,CAAC;YACjB;QACF,SAAU;YACR,IAAI,cACF,MAAM,IAAI,CAAC;QAEf;IACF;IACA,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAClC,IAAI,WAAW,WAAW,UAAU,CAAC;YACrC,KAAK,MAAM,eAAe,IAAI,CAAC,YAAY,CACzC,WAAW,WAAW,MAAM,CAAC,UAAU,YAAY,QAAQ;YAE7D,IAAI,CAAC,cAAc,GAAG,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM;QAC5E;QACA,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA,OAAO,KAAK,EAAE;QACZ,IAAI,IAAI,KAAK,OACX,OAAO;QAET,IAAI,IAAI,CAAC,cAAc,KAAK,MAAM,cAAc,EAC9C,OAAO;QAET,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,MAAM,YAAY,CAAC,MAAM,EACxD,OAAO;QAET,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,QAAQ;YACtC,OAAO,OAAO,MAAM,CAAC,MAAM,YAAY,CAAC,MAAM;QAChD;IACF;AACF;AAEA,6BAA6B;AAC7B,IAAI,iBAAiB,MAAM,wBAAwB;IACjD,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,WAAW,EAAE,CAAC;IACd,SAAS,CAAC,EAAE;QACV,MAAM,UAAU,IAAI,CAAC,IAAI;QACzB,MAAM,SAAS,KAAK,CAAC,SAAS;QAC9B,IAAI,IAAI,CAAC,IAAI,GAAG,SACd,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAErB,OAAO;IACT;IACA,OAAO,CAAC,EAAE;QACR,IAAI,CAAE,CAAA,aAAa,eAAc,GAC/B,OAAO;QAET,OAAO,KAAK,CAAC,OAAO;IACtB;IACA,QAAQ;QACN,KAAK,CAAC;QACN,IAAI,CAAC,QAAQ,GAAG,EAAE;IACpB;IACA,CAAC,CAAC,OAAO,QAAQ,CAAC,GAAG;QACnB,OAAO,IAAI,CAAC,QAAQ;IACtB;IACA,UAAU;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC7B;AACF;AAEA,iCAAiC;AACjC,IAAI,sBAAsB,cAAc;IACtC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,aAAc;QACZ,KAAK;QACL,IAAI,CAAC,YAAY,GAAG,IAAI;IAC1B;AACF;AAEA,+BAA+B;AAC/B,IAAI,oBAAoB,MAAM,2BAA2B;IACvD,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,QAAQ,MAAM;IACrB,cAAc;IACd,aAAa,KAAK;IAClB;;;;;GAKC,GACD,aAAa,GAAG;IAChB,sCAAsC,GACtC,OAAO,EAAE;IACT,4EAA4E,GAC5E,SAAS,EAAE;IACX,OAAO,MAAM,YAAY,CAAC;IAC1B,iFAAiF,GACjF,WAAW;IACX,QAAQ;IACR,gDAAgD,GAChD,sBAAsB;IACtB;;;;;;;;;;;;;;;GAeC,GACD,YAAY,KAAK,EAAE,GAAG,EAAE,aAAa,EAAE,kBAAkB,CAAE;QACzD,KAAK,CAAC,KAAK;QACX,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,OACF,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;aAE5B,IAAI,CAAC,OAAO,GAAG;YACb,YAAY;YACZ,YAAY;YACZ,cAAc;YACd,cAAc;QAChB;IAEJ;IACA,MAAM,KAAK,EAAE,IAAI,EAAE;QACjB,IAAI,CAAC,IAAI,GAAG;QACZ,MAAM,OAAO,MAAM,IAAI;QACvB,IAAI;YACF,IAAI,CAAC,UAAU,GAAG,MAAM,KAAK;YAC7B,IAAI,CAAC,UAAU,GAAG,KAAK;YACvB,MAAM,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK;YACpC,IAAI,CAAC,IAAI,EAAE,EACT,OAAO,IAAI,CAAC,QAAQ,CAAC;YAEvB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE;QACnC,SAAU;YACR,MAAM,OAAO,CAAC;QAChB;IACF;IACA,QAAQ;QACN,IAAI,CAAC,UAAU,GAAG,KAAK;QACvB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,IAAI,GAAG,MAAM,YAAY;IAChC;IACA,WAAW;QACT,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAC7C,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI;IAElE;IACA,OAAO,IAAI,EAAE;QACX,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK;IACjC;IACA,4DAA4D,GAC5D,QAAQ,KAAK,EAAE;QACb,OAAO,MAAM,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,KAAK,GAAG;IAC/D;IACA,QAAQ,KAAK,EAAE;QACb,MAAM,UAAU,MAAM,EAAE,CAAC;QACzB,IAAI,YAAY,KAAK,UAAU,CAAC,IAAI;YAClC,IAAI,CAAC,IAAI,IAAI;YACb,IAAI,CAAC,MAAM,GAAG;QAChB,OACE,IAAI,CAAC,MAAM,IAAI;QAEjB,MAAM,OAAO;IACf;IACA,aAAa,EAAE,EAAE;QACf,IAAI,OAAO,MAAM,GAAG,EAClB,OAAO;aAEP,OAAO,MAAM,OAAO,YAAY,CAAC,MAAM;IAE3C;IACA,SAAS,KAAK,EAAE;QACd,MAAM,aAAa,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;QACvD,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,mBAAmB,IAAI,CAAC,IAAI,GAAG,aAAa;QAE1D,MAAM,UAAU,IAAI,CAAC,IAAI;QACzB,MAAM,YAAY,IAAI,CAAC,iBAAiB,CAAC,OAAO;QAChD,MAAM,eAAe,UAAU,kBAAkB;QACjD,UAAU,kBAAkB,GAAG;QAC/B,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC;QAC9B,IAAI,CAAC,cACH,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG;QAErC,MAAM,UAAU,IAAI,CAAC,OAAO,CAAC,OAAO;QACpC,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,yBAAyB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa;QAEhF,OAAO;IACT;IACA,QAAQ,KAAK,EAAE,KAAK,EAAE;QACpB,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,yBAAyB,MAAM,OAAO;QAEpD,IAAI,MAAM,aAAa,EACrB,IAAI,CAAC,eAAe,CAAC,OAAO;QAE9B,IAAI,IAAI,MAAM,EAAE,CAAC;QACjB,MAAO,KAAM;YACX,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,oCAAoC,MAAM,OAAO;YAE/D,IAAI,SAAS,IAAI,CAAC,sBAAsB,CAAC,OAAO;YAChD,IAAI,CAAC,QACH,SAAS,IAAI,CAAC,kBAAkB,CAAC,OAAO,OAAO;YAEjD,IAAI,WAAW,aAAa,KAAK,EAC/B;YAEF,IAAI,MAAM,MAAM,GAAG,EACjB,IAAI,CAAC,OAAO,CAAC;YAEf,IAAI,OAAO,aAAa,EAAE;gBACxB,IAAI,CAAC,eAAe,CAAC,OAAO;gBAC5B,IAAI,MAAM,MAAM,GAAG,EACjB;YAEJ;YACA,IAAI,MAAM,EAAE,CAAC;YACb,QAAQ;QACV;QACA,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,MAAM,OAAO,EAAE;IACjD;IACA;;;;;;;;;;GAUC,GACD,uBAAuB,CAAC,EAAE,CAAC,EAAE;QAC3B,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;YAChE,MAAM,SAAS,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;YACnD,IAAI,mBAAmB,KAAK,IAAI,QAC9B,QAAQ,GAAG,CAAC,iBAAiB,EAAE,WAAW,GAAG,cAAc,OAAO,WAAW;YAE/E,OAAO;QACT;QACA,OAAO,KAAK;IACd;IACA;;;;;;;;;;GAUC,GACD,mBAAmB,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE;QAC9B,MAAM,QAAQ,IAAI;QAClB,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;QACpD,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,IAAI,CAAC,MAAM,kBAAkB,EAC3B,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,aAAa,KAAK;YAE1C,OAAO,aAAa,KAAK;QAC3B;QACA,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,MAAM;IACrC;IACA,aAAa,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE;QAC5B,IAAI,IAAI,CAAC,UAAU,EAAE,UAAU;YAC7B,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU;YACzD,IAAI,CAAC,MAAM,CAAC,OAAO,SAAS,mBAAmB,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,MAAM;YAC/E,OAAO,SAAS,UAAU;QAC5B;QACA,IAAI,MAAM,MAAM,GAAG,IAAI,MAAM,KAAK,KAAK,IAAI,CAAC,UAAU,EACpD,OAAO,MAAM,GAAG;QAElB,MAAM,IAAI,0BAA0B,IAAI,CAAC,UAAU,EAAE,OAAO,IAAI,CAAC,UAAU,EAAE;IAC/E;IACA;;;GAGC,GACD,sBAAsB,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;QAC9C,IAAI,UAAU,IAAI,kBAAkB;QACpC,KAAK,MAAM,OAAO,QAAS;YACzB,MAAM,+BAA+B,IAAI,GAAG,KAAK;YACjD,IAAI,gCAAgC,IAAI,8BAA8B,EACpE;YAEF,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,sBAAsB,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE;YAExF,KAAK,MAAM,SAAS,IAAI,KAAK,CAAC,WAAW,CAAE;gBACzC,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC,OAAO;gBAC9C,IAAI,QAAQ;oBACV,IAAI,sBAAsB,IAAI,mBAAmB;oBACjD,IAAI,qBACF,sBAAsB,oBAAoB,oBAAoB,CAAC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU;oBAE9F,MAAM,oBAAoB,MAAM,MAAM,GAAG;oBACzC,MAAM,SAAS,eAAe,kBAAkB,CAC9C,KACA,QACA;oBAEF,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,QAAQ,OAAO,8BAA8B,MAAM,oBACzE,UAAU,IAAI,GAAG;gBAErB;YACF;QACF;IACF;IACA,OAAO,KAAK,EAAE,mBAAmB,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;QACnE,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,eAAe;QAE7B,MAAM,IAAI,CAAC;QACX,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,uBAAuB,IAAI,CAAC,UAAU,EACxC,oBAAoB,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO;IAExD;IACA,mBAAmB,KAAK,EAAE,CAAC,EAAE;QAC3B,IAAI,MAAM,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,GACvE,OAAO,MAAM,MAAM;aAEnB,OAAO,KAAK;IAEhB;IACA,kBAAkB,KAAK,EAAE,CAAC,EAAE;QAC1B,MAAM,iBAAiB,uBAAuB,QAAQ;QACtD,MAAM,UAAU,IAAI;QACpB,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,WAAW,CAAC,MAAM,EAAE,IAAK;YAC7C,MAAM,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC,MAAM;YACtC,MAAM,MAAM,eAAe,iBAAiB,CAAC,QAAQ,IAAI,GAAG;YAC5D,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,OAAO,OAAO;QAClD;QACA,OAAO;IACT;IACA;;;;;;;;GAQC,GACD,QAAQ,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,4BAA4B,EAAE,WAAW,EAAE,iBAAiB,EAAE;QAC5F,IAAI,MAAM;QACV,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,aAAa,OAAO,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ;QAEpE,IAAI,OAAO,KAAK,CAAC,WAAW,CAAC,SAAS,KAAK,SAAS,SAAS,EAAE;YAC7D,IAAI,mBAAmB,KAAK;gBAC1B,IAAI,IAAI,CAAC,UAAU,KAAK,MACtB,QAAQ,GAAG,CACT,gCACA,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,KAAK,CAAC,SAAS,CAAC,EACjD;qBAGF,QAAQ,GAAG,CAAC,6BAA6B;;YAG7C,IAAI,CAAC,OAAO,OAAO,IAAI,OAAO,OAAO,CAAC,YAAY;gBAChD,IAAI,CAAC,OAAO,OAAO,IAAI,OAAO,OAAO,CAAC,OAAO,IAAI;oBAC/C,QAAQ,GAAG,CAAC;oBACZ,OAAO;gBACT,OAAO;oBACL,QAAQ,GAAG,CAAC,eAAe,gBAAgB,CAAC,OAAO,KAAK,EAAE,QAAQ,uBAAuB,QAAQ;oBACjG,+BAA+B;gBACjC;;YAEF,IAAI,OAAO,OAAO,IAAI,CAAC,OAAO,OAAO,CAAC,OAAO,IAAI;gBAC/C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,OAAO,CAAC,MAAM,EAAE,IACzC,IAAI,OAAO,OAAO,CAAC,cAAc,CAAC,OAAO,kBAAkB,kBAAkB,EAAE;oBAC7E,MAAM,aAAa,OAAO,OAAO,CAAC,SAAS,CAAC;oBAC5C,MAAM,cAAc,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,OAAO,CAAC,cAAc,CAAC,GAAG;oBACrE,MAAM,eAAe,gBAAgB,CAAC,aAAa,QAAQ;oBAC3D,+BAA+B,IAAI,CAAC,OAAO,CACzC,OACA,KACA,SACA,8BACA,aACA;gBAEJ;YAEJ;YACA,OAAO;QACT;QACA,IAAI,CAAC,OAAO,KAAK,CAAC,sBAAsB,EACtC;YAAA,IAAI,CAAC,gCAAgC,CAAC,OAAO,8BAA8B,EACzE,QAAQ,GAAG,CAAC;QACd;QAEF,KAAK,MAAM,SAAS,OAAO,KAAK,CAAC,WAAW,CAAE;YAC5C,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,QAAQ,OAAO,SAAS,aAAa;YACxE,IAAI,KACF,+BAA+B,IAAI,CAAC,OAAO,CACzC,OACA,KACA,SACA,8BACA,aACA;QAGN;QACA,OAAO;IACT;IACA,oDAAoD;IACpD,iBAAiB,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE;QAC9E,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAC7B,IAAI,CAAC,qBAAqB;QAE5B,MAAM,UAAU,IAAI,CAAC,qBAAqB,CAAC,MAAM,cAAc,CAAC;QAChE,IAAI,CAAC,SACH,OAAO;QAET,OAAO,QAAQ,OAAO,QAAQ,OAAO,SAAS,aAAa;IAC7D;IACA;;;GAGC,GACD,wBAAwB;QACtB,IAAI,CAAC,qBAAqB,GAAG,EAAE;QAC/B,IAAI,CAAC,qBAAqB,CAAC,WAAW,IAAI,CAAC,GAAG,CAAC,OAAO,QAAQ;YAC5D,MAAM,aAAa,iCACjB,OAAO,OAAO,IAAI,KAAK,GACvB,MAAM,WAAW,CAAC,WAAW;YAE/B,OAAO,eAAe,gBAAgB,CAAC,MAAM,MAAM,EAAE,QAAQ;QAC/D;QACA,IAAI,CAAC,qBAAqB,CAAC,WAAW,UAAU,CAAC,GAAG;YAClD,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,qBAAqB,CAAC,WAAW,SAAS,CAAC,GAAG,CAAC,OAAO,QAAQ,OAAO,SAAS;YACjF,MAAM,KAAK;YACX,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,eAAe,GAAG,SAAS,GAAG,MAAM,GAAG,SAAS;YAE9D,QAAQ,kBAAkB,GAAG;YAC7B,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,GAAG,SAAS,EAAE,GAAG,SAAS,EAAE,cAC5D,OAAO,eAAe,gBAAgB,CAAC,MAAM,MAAM,EAAE;YAEvD,OAAO;QACT;QACA,IAAI,CAAC,qBAAqB,CAAC,WAAW,MAAM,CAAC,GAAG,CAAC,OAAO,QAAQ;YAC9D,IAAI,OAAO,OAAO,KAAK,QAAQ,OAAO,OAAO,CAAC,YAAY,IAAI;gBAC5D,MAAM,sBAAsB,oBAAoB,MAAM,CACpD,OAAO,mBAAmB,EAC1B,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,WAAW,CAAC;gBAE1C,OAAO,eAAe,kBAAkB,CAAC,QAAQ,MAAM,MAAM,EAAE;YACjE,OACE,OAAO,eAAe,gBAAgB,CAAC,MAAM,MAAM,EAAE;QAEzD;QACA,IAAI,CAAC,qBAAqB,CAAC,WAAW,OAAO,CAAC,GAAG,CAAC,OAAO,QAAQ;YAC/D,OAAO,eAAe,gBAAgB,CAAC,MAAM,MAAM,EAAE;QACvD;QACA,MAAM,SAAS,aAAa,GAAG,OAAO,CAAC,OAAO,QAAQ,OAAO,SAAS,aAAa;YACjF,IAAI,mBAAmB;gBACrB,IAAI,MAAM,OAAO,CAAC,MAAM,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,GAC/E,OAAO,eAAe,gBAAgB,CAAC,MAAM,MAAM,EAAE;YAEzD;YACA,OAAO;QACT,GAAG;QACH,IAAI,CAAC,qBAAqB,CAAC,WAAW,IAAI,CAAC,GAAG;QAC9C,IAAI,CAAC,qBAAqB,CAAC,WAAW,KAAK,CAAC,GAAG;QAC/C,IAAI,CAAC,qBAAqB,CAAC,WAAW,GAAG,CAAC,GAAG;IAC/C;IACA;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,kBAAkB,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE;QAC1D,IAAI,CAAC,IAAI,CAAC,UAAU,EAClB,OAAO;QAET,IAAI,CAAC,aACH,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,WAAW;QAElD,MAAM,cAAc,IAAI,CAAC,MAAM;QAC/B,MAAM,YAAY,IAAI,CAAC,IAAI;QAC3B,MAAM,QAAQ,MAAM,KAAK;QACzB,MAAM,SAAS,MAAM,IAAI;QACzB,IAAI;YACF,IAAI,CAAC,OAAO,CAAC;YACb,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,WAAW;QAClD,SAAU;YACR,IAAI,CAAC,MAAM,GAAG;YACd,IAAI,CAAC,IAAI,GAAG;YACZ,MAAM,IAAI,CAAC;YACX,MAAM,OAAO,CAAC;QAChB;IACF;IACA,gBAAgB,KAAK,EAAE,QAAQ,EAAE;QAC/B,IAAI,CAAC,UAAU,GAAG;YAChB,OAAO,MAAM,KAAK;YAClB,MAAM,IAAI,CAAC,IAAI;YACf,QAAQ,IAAI,CAAC,MAAM;YACnB;QACF;IACF;IACA,WAAW,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE;QAChC,IAAI,CAAC,MAAM,SAAS;YAClB,MAAM,eAAe,QAAQ,kBAAkB;YAC/C,QAAQ,kBAAkB,GAAG;YAC7B,KAAK,IAAI,CAAC,WAAW,CAAC;YACtB,IAAI,cACF,OAAO;QAEX;QACA,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,UAAU,EAC9D,OAAO;QAET,IAAI,mBAAmB,KAAK,EAC1B,QAAQ,GAAG,CAAC,UAAU,OAAO,SAAS,KAAK,WAAW;QAExD,KAAK,KAAK,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG;QAC3C,OAAO;IACT;IACA;;;;GAIC,GACD,YAAY,OAAO,EAAE;QACnB,MAAM,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;QACzC,MAAM,WAAW,IAAI,kBAAkB,CAAC;QACxC,IAAI,UACF,OAAO;QAET,MAAM,WAAW,SAAS,WAAW,CAAC;QACtC,MAAM,+BAA+B,QAAQ,cAAc;QAC3D,IAAI,8BAA8B;YAChC,SAAS,aAAa,GAAG;YACzB,SAAS,mBAAmB,GAAG,6BAA6B,mBAAmB;YAC/E,SAAS,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,6BAA6B,KAAK,CAAC,SAAS,CAAC;QAC9F;QACA,QAAQ,WAAW,CAAC;QACpB,IAAI,QAAQ,CAAC;QACb,OAAO;IACT;AACF;AAEA,uBAAuB;AACvB,IAAI,YAAY;IACd,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,aAAa;IACb,YAAY,YAAY,CAAE;QACxB,IAAI,CAAC,YAAY,GAAG;IACtB;IACA;;;;;;GAMC,GACD,kBAAkB;QAChB,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe;IAC1C;IACA;;;;;;;GAOC,GACD,iBAAiB;QACf,MAAM,YAAY,IAAI,CAAC,YAAY,CAAC,eAAe;QACnD,MAAM,SAAS,IAAI;QACnB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;YACzC,MAAM,WAAW,SAAS,CAAC,EAAE,CAAC,UAAU;YACxC,IAAI,WAAW,GACb,OAAO,IAAI,CAAC;QAEhB;QACA,OAAO;IACT;IACA;;;;GAIC,GACD,2BAA2B;QACzB,MAAM,YAAY,IAAI,CAAC,YAAY,CAAC,eAAe;QACnD,IAAI,IAAI;QACR,KAAK,MAAM,YAAY,UACrB,KAAK,SAAS,gBAAgB;QAEhC,OAAO;IACT;IACA;;;;GAIC,GACD,0BAA0B;QACxB,MAAM,YAAY,IAAI,CAAC,YAAY,CAAC,eAAe;QACnD,IAAI,IAAI;QACR,KAAK,MAAM,YAAY,UACrB,KAAK,SAAS,YAAY;QAE5B,OAAO;IACT;IACA;;;;GAIC,GACD,yBAAyB;QACvB,MAAM,YAAY,IAAI,CAAC,YAAY,CAAC,eAAe;QACnD,IAAI,IAAI;QACR,KAAK,MAAM,YAAY,UACrB,KAAK,SAAS,WAAW;QAE3B,OAAO;IACT;IACA;;;GAGC,GACD,6BAA6B;QAC3B,MAAM,YAAY,IAAI,CAAC,YAAY,CAAC,eAAe;QACnD,IAAI,IAAI;QACR,KAAK,MAAM,YAAY,UACrB,KAAK,SAAS,iBAAiB;QAEjC,OAAO;IACT;IACA;;;GAGC,GACD,4BAA4B;QAC1B,MAAM,YAAY,IAAI,CAAC,YAAY,CAAC,eAAe;QACnD,IAAI,IAAI;QACR,KAAK,MAAM,YAAY,UACrB,KAAK,SAAS,gBAAgB;QAEhC,OAAO;IACT;IACA;;;;;;;GAOC,GACD,0BAA0B;QACxB,MAAM,YAAY,IAAI,CAAC,YAAY,CAAC,eAAe;QACnD,IAAI,IAAI;QACR,KAAK,MAAM,YAAY,UAAW;YAChC,KAAK,SAAS,iBAAiB;YAC/B,KAAK,SAAS,gBAAgB;QAChC;QACA,OAAO;IACT;IACA,WAAW,QAAQ,EAAE;QACnB,IAAI,aAAa,KAAK,GAAG;YACvB,IAAI,KAAK;YACT,MAAM,gBAAgB,IAAI,CAAC,YAAY,CAAC,aAAa;YACrD,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,MAAM,EAAE,IACxC,MAAM,IAAI,CAAC,UAAU,CAAC;YAExB,OAAO;QACT,OAAO;YACL,MAAM,gBAAgB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,SAAS;YAC/D,OAAO,cAAc,MAAM;QAC7B;IACF;AACF;AAEA,8BAA8B;AAC9B,IAAI,uBAAuB,cAAc;IACvC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,sFAAsF,GACtF,iBAAiB,KAAK;IACtB;;;;;GAKC,GACD,WAAW;IACX,YAAY,UAAU,EAAE,QAAQ,IAAI,EAAE,aAAa,IAAI,EAAE,iBAAiB,IAAI,EAAE,iBAAiB,IAAI,EAAE,MAAM,IAAI,CAAE;QACjH,MAAM,OAAO,WAAW,OAAO;QAC/B,iBAAiB,kBAAkB,WAAW,eAAe;QAC7D,aAAa,cAAc,WAAW,eAAe;QACrD,QAAQ,SAAS,WAAW,WAAW;QACvC,KAAK,CAAC;YAAE,SAAS;YAAI;YAAY;YAAO;QAAI;QAC5C,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,cAAc,GAAG;IACxB;AACF;AAEA,0BAA0B;AAC1B,IAAI,aAAa;IACf,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,SAAS;IACT,aAAc;QACZ,IAAI,CAAC,QAAQ,GAAG,IAAI;IACtB;IACA,IAAI,CAAC,EAAE,CAAC,EAAE;QACR,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM;QAClC,OAAO,MAAM,OAAO,OAAO,EAAE,GAAG,CAAC,MAAM;IACzC;IACA,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;QACX,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC1B,IAAI,CAAC,GAAG;YACN,IAAI,IAAI;YACR,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG;QACvB;QACA,EAAE,GAAG,CAAC,GAAG;IACX;AACF;AAEA,4BAA4B;AAC5B,IAAI,yBAAyB,MAAM;IACjC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,WAAW,IAAI,0BAA0B;IAChD,SAAS,MAAM,EAAE;QACf,IAAI,WAAW,WAAW,UAAU,CAAC;QACrC,WAAW,WAAW,MAAM,CAAC,UAAU,OAAO,KAAK,CAAC,WAAW;QAC/D,WAAW,WAAW,oBAAoB,CAAC,UAAU,OAAO,OAAO;QACnE,WAAW,WAAW,MAAM,CAAC,UAAU;QACvC,OAAO;IACT;IACA,OAAO,CAAC,EAAE,CAAC,EAAE;QACX,OAAO,EAAE,KAAK,CAAC,WAAW,KAAK,EAAE,KAAK,CAAC,WAAW,IAAK,CAAA,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,KAAK,IAAG;IAC5F;AACF;AACA,IAAI,iBAAiB,MAAM;IACzB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,EAAE;IACf;;;;;;;;;;;;;;;;;GAiBC,GACD,OAAO,KAAK,EAAE;IACd;;;;;;;;;;;;;;;;;GAiBC,GACD,OAAO,2BAA2B,EAAE;IACpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0FC,GACD,OAAO,oCAAoC,IAAI,EAAE,OAAO,EAAE;QACxD,IAAI,gBAAgB,0BAA0B,CAAC,UAC7C,OAAO;QAET,IAAI,SAAS,gBAAgB,GAAG,EAC9B;YAAA,IAAI,QAAQ,kBAAkB,EAAE;gBAC9B,MAAM,MAAM,IAAI;gBAChB,KAAK,IAAI,KAAK,QAAS;oBACrB,IAAI,UAAU,SAAS,CAAC,GAAG,gBAAgB,IAAI;oBAC/C,IAAI,GAAG,CAAC;gBACV;gBACA,UAAU;YACZ;QAAA;QAEF,MAAM,UAAU,gBAAgB,wBAAwB,CAAC;QACzD,OAAO,gBAAgB,oBAAoB,CAAC,YAAY,CAAC,gBAAgB,4BAA4B,CAAC;IACxG;IACA;;;;;;;;;GASC,GACD,OAAO,yBAAyB,OAAO,EAAE;QACvC,KAAK,MAAM,KAAK,QAAS;YACvB,IAAI,EAAE,KAAK,YAAY,eACrB,OAAO;QAEX;QACA,OAAO;IACT;IACA;;;;;;;;;GASC,GACD,OAAO,2BAA2B,OAAO,EAAE;QACzC,KAAK,MAAM,KAAK,QAAS;YACvB,IAAI,CAAE,CAAA,EAAE,KAAK,YAAY,aAAY,GACnC,OAAO;QAEX;QACA,OAAO;IACT;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4GC,GACD,OAAO,2BAA2B,OAAO,EAAE;QACzC,OAAO,gBAAgB,kBAAkB,CAAC;IAC5C;IACA;;;;;;;GAOC,GACD,OAAO,mBAAmB,OAAO,EAAE;QACjC,OAAO,CAAC,gBAAgB,uBAAuB,CAAC;IAClD;IACA;;;;;;;GAOC,GACD,OAAO,wBAAwB,OAAO,EAAE;QACtC,KAAK,MAAM,QAAQ,QAAS;YAC1B,IAAI,KAAK,MAAM,KAAK,GAClB,OAAO;QAEX;QACA,OAAO;IACT;IACA;;;;;;;GAOC,GACD,OAAO,qBAAqB,OAAO,EAAE;QACnC,KAAK,MAAM,QAAQ,QAAS;YAC1B,IAAI,KAAK,MAAM,GAAG,GAChB,OAAO;QAEX;QACA,OAAO;IACT;IACA;;;;;;GAMC,GACD,OAAO,gBAAgB,OAAO,EAAE;QAC9B,IAAI,QAAQ;QACZ,KAAK,MAAM,QAAQ,QAAS;YAC1B,IAAI,UAAU,MACZ,QAAQ;iBACH,IAAI,SAAS,OAClB,OAAO;QAEX;QACA,OAAO;IACT;IACA;;;;;;GAMC,GACD,OAAO,aAAa,OAAO,EAAE;QAC3B,MAAM,MAAM,gBAAgB,OAAO,CAAC;QACpC,IAAI,IAAI,MAAM,KAAK,GACjB,OAAO,IAAI,UAAU,CAAC;aAEtB,OAAO,IAAI,kBAAkB;IAEjC;IACA;;;;;;;GAOC,GACD,OAAO,QAAQ,OAAO,EAAE;QACtB,MAAM,MAAM,IAAI;QAChB,QAAQ,OAAO,CAAC,CAAC;YACf,IAAI,EAAE,CAAC;QACT;QACA,OAAO;IACT;IACA;;;;;;;;GAQC,GACD,OAAO,yBAAyB,OAAO,EAAE;QACvC,MAAM,eAAe,IAAI,QAAQ,uBAAuB,QAAQ;QAChE,KAAK,MAAM,OAAO,QAAS;YACzB,IAAI,OAAO,aAAa,GAAG,CAAC;YAC5B,IAAI,CAAC,MAAM;gBACT,OAAO,IAAI;gBACX,aAAa,GAAG,CAAC,KAAK;YACxB;YACA,KAAK,GAAG,CAAC,IAAI,GAAG;QAClB;QACA,OAAO,MAAM,IAAI,CAAC,aAAa,MAAM;IACvC;IACA;;;;;;GAMC,GACD,OAAO,iBAAiB,OAAO,EAAE;QAC/B,MAAM,KAAK,IAAI,QAAQ,yBAAyB,QAAQ;QACxD,KAAK,MAAM,KAAK,QAAS;YACvB,IAAI,OAAO,GAAG,GAAG,CAAC,EAAE,KAAK;YACzB,IAAI,CAAC,MAAM;gBACT,OAAO,IAAI;gBACX,GAAG,GAAG,CAAC,EAAE,KAAK,EAAE;YAClB;YACA,KAAK,GAAG,CAAC,EAAE,GAAG;QAChB;QACA,OAAO;IACT;IACA,OAAO,6BAA6B,OAAO,EAAE;QAC3C,MAAM,SAAS,CAAC;QAChB,KAAK,MAAM,KAAK,QAAS;YACvB,MAAM,cAAc,EAAE,KAAK,CAAC,WAAW;YACvC,IAAI,CAAC,MAAM,CAAC,YAAY,EACtB,MAAM,CAAC,YAAY,GAAG;YAExB,MAAM,CAAC,YAAY;QACrB;QACA,OAAO,OAAO,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC;YACjC,OAAO,UAAU;QACnB;IACF;IACA,OAAO,mBAAmB,OAAO,EAAE;QACjC,IAAI,SAAS;QACb,KAAK,MAAM,QAAQ,QAAS;YAC1B,MAAM,SAAS,KAAK,UAAU,CAAC;YAC/B,IAAI,WAAW,MACb,SAAS;iBACJ,IAAI,WAAW,QACpB,OAAO,IAAI,kBAAkB;QAEjC;QACA,OAAO,UAAU;IACnB;AACF;AAEA,gCAAgC;AAChC,IAAI,qBAAqB,MAAM,4BAA4B;IACzD,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,oBAAoB,MAAM;IACjC,OAAO,MAAM;IACb,OAAO,WAAW,MAAM;IACxB,OAAO,eAAe,MAAM;IAC5B,OAAO,WAAW,MAAM;IACxB,OAAO,aAAa,MAAM;IAC1B,4CAA4C,GAC5C,eAAe;IACf,cAAc;IACd,OAAO;IACP;;;;;;;;GAQC,GACD,aAAa,IAAI,aAAa;IAC9B,4CAA4C;IAC5C,gBAAgB;IAChB,YAAY,KAAK,EAAE,GAAG,EAAE,aAAa,EAAE,kBAAkB,CAAE;QACzD,KAAK,CAAC,KAAK;QACX,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,aAAa,GAAG;IACvB;IACA,OAAO,aAAa,OAAO,EAAE;QAC3B,IAAI,MAAM,IAAI,kBAAkB;QAChC,KAAK,MAAM,KAAK,QAAS;YACvB,IAAI,QAAQ,IAAI,kBAAkB,EAChC,MAAM,EAAE,GAAG;iBACN,IAAI,EAAE,GAAG,KAAK,KACnB,OAAO,IAAI,kBAAkB;QAEjC;QACA,OAAO;IACT;IACA,QAAQ,CACR;IACA,WAAW;QACT,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAC7C,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI;IAElE;IACA,oEAAoE;IACpE,gBAAgB,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE;QAC7C,IAAI,oBAAoB,KAAK,IAAI,oBAAoB,iBAAiB,EACpE,QAAQ,GAAG,CAAC,8BAA8B,WAAW,kBAAkB,IAAI,CAAC,gBAAgB,CAAC,SAAS,WAAW,MAAM,EAAE,CAAC,GAAG,IAAI,GAAG,MAAM,MAAM,EAAE,CAAC,GAAG,MAAM;QAE9J,MAAM,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS;QACxC,IAAI,CAAC,eAAe,GAAG;YACrB;YACA,YAAY,MAAM,KAAK;YACvB,cAAc,gBAAgB,KAAK;YACnC;QACF;QACA,MAAM,KAAK,MAAM,IAAI;QACrB,MAAM,QAAQ,MAAM,KAAK;QACzB,IAAI;YACF,IAAI;YACJ,IAAI,IAAI,eAAe,EACrB,KAAK,IAAI,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa;iBAE1D,KAAK,IAAI,EAAE;YAEb,IAAI,CAAC,IAAI;gBACP,IAAI,CAAC,cACH,eAAe,kBAAkB,KAAK;gBAExC,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,yBAAyB,IAAI,QAAQ,GAAG,kBAAkB,IAAI,CAAC,gBAAgB,CAAC,SAAS,oBAAoB,aAAa,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS;gBAEtK,MAAM,UAAU;gBAChB,IAAI,aAAa,IAAI,CAAC,iBAAiB,CAAC,IAAI,aAAa,EAAE,kBAAkB,KAAK,EAAE;gBACpF,IAAI,IAAI,eAAe,EAAE;oBACvB,aAAa,IAAI,CAAC,qBAAqB,CAAC;oBACxC,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,SAAS,WAAW,CAAC;oBAChD,IAAI,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI;gBAC3D,OAAO;oBACL,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,SAAS,WAAW,CAAC;oBAChD,IAAI,EAAE,GAAG;gBACX;YACF;YACA,MAAM,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,OAAO;YAChD,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,2BAA2B,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU;YAE5E,OAAO;QACT,SAAU;YACR,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,KAAK;YAChC,IAAI,CAAC,UAAU,GAAG,IAAI;YACtB,MAAM,IAAI,CAAC;YACX,MAAM,OAAO,CAAC;QAChB;IACF;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BC,GACD,QAAQ,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE;QAChD,IAAI,oBAAoB,KAAK,IAAI,oBAAoB,iBAAiB,EACpE,QAAQ,GAAG,CAAC,sBAAsB,IAAI,QAAQ,GAAG,iBAAiB,KAAK,cAAc,IAAI,CAAC,gBAAgB,CAAC,SAAS,WAAW,MAAM,EAAE,CAAC,GAAG,IAAI,GAAG,MAAM,MAAM,EAAE,CAAC,GAAG,MAAM;QAE5K,IAAI;QACJ,IAAI,gBAAgB;QACpB,IAAI,IAAI,MAAM,EAAE,CAAC;QACjB,MAAO,KAAM;YACX,IAAI,YAAY,IAAI,CAAC,sBAAsB,CAAC,eAAe;YAC3D,IAAI,CAAC,WACH,YAAY,IAAI,CAAC,kBAAkB,CAAC,KAAK,eAAe;YAE1D,IAAI,cAAc,aAAa,KAAK,EAAE;gBACpC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,cAAc,cAAc,OAAO,EAAE;gBACvE,MAAM,IAAI,CAAC;gBACX,MAAM,IAAI,CAAC,uDAAuD,CAAC,cAAc,OAAO,EAAE;gBAC1F,IAAI,QAAQ,IAAI,kBAAkB,EAChC,OAAO;qBAEP,MAAM;YAEV;YACA,IAAI,UAAU,mBAAmB,IAAI,IAAI,CAAC,cAAc,KAAK,eAAe,GAAG,EAAE;gBAC/E,IAAI,kBAAkB;gBACtB,IAAI,UAAU,UAAU,KAAK,MAAM;oBACjC,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC;oBAEd,MAAM,gBAAgB,MAAM,KAAK;oBACjC,IAAI,kBAAkB,YACpB,MAAM,IAAI,CAAC;oBAEb,kBAAkB,IAAI,CAAC,mBAAmB,CAAC,UAAU,UAAU,EAAE,cAAc;oBAC/E,IAAI,gBAAgB,MAAM,KAAK,GAAG;wBAChC,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC;wBAEd,OAAO,gBAAgB,UAAU,CAAC;oBACpC;oBACA,IAAI,kBAAkB,YACpB,MAAM,IAAI,CAAC;gBAEf;gBACA,IAAI,oBAAoB,QAAQ,EAC9B,QAAQ,GAAG,CAAC,yBAAyB,eAAe,SAAS;gBAE/D,MAAM,UAAU;gBAChB,MAAM,aAAa,IAAI,CAAC,iBAAiB,CAAC,IAAI,aAAa,EAAE,cAAc;gBAC3E,IAAI,CAAC,2BAA2B,CAAC,KAAK,iBAAiB,UAAU,OAAO,EAAE,YAAY,MAAM,KAAK;gBACjG,MAAM,IAAI,CAAC,sBAAsB,CAAC,KAAK,WAAW,YAAY,OAAO,YAAY;gBACjF,OAAO;YACT;YACA,IAAI,UAAU,aAAa,EAAE;gBAC3B,IAAI,UAAU,UAAU,KAAK,MAC3B,OAAO,UAAU,UAAU;gBAE7B,MAAM,YAAY,MAAM,KAAK;gBAC7B,MAAM,IAAI,CAAC;gBACX,MAAM,OAAO,IAAI,CAAC,mBAAmB,CAAC,UAAU,UAAU,EAAE,cAAc;gBAC1E,IAAI,KAAK,MAAM,KAAK,GAClB,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,cAAc,UAAU,OAAO,EAAE;gBAEjE,IAAI,KAAK,MAAM,KAAK,GAClB,OAAO,KAAK,UAAU,CAAC;gBAEzB,IAAI,CAAC,eAAe,CAAC,KAAK,WAAW,YAAY,WAAW,OAAO,MAAM,UAAU,OAAO;gBAC1F,OAAO,KAAK,UAAU,CAAC;YACzB;YACA,gBAAgB;YAChB,IAAI,MAAM,MAAM,GAAG,EAAE;gBACnB,MAAM,OAAO;gBACb,IAAI,MAAM,EAAE,CAAC;YACf;QACF;IACF;IACA;;;;;;;;;;GAUC,GACD,uBAAuB,SAAS,EAAE,CAAC,EAAE;QACnC,OAAO,UAAU,KAAK,CAAC,IAAI,EAAE;IAC/B;IACA;;;;;;;;;;;GAWC,GACD,mBAAmB,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE;QACpC,MAAM,QAAQ,IAAI,CAAC,eAAe,CAAC,UAAU,OAAO,EAAE,GAAG;QACzD,IAAI,UAAU,MAAM;YAClB,IAAI,CAAC,UAAU,CAAC,KAAK,WAAW,GAAG,aAAa,KAAK;YACrD,OAAO,aAAa,KAAK;QAC3B;QACA,IAAI,IAAI,SAAS,WAAW,CAAC;QAC7B,MAAM,eAAe,oBAAoB,YAAY,CAAC;QACtD,IAAI,oBAAoB,KAAK,EAAE;YAC7B,MAAM,aAAa,eAAe,wBAAwB,CAAC;YAC3D,QAAQ,GAAG,CAAC,oBAAoB,cAAc,cAAc,sCAAsC,GAClG,eAAe,QAAQ,eAAe,eAAe,0BAA0B,eAAe,kBAAkB,CAAC,cAAc,uBAAuB,IAAI,CAAC,kBAAkB,CAAC;QAChL;QACA,IAAI,iBAAiB,IAAI,kBAAkB,EAAE;YAC3C,EAAE,aAAa,GAAG;YAClB,EAAE,OAAO,CAAC,SAAS,GAAG;YACtB,EAAE,UAAU,GAAG;QACjB,OAAO,IAAI,eAAe,mCAAmC,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ;YACzF,EAAE,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC;YACpD,EAAE,mBAAmB,GAAG;YACxB,EAAE,aAAa,GAAG;YAClB,EAAE,UAAU,GAAG,EAAE,OAAO,CAAC,eAAe,CAAC,UAAU,CAAC;QACtD;QACA,IAAI,EAAE,aAAa,IAAI,EAAE,OAAO,CAAC,kBAAkB,EAAE;YACnD,IAAI,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,QAAQ;YAChE,IAAI,EAAE,UAAU,KAAK,MACnB,EAAE,UAAU,GAAG,IAAI,kBAAkB;QAEzC;QACA,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,WAAW,GAAG;QACvC,OAAO;IACT;IACA,YAAY,KAAK,EAAE;QACjB,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ,SAAS,GACnC,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM;aAEnC,OAAO,WAAW,QAAQ;IAE9B;IACA,aAAa,CAAC,EAAE;QACd,IAAI,MAAM,MAAM,GAAG,EACjB,OAAO;QAET,MAAM,aAAa,IAAI,CAAC,MAAM,EAAE,cAAc,WAAW,gBAAgB;QACzE,MAAM,cAAc,WAAW,cAAc,CAAC;QAC9C,IAAI,gBAAgB,EAAE,QAAQ,IAC5B,OAAO;QAET,OAAO,cAAc,MAAM,IAAI;IACjC;IACA,iBAAiB,KAAK,EAAE;QACtB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IACpC;IACA;;;;GAIC,GACD,mBAAmB,CAAC,EAAE;QACpB,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,EAAE,cAAc;QAC7B,KAAK,MAAM,KAAK,KAAM;YACpB,IAAI,QAAQ;YACZ,IAAI,EAAE,KAAK,CAAC,WAAW,CAAC,MAAM,GAAG,GAAG;gBAClC,MAAM,IAAI,EAAE,KAAK,CAAC,WAAW,CAAC,EAAE;gBAChC,IAAI,aAAa,gBACf,QAAQ,UAAU,IAAI,CAAC,YAAY,CAAC,EAAE,UAAU;qBAC3C,IAAI,aAAa,eAAe;oBACrC,MAAM,MAAM,aAAa;oBACzB,QAAQ,AAAC,CAAA,MAAM,MAAM,EAAC,IAAK,SAAS,EAAE,KAAK;gBAC7C;YACF;YACA,QAAQ,KAAK,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,MAAM;QACtD;IACF;IACA,kBAAkB,QAAQ,EAAE,aAAa,EAAE;QACzC,MAAM,WAAW,cAAc,WAAW,CAAC,MAAM;QACjD,MAAM,yBAAyB,IAAI,CAAC,6BAA6B,CAAC,SAAS,OAAO;QAClF,MAAM,YAAY,IAAI,CAAC,oBAAoB,CAAC,wBAAwB,SAAS,OAAO,EAAE;QACtF,IAAI,cAAc,MAAM;YACtB,SAAS,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,wBAAwB;YAC3E,SAAS,UAAU,GAAG,IAAI,kBAAkB;QAC9C,OACE,SAAS,UAAU,GAAG,uBAAuB,UAAU,CAAC;IAE5D;IACA,qDAAqD;IACrD,uBAAuB,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE;QAClE,IAAI,oBAAoB,KAAK,IAAI,oBAAoB,iBAAiB,EACpE,QAAQ,GAAG,CAAC,4BAA4B;QAE1C,MAAM,UAAU;QAChB,IAAI,kBAAkB;QACtB,IAAI;QACJ,IAAI,WAAW;QACf,MAAM,IAAI,CAAC;QACX,IAAI,IAAI,MAAM,EAAE,CAAC;QACjB,IAAI,eAAe;QACnB,OAAW;YACT,QAAQ,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG;YAC1C,IAAI,UAAU,MAAM;gBAClB,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,cAAc,UAAU;gBAC1D,MAAM,IAAI,CAAC;gBACX,MAAM,MAAM,IAAI,CAAC,uDAAuD,CAAC,UAAU;gBACnF,IAAI,QAAQ,IAAI,kBAAkB,EAChC,OAAO;qBAEP,MAAM;YAEV;YACA,MAAM,aAAa,eAAe,wBAAwB,CAAC;YAC3D,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,mBAAmB,aAAa,eAAe,eAAe,YAAY,CAAC,cAAc,kCAAkC,eAAe,0BAA0B,CAAC;YAEnL,MAAM,SAAS,GAAG,oBAAoB,YAAY,CAAC;YACnD,IAAI,MAAM,SAAS,KAAK,IAAI,kBAAkB,EAAE;gBAC9C,eAAe,MAAM,SAAS;gBAC9B;YACF,OAAO,IAAI,IAAI,CAAC,cAAc,KAAK,eAAe,wBAAwB,EAAE;gBAC1E,eAAe,eAAe,0BAA0B,CAAC;gBACzD,IAAI,iBAAiB,IAAI,kBAAkB,EACzC;YAEJ,OACE,IAAI,eAAe,kBAAkB,CAAC,eAAe,eAAe,eAAe,CAAC,aAAa;gBAC/F,kBAAkB;gBAClB,eAAe,eAAe,kBAAkB,CAAC;gBACjD;YACF;YAEF,WAAW;YACX,IAAI,MAAM,MAAM,GAAG,EAAE;gBACnB,MAAM,OAAO;gBACb,IAAI,MAAM,EAAE,CAAC;YACf;QACF;QACA,IAAI,MAAM,SAAS,KAAK,IAAI,kBAAkB,EAAE;YAC9C,IAAI,CAAC,wBAAwB,CAAC,KAAK,cAAc,OAAO,YAAY,MAAM,KAAK;YAC/E,OAAO;QACT;QACA,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,YAAY,MAAM,KAAK,EAAE,iBAAiB,MAAM,OAAO,IAAI;QACxF,OAAO;IACT;IACA,gBAAgB,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE;QACnC,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,2CAA2C;QAEzD,MAAM,eAAe,IAAI,aAAa;QACtC,IAAI,oBAAoB;QACxB,KAAK,MAAM,KAAK,QAAS;YACvB,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,aAAa,IAAI,CAAC,YAAY,CAAC,KAAK,SAAS;YAE3D,IAAI,EAAE,KAAK,YAAY,eAAe;gBACpC,IAAI,WAAW,MAAM,MAAM,GAAG,EAAE;oBAC9B,IAAI,sBAAsB,MACxB,oBAAoB,EAAE;oBAExB,kBAAkB,IAAI,CAAC;gBACzB;gBACA;YACF;YACA,KAAK,MAAM,SAAS,EAAE,KAAK,CAAC,WAAW,CAAE;gBACvC,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC,OAAO;gBAC9C,IAAI,WAAW,MAAM;oBACnB,MAAM,MAAM,UAAU,gBAAgB,CAAC,QAAQ;oBAC/C,aAAa,GAAG,CAAC,KAAK,IAAI,CAAC,UAAU;oBACrC,IAAI,oBAAoB,QAAQ,EAC9B,QAAQ,GAAG,CAAC,WAAW,MAAM;gBAEjC;YACF;QACF;QACA,IAAI,QAAQ;QACZ,IAAI,sBAAsB,QAAQ,MAAM,MAAM,GAAG,EAAE;YACjD,IAAI,aAAa,MAAM,KAAK,GAC1B,QAAQ;iBACH,IAAI,oBAAoB,YAAY,CAAC,kBAAkB,IAAI,kBAAkB,EAClF,QAAQ;QAEZ;QACA,IAAI,UAAU,MAAM;YAClB,QAAQ,IAAI,aAAa;YACzB,MAAM,cAAc,IAAI;YACxB,MAAM,oBAAoB,MAAM,MAAM,GAAG;YACzC,KAAK,MAAM,UAAU,aACnB,IAAI,CAAC,OAAO,CAAC,QAAQ,OAAO,aAAa,OAAO,SAAS;QAE7D;QACA,IAAI,MAAM,MAAM,GAAG,EACjB,QAAQ,IAAI,CAAC,kCAAkC,CAAC,OAAO,UAAU;QAEnE,IAAI,sBAAsB,QAAS,CAAA,CAAC,WAAW,CAAC,eAAe,wBAAwB,CAAC,MAAK,GAC3F,KAAK,MAAM,UAAU,kBACnB,MAAM,GAAG,CAAC,QAAQ,IAAI,CAAC,UAAU;QAGrC,IAAI,oBAAoB,iBAAiB,EACvC,QAAQ,GAAG,CAAC,qBAAqB,UAAU,SAAS;QAEtD,IAAI,MAAM,MAAM,KAAK,GACnB,OAAO;aAEP,OAAO;IAEX;IACA;;;;;;;;;;;;;;;;;;;GAmBC,GACD,mCAAmC,OAAO,EAAE,eAAe,EAAE;QAC3D,IAAI,eAAe,0BAA0B,CAAC,UAC5C,OAAO;QAET,MAAM,SAAS,IAAI,aAAa,QAAQ,OAAO;QAC/C,KAAK,MAAM,UAAU,QAAS;YAC5B,IAAI,OAAO,KAAK,YAAY,eAAe;gBACzC,OAAO,GAAG,CAAC,QAAQ,IAAI,CAAC,UAAU;gBAClC;YACF;YACA,IAAI,mBAAmB,OAAO,KAAK,CAAC,sBAAsB,EAAE;gBAC1D,MAAM,aAAa,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,KAAK;gBACnD,IAAI,WAAW,QAAQ,CAAC,MAAM,OAAO,GAAG;oBACtC,MAAM,iBAAiB,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,KAAK,CAAC,SAAS,CAAC;oBACvE,OAAO,GAAG,CAAC,UAAU,gBAAgB,CAAC,gBAAgB,SAAS,IAAI,CAAC,UAAU;gBAChF;YACF;QACF;QACA,OAAO;IACT;IACA,kBAAkB,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE;QACjC,MAAM,iBAAiB,iCAAiC,IAAI,CAAC,GAAG,EAAE;QAClE,MAAM,UAAU,IAAI,aAAa;QACjC,IAAI,oBAAoB,iBAAiB,EACvC,QAAQ,GAAG,CAAC,sCAAsC,IAAI,qBAAqB,eAAe,QAAQ,CAAC,IAAI,CAAC,MAAM;QAEhH,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,WAAW,CAAC,MAAM,EAAE,IAAK;YAC7C,MAAM,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC,MAAM;YACtC,MAAM,IAAI,UAAU,iBAAiB,CAAC,QAAQ,IAAI,GAAG;YACrD,MAAM,cAAc,IAAI;YACxB,IAAI,CAAC,OAAO,CAAC,GAAG,SAAS,aAAa,MAAM,SAAS;QACvD;QACA,OAAO;IACT;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiDC,GACD,sBAAsB,OAAO,EAAE;QAC7B,MAAM,iBAAiB,EAAE;QACzB,MAAM,YAAY,IAAI,aAAa,QAAQ,OAAO;QAClD,KAAK,MAAM,UAAU,QAAS;YAC5B,IAAI,OAAO,GAAG,KAAK,GACjB;YAEF,MAAM,iBAAiB,OAAO,eAAe,CAAC,cAAc,CAC1D,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,eAAe,CAAC,YAAY;YAEnC,IAAI,mBAAmB,MACrB;YAEF,cAAc,CAAC,OAAO,KAAK,CAAC,WAAW,CAAC,GAAG,OAAO,OAAO;YACzD,IAAI,mBAAmB,OAAO,eAAe,EAC3C,UAAU,GAAG,CAAC,UAAU,SAAS,CAAC,QAAQ,iBAAiB,IAAI,CAAC,UAAU;iBAE1E,UAAU,GAAG,CAAC,QAAQ,IAAI,CAAC,UAAU;QAEzC;QACA,KAAK,MAAM,UAAU,QAAS;YAC5B,IAAI,OAAO,GAAG,KAAK,GACjB;YAEF,IAAI,CAAC,OAAO,0BAA0B,EAAE;gBACtC,MAAM,UAAU,cAAc,CAAC,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI;gBAC5D,IAAI,YAAY,QAAQ,QAAQ,MAAM,CAAC,OAAO,OAAO,GACnD;YAEJ;YACA,UAAU,GAAG,CAAC,QAAQ,IAAI,CAAC,UAAU;QACvC;QACA,OAAO;IACT;IACA,mBAAmB,KAAK,EAAE,KAAK,EAAE;QAC/B,IAAI,MAAM,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,GAC/C,OAAO,MAAM,MAAM;aAEnB,OAAO;IAEX;IACA,qBAAqB,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE;QACjD,IAAI,YAAY,EAAE;QAClB,KAAK,MAAM,KAAK,QACd,IAAI,UAAU,GAAG,CAAC,EAAE,GAAG,GACrB,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,gBAAgB,SAAS,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,IAAI,MAAM,EAAE,eAAe;QAG5F,IAAI,YAAY;QAChB,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,GAAG,IAAK;YACrC,MAAM,OAAO,SAAS,CAAC,EAAE,IAAI;YAC7B,IAAI,SAAS,MACX,SAAS,CAAC,EAAE,GAAG,gBAAgB,IAAI;iBAC9B,IAAI,SAAS,gBAAgB,IAAI,EACtC,aAAa;QAEjB;QACA,IAAI,cAAc,GAChB,YAAY;QAEd,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,iCAAiC,cAAc;QAE7D,OAAO;IACT;IACA,wBAAwB,SAAS,EAAE,SAAS,EAAE;QAC5C,MAAM,QAAQ,EAAE;QAChB,IAAI,oBAAoB;QACxB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;YACzC,MAAM,OAAO,SAAS,CAAC,EAAE;YACzB,IAAI,UAAU,GAAG,CAAC,IAChB,MAAM,IAAI,CAAC;gBAAE;gBAAM,KAAK;YAAE;YAE5B,IAAI,SAAS,gBAAgB,IAAI,EAC/B,oBAAoB;QAExB;QACA,IAAI,CAAC,mBACH,OAAO;QAET,OAAO;IACT;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CC,GACD,wDAAwD,OAAO,EAAE,YAAY,EAAE;QAC7E,MAAM,eAAe,IAAI,CAAC,gCAAgC,CAAC,SAAS;QACpE,MAAM,kBAAkB,YAAY,CAAC,EAAE;QACvC,MAAM,oBAAoB,YAAY,CAAC,EAAE;QACzC,IAAI,MAAM,IAAI,CAAC,mCAAmC,CAAC;QACnD,IAAI,QAAQ,IAAI,kBAAkB,EAChC,OAAO;QAET,IAAI,kBAAkB,MAAM,GAAG,GAAG;YAChC,MAAM,IAAI,CAAC,mCAAmC,CAAC;YAC/C,IAAI,QAAQ,IAAI,kBAAkB,EAChC,OAAO;QAEX;QACA,OAAO,IAAI,kBAAkB;IAC/B;IACA,oCAAoC,OAAO,EAAE;QAC3C,MAAM,OAAO,EAAE;QACf,KAAK,MAAM,KAAK,QAAS;YACvB,IAAI,EAAE,uBAAuB,IAAI,EAAE,KAAK,YAAY,iBAAiB,EAAE,OAAO,CAAC,YAAY,IACzF;gBAAA,IAAI,KAAK,OAAO,CAAC,EAAE,GAAG,IAAI,GACxB,KAAK,IAAI,CAAC,EAAE,GAAG;YACjB;QAEJ;QACA,IAAI,KAAK,MAAM,KAAK,GAClB,OAAO,IAAI,kBAAkB;aAE7B,OAAO,KAAK,GAAG,IAAI;IAEvB;IACA;;;;;;;;;GASC,GACD,iCAAiC,OAAO,EAAE,YAAY,EAAE;QACtD,MAAM,YAAY,IAAI,aAAa,QAAQ,OAAO;QAClD,MAAM,SAAS,IAAI,aAAa,QAAQ,OAAO;QAC/C,KAAK,MAAM,KAAK,QACd,IAAI,EAAE,eAAe,KAAK,gBAAgB,IAAI,EAAE;YAC9C,MAAM,4BAA4B,EAAE,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC1E,IAAI,2BACF,UAAU,GAAG,CAAC;iBAEd,OAAO,GAAG,CAAC;QAEf,OACE,UAAU,GAAG,CAAC;QAGlB,OAAO;YAAC;YAAW;SAAO;IAC5B;IACA;;;;;;GAMC,GACD,oBAAoB,eAAe,EAAE,YAAY,EAAE,QAAQ,EAAE;QAC3D,MAAM,cAAc,IAAI;QACxB,KAAK,MAAM,QAAQ,gBAAiB;YAClC,IAAI,KAAK,IAAI,KAAK,gBAAgB,IAAI,EAAE;gBACtC,YAAY,GAAG,CAAC,KAAK,GAAG;gBACxB,IAAI,CAAC,UACH;gBAEF;YACF;YACA,MAAM,4BAA4B,KAAK,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAClE,IAAI,oBAAoB,KAAK,IAAI,oBAAoB,QAAQ,EAC3D,QAAQ,GAAG,CAAC,eAAe,OAAO,MAAM;YAE1C,IAAI,2BAA2B;gBAC7B,YAAY,GAAG,CAAC,KAAK,GAAG;gBACxB,IAAI,CAAC,UACH;YAEJ;QACF;QACA,OAAO;IACT;IACA,kEAAkE;IAClE,wEAAwE;IACxE,qEAAqE;IACrE,oEAAoE;IACpE,iCAAiC;IACjC,EAAE;IACF,QAAQ,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,OAAO,EAAE,iBAAiB,EAAE;QACnF,MAAM,eAAe;QACrB,IAAI,CAAC,wBAAwB,CAC3B,QACA,SACA,aACA,mBACA,SACA,cACA;IAEJ;IACA,yBAAyB,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,OAAO,EAAE,KAAK,EAAE,iBAAiB,EAAE;QAC3G,IAAI,oBAAoB,iBAAiB,IAAI,oBAAoB,YAAY,EAC3E,QAAQ,GAAG,CAAC,aAAa,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ;QAEhE,IAAI,OAAO,KAAK,YAAY,eAAe;YACzC,IAAI,OAAO,OAAO,IAAI,CAAC,OAAO,OAAO,CAAC,OAAO,IAAI;gBAC/C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,OAAO,CAAC,MAAM,EAAE,IAAK;oBAC9C,IAAI,OAAO,OAAO,CAAC,cAAc,CAAC,OAAO,kBAAkB,kBAAkB,EAAE;wBAC7E,IAAI,SAAS;4BACX,QAAQ,GAAG,CACT,UAAU,gBAAgB,CACxB,OAAO,KAAK,EACZ,QACA,uBAAuB,QAAQ,GAEjC,IAAI,CAAC,UAAU;4BAEjB;wBACF,OAAO;4BACL,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,sBAAsB,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,CAAC,SAAS;4BAE3E,IAAI,CAAC,QAAQ,CACX,QACA,SACA,aACA,mBACA,SACA,OACA;wBAEJ;wBACA;oBACF;oBACA,MAAM,cAAc,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,OAAO,CAAC,cAAc,CAAC,GAAG;oBACrE,MAAM,aAAa,OAAO,OAAO,CAAC,SAAS,CAAC;oBAC5C,MAAM,IAAI,UAAU,iBAAiB,CAAC,aAAa,OAAO,GAAG,EAAE,YAAY,OAAO,eAAe;oBACjG,EAAE,uBAAuB,GAAG,OAAO,uBAAuB;oBAC1D,IAAI,CAAC,wBAAwB,CAC3B,GACA,SACA,aACA,mBACA,SACA,QAAQ,GACR;gBAEJ;gBACA;YACF,OAAO,IAAI,SAAS;gBAClB,QAAQ,GAAG,CAAC,QAAQ,IAAI,CAAC,UAAU;gBACnC;YACF,OACE,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,sBAAsB,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,CAAC,SAAS;QAG/E;QACA,IAAI,CAAC,QAAQ,CAAC,QAAQ,SAAS,aAAa,mBAAmB,SAAS,OAAO;IACjF;IACA,gDAAgD;IAChD,SAAS,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,OAAO,EAAE,KAAK,EAAE,iBAAiB,EAAE;QAC3F,MAAM,IAAI,OAAO,KAAK;QACtB,IAAI,CAAC,EAAE,sBAAsB,EAC3B,QAAQ,GAAG,CAAC,QAAQ,IAAI,CAAC,UAAU;QAErC,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,WAAW,CAAC,MAAM,EAAE,IAAK;YAC7C,IAAI,MAAM,KAAK,IAAI,CAAC,uCAAuC,CAAC,SAC1D;YAEF,MAAM,IAAI,EAAE,WAAW,CAAC,EAAE;YAC1B,MAAM,qBAAqB,qBAAqB,CAAE,CAAA,aAAa,gBAAe;YAC9E,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,oBAAoB,UAAU,GAAG,SAAS;YACrF,IAAI,GAAG;gBACL,IAAI,WAAW;gBACf,IAAI,OAAO,KAAK,CAAC,WAAW,CAAC,SAAS,KAAK,SAAS,SAAS,EAAE;oBAC7D,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,IAAI,CAAC,eAAe,EAAE,IAAI,iBAAiB;wBACzE,MAAM,4BAA4B,EAAE,yBAAyB;wBAC7D,IAAI,8BAA8B,IAAI,CAAC,eAAe,EAAE,IAAI,eAAe,WACzE,EAAE,0BAA0B,GAAG;oBAEnC;oBACA,EAAE,uBAAuB,GAAG;oBAC5B,IAAI,YAAY,QAAQ,CAAC,OAAO,GAC9B;oBAEF,QAAQ,oBAAoB,GAAG;oBAC/B,YAAY;oBACZ,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,0BAA0B;gBAE1C,OAAO;oBACL,IAAI,CAAC,EAAE,SAAS,IAAI,YAAY,QAAQ,CAAC,OAAO,GAC9C;oBAEF,IAAI,aAAa,gBACf;wBAAA,IAAI,YAAY,GACd,YAAY;oBACd;gBAEJ;gBACA,IAAI,CAAC,wBAAwB,CAC3B,GACA,SACA,aACA,oBACA,SACA,UACA;YAEJ;QACF;IACF;IACA,wCAAwC,MAAM,EAAE;QAC9C,MAAM,IAAI,OAAO,KAAK;QACtB,IAAI,EAAE,WAAW,CAAC,SAAS,KAAK,SAAS,eAAe,IAAI,CAAC,OAAO,OAAO,EACzE,OAAO;QAET,IAAI,CAAC,EAAE,sBAAsB,IAAI,OAAO,OAAO,CAAC,OAAO,MAAM,OAAO,OAAO,CAAC,YAAY,IACtF,OAAO;QAET,MAAM,UAAU,OAAO,OAAO,CAAC,MAAM;QACrC,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAAK;YAChC,MAAM,cAAc,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,OAAO,CAAC,cAAc,CAAC,GAAG;YACrE,IAAI,YAAY,SAAS,KAAK,EAAE,SAAS,EACvC,OAAO;QAEX;QACA,MAAM,qBAAqB,EAAE,WAAW,CAAC,EAAE,CAAC,MAAM;QAClD,MAAM,mBAAmB,mBAAmB,QAAQ,CAAC,WAAW;QAChE,MAAM,gBAAgB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB;QACvD,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAAK;YAChC,MAAM,oBAAoB,OAAO,OAAO,CAAC,cAAc,CAAC;YACxD,MAAM,cAAc,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB;YACtD,IAAI,YAAY,WAAW,CAAC,MAAM,KAAK,KAAK,CAAC,YAAY,WAAW,CAAC,EAAE,CAAC,SAAS,EAC/E,OAAO;YAET,MAAM,oBAAoB,YAAY,WAAW,CAAC,EAAE,CAAC,MAAM;YAC3D,IAAI,YAAY,WAAW,CAAC,SAAS,KAAK,SAAS,SAAS,IAAI,sBAAsB,GACpF;YAEF,IAAI,gBAAgB,eAClB;YAEF,IAAI,sBAAsB,eACxB;YAEF,IAAI,kBAAkB,WAAW,CAAC,SAAS,KAAK,SAAS,SAAS,IAAI,kBAAkB,WAAW,CAAC,MAAM,KAAK,KAAK,kBAAkB,WAAW,CAAC,EAAE,CAAC,SAAS,IAAI,kBAAkB,WAAW,CAAC,EAAE,CAAC,MAAM,KAAK,GAC5M;YAEF,OAAO;QACT;QACA,OAAO;IACT;IACA,iBAAiB,MAAM,EAAE,CAAC,EAAE,iBAAiB,EAAE,SAAS,EAAE,OAAO,EAAE,iBAAiB,EAAE;QACpF,OAAQ,EAAE,cAAc;YACtB,KAAK,WAAW,IAAI;gBAClB,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ;YAErC,KAAK,WAAW,UAAU;gBACxB,OAAO,IAAI,CAAC,oBAAoB,CAC9B,QACA,GACA,mBACA,WACA;YAGJ,KAAK,WAAW,SAAS;gBACvB,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,mBAAmB,WAAW;YAEtE,KAAK,WAAW,MAAM;gBACpB,IAAI,oBAAoB,KAAK,EAAE;oBAC7B,MAAM,KAAK;oBACX,MAAM,QAAQ,GAAG,WAAW,KAAK,KAAK,QAAQ,GAAG,WAAW;oBAC5D,QAAQ,GAAG,CAAC,iBAAiB,GAAG,SAAS,GAAG,MAAM;gBACpD;gBACA,OAAO,UAAU,gBAAgB,CAAC,EAAE,MAAM,EAAE;YAE9C,KAAK,WAAW,OAAO;gBACrB,OAAO,UAAU,gBAAgB,CAAC,EAAE,MAAM,EAAE;YAE9C,KAAK,WAAW,IAAI;YACpB,KAAK,WAAW,KAAK;YACrB,KAAK,WAAW,GAAG;gBACjB,IAAI,mBAAmB;oBACrB,IAAI,EAAE,OAAO,CAAC,MAAM,GAAG,EAAE,GAAG,IAC1B,OAAO,UAAU,gBAAgB,CAAC,EAAE,MAAM,EAAE;gBAEhD;gBACA,OAAO;YAET;gBACE,OAAO;QACX;IACF;IACA,qBAAqB,MAAM,EAAE,EAAE,EAAE,iBAAiB,EAAE,SAAS,EAAE,OAAO,EAAE;QACtE,IAAI,oBAAoB,KAAK,EAAE;YAC7B,QAAQ,GAAG,CAAC,6BAA6B,oBAAoB,OAAO,GAAG,UAAU,GAAG;YACpF,IAAI,IAAI,CAAC,MAAM,KAAK,MAClB,QAAQ,GAAG,CAAC,iCAAiC,cAAc,IAAI,CAAC,MAAM,CAAC,sBAAsB;QAEjG;QACA,IAAI,IAAI;QACR,IAAI,qBAAqB;YACvB,IAAI,WAAW,IAAI,CAAC,eAAe,EAAE,OAAO;gBAC1C,MAAM,kBAAkB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK;gBACxD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;gBAC/D,MAAM,eAAe,GAAG,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,YAAY;gBAC9F,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC;gBAChC,IAAI,cACF,IAAI,UAAU,gBAAgB,CAAC,GAAG,MAAM,EAAE;YAE9C,OAAO;gBACL,MAAM,YAAY,gBAAgB,UAAU,CAAC,OAAO,eAAe,EAAE,GAAG,YAAY;gBACpF,IAAI,UAAU,yBAAyB,CAAC,GAAG,MAAM,EAAE,QAAQ;YAC7D;eAEA,IAAI,UAAU,gBAAgB,CAAC,GAAG,MAAM,EAAE;QAE5C,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,iCAAiC;QAE/C,OAAO;IACT;IACA,eAAe,MAAM,EAAE,EAAE,EAAE,iBAAiB,EAAE,SAAS,EAAE,OAAO,EAAE;QAChE,IAAI,oBAAoB,KAAK,EAAE;YAC7B,QAAQ,GAAG,CAAC,6BAA6B,oBAAoB,OAAO,GAAG,SAAS,GAAG,MAAM,GAAG,SAAS,GAAG,qBAAqB,GAAG,cAAc;YAC9I,IAAI,IAAI,CAAC,MAAM,KAAK,MAClB,QAAQ,GAAG,CAAC,iCAAiC,cAAc,IAAI,CAAC,MAAM,CAAC,sBAAsB;QAEjG;QACA,IAAI,IAAI;QACR,IAAI,qBAAsB,CAAA,GAAG,cAAc,IAAI,aAAa,CAAC,GAAG,cAAc,AAAD;YAC3E,IAAI,WAAW,IAAI,CAAC,eAAe,EAAE,OAAO;gBAC1C,MAAM,kBAAkB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK;gBACxD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU;gBAC/D,MAAM,eAAe,GAAG,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,YAAY;gBAC9F,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC;gBAChC,IAAI,cACF,IAAI,UAAU,gBAAgB,CAAC,GAAG,MAAM,EAAE;YAE9C,OAAO;gBACL,MAAM,YAAY,gBAAgB,UAAU,CAAC,OAAO,eAAe,EAAE,GAAG,YAAY;gBACpF,IAAI,UAAU,yBAAyB,CAAC,GAAG,MAAM,EAAE,QAAQ;YAC7D;eAEA,IAAI,UAAU,gBAAgB,CAAC,GAAG,MAAM,EAAE;QAE5C,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,iCAAiC;QAE/C,OAAO;IACT;IACA,eAAe,MAAM,EAAE,CAAC,EAAE;QACxB,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,eAAe,IAAI,CAAC,WAAW,CAAC,EAAE,MAAM,CAAC,SAAS,IAAI,WAAW,OAAO,OAAO;QAE7F,MAAM,cAAc,EAAE,WAAW;QACjC,MAAM,aAAa,iCAAiC,OAAO,OAAO,IAAI,KAAK,GAAG,YAAY,WAAW;QACrG,OAAO,UAAU,gBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ;IACtD;IACA,mBAAmB,OAAO,EAAE;QAC1B,MAAM,UAAU,eAAe,wBAAwB,CAAC;QACxD,OAAO,eAAe,OAAO,CAAC;IAChC;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCC,GACD,8BAA8B,OAAO,EAAE;QACrC,IAAI;QACJ,IAAI,QAAQ,SAAS,KAAK,IAAI,kBAAkB,EAAE;YAChD,kBAAkB,IAAI;YACtB,gBAAgB,GAAG,CAAC,QAAQ,SAAS;QACvC,OACE,kBAAkB,QAAQ,eAAe;QAE3C,OAAO;IACT;IACA,YAAY,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,UAAU,EAAE;QACpD,OAAO,IAAI,qBAAqB,IAAI,CAAC,MAAM,EAAE,OAAO,MAAM,GAAG,CAAC,aAAa,MAAM,EAAE,CAAC,IAAI,SAAS;IACnG;IACA;;;;;;;;;;;;;;;;;;;GAmBC,GACD,WAAW,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE;QAC3B,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,UAAU,OAAO,SAAS,KAAK,WAAW,IAAI,CAAC,YAAY,CAAC;QAE1E,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK;QAC3B,IAAI,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,EACrC,OAAO;QAET,IAAI,oBAAoB,KAAK,EAC3B,QAAQ,GAAG,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,WAAW,gBAAgB;QAEhH,KAAK,KAAK,CAAC,IAAI,EAAE,GAAG;QACpB,OAAO;IACT;IACA;;;;;;;;;;;;;;GAcC,GACD,YAAY,GAAG,EAAE,QAAQ,EAAE;QACzB,IAAI,aAAa,aAAa,KAAK,EACjC,OAAO;QAET,MAAM,WAAW,IAAI,QAAQ,CAAC;QAC9B,IAAI,aAAa,MACf,OAAO;QAET,IAAI,CAAC,SAAS,OAAO,CAAC,QAAQ,EAAE;YAC9B,SAAS,OAAO,CAAC,eAAe,CAAC,IAAI;YACrC,SAAS,OAAO,CAAC,WAAW,CAAC;QAC/B;QACA,IAAI,oBAAoB,iBAAiB,EACvC,QAAQ,GAAG,CAAC,qBAAqB;QAEnC,IAAI,QAAQ,CAAC;QACb,OAAO;IACT;IACA,4BAA4B,GAAG,EAAE,eAAe,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE;QAChF,IAAI,oBAAoB,KAAK,IAAI,oBAAoB,UAAU,EAAE;YAC/D,MAAM,WAAW,IAAI,SAAS,YAAY,YAAY;YACtD,QAAQ,GAAG,CAAC,0CAA0C,IAAI,QAAQ,GAAG,MAAM,UAAU,aAAa,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC;QAChJ;QACA,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,2BAA2B,CAC3D,IAAI,CAAC,MAAM,EACX,KACA,YACA,WACA,iBACA;IAEJ;IACA,yBAAyB,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE;QACxE,IAAI,oBAAoB,KAAK,IAAI,oBAAoB,UAAU,EAAE;YAC/D,MAAM,WAAW,IAAI,SAAS,YAAY,YAAY;YACtD,QAAQ,GAAG,CAAC,uCAAuC,IAAI,QAAQ,GAAG,MAAM,UAAU,aAAa,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC;QAC7I;QACA,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,wBAAwB,CACxD,IAAI,CAAC,MAAM,EACX,KACA,YACA,WACA,YACA;IAEJ;IACA,qEAAqE;IACrE,gBAAgB,GAAG,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE;QACxE,IAAI,oBAAoB,KAAK,IAAI,oBAAoB,UAAU,EAAE;YAC/D,MAAM,WAAW,IAAI,SAAS,YAAY,YAAY;YACtD,QAAQ,GAAG,CAAC,qBAAqB,YAAY,MAAM,UAAU,aAAa,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC;QACxH;QACA,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,eAAe,CAC/C,IAAI,CAAC,MAAM,EACX,KACA,YACA,WACA,OACA,WACA;IAEJ;AACF;AAEA,oCAAoC;AACpC,IAAI,yBAAyB;IAC3B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,QAAQ,IAAI,QAAQ,yBAAyB,QAAQ,EAAE;IACvD;;;;;;;GAOC,GACD,IAAI,GAAG,EAAE;QACP,IAAI,QAAQ,uBAAuB,QAAQ,EACzC,OAAO;QAET,MAAM,WAAW,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAChC,IAAI,UACF,OAAO;QAET,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK;QACpB,OAAO;IACT;IACA,IAAI,GAAG,EAAE;QACP,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IACxB;IACA,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI;IACxB;AACF;AAEA,mCAAmC;AACnC,IAAI,wBAAwB,cAAc;IACxC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,eAAe,EAAE;IACjB,kBAAkB,EAAE;IACpB,aAAa;IACb;;;;;;;;;;;GAWC,GACD,4BAA4B;IAC5B,eAAe,EAAE;IACjB,cAAc,EAAE;IAChB,YAAY,MAAM,CAAE;QAClB,MAAM,qBAAqB,OAAO,WAAW,CAAC,kBAAkB;QAChE,KAAK,CAAC,QAAQ,OAAO,WAAW,CAAC,GAAG,EAAE,OAAO,WAAW,CAAC,aAAa,EAAE;QACxE,IAAI,oBAAoB;YACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM;YACnD,IAAI,CAAC,SAAS,GAAG,IAAI,MAAM,IAAI,CAAC,YAAY;YAC5C,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,EAAE,IACrC,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,aAAa;QAEzC;IACF;IACA,gBAAgB,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE;QAC7C,IAAI;YACF,IAAI,CAAC,YAAY,GAAG;YACpB,IAAI,CAAC,WAAW,GAAG;YACnB,IAAI,CAAC,eAAe,GAAG;YACvB,MAAM,QAAQ,YAAY,GAAG;YAC7B,MAAM,MAAM,KAAK,CAAC,gBAAgB,OAAO,UAAU;YACnD,MAAM,OAAO,YAAY,GAAG;YAC5B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gBAAgB,IAAI,OAAO;YACpD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW;YACpC,MAAM,UAAU,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG;YACtE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,IAAI;YACzC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,KAAK,IAAI,UAAU,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,EAAE;YAC1I,IAAI,UAAU,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,EAAE;gBACjD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,GAAG;gBACtC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,eAAe,GAAG;oBACzC;oBACA,SAAS;oBACT,cAAc;oBACd;oBACA,YAAY,IAAI,CAAC,eAAe,CAAC,UAAU;oBAC3C,WAAW,IAAI,CAAC,YAAY;oBAC5B,SAAS;gBACX;YACF;YACA,IAAI,IAAI,CAAC,WAAW,IAAI,GAAG;gBACzB,MAAM,SAAS,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG;gBACpE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,IAAI;gBACxC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,KAAK,IAAI,SAAS,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE;gBACtI,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE;oBAC/C,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,GAAG;oBACrC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,cAAc,GAAG;wBACxC;wBACA,SAAS;wBACT,cAAc;wBACd;wBACA,YAAY,IAAI,CAAC,eAAe,CAAC,UAAU;wBAC3C,WAAW,IAAI,CAAC,WAAW;wBAC3B,SAAS;oBACX;gBACF;YACF;YACA,OAAO;QACT,SAAU;YACR,IAAI,CAAC,eAAe,GAAG;QACzB;IACF;IACA,uBAAuB,SAAS,EAAE,CAAC,EAAE;QACnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK;QACpD,MAAM,sBAAsB,KAAK,CAAC,uBAAuB,WAAW;QACpE,IAAI,wBAAwB,KAAK,GAAG;YAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,iBAAiB;YACtD,IAAI,wBAAwB,aAAa,KAAK,EAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;gBAC/C,UAAU,IAAI,CAAC,eAAe;gBAC9B,SAAS,UAAU,OAAO;gBAC1B,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK;gBACjC,YAAY,IAAI,CAAC,eAAe,CAAC,UAAU;gBAC3C,WAAW,IAAI,CAAC,YAAY;gBAC5B,SAAS;YACX;QAEJ;QACA,IAAI,CAAC,YAAY,GAAG;QACpB,OAAO;IACT;IACA,mBAAmB,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE;QACpC,MAAM,QAAQ,KAAK,CAAC,mBAAmB,KAAK,WAAW;QACvD,IAAI,CAAC,YAAY,GAAG;QACpB,OAAO;IACT;IACA,gBAAgB,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE;QACnC,IAAI,WAAW,IAAI,CAAC,eAAe,EAAE,OACnC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK;QAErD,MAAM,eAAe,KAAK,CAAC,gBAAgB,SAAS,GAAG;QACvD,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,IAAI,SAAS;gBACX,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,gBAAgB;gBACrD,IAAI,iBAAiB,MACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;oBAC/C,UAAU,IAAI,CAAC,eAAe;oBAC9B,SAAS;oBACT,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK;oBACjC,YAAY,IAAI,CAAC,eAAe,CAAC,UAAU;oBAC3C,WAAW,IAAI,CAAC,YAAY;oBAC5B,SAAS;gBACX;YAEJ,OAAO;gBACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,iBAAiB;gBACtD,IAAI,iBAAiB,MACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;oBAC/C,UAAU,IAAI,CAAC,eAAe;oBAC9B,SAAS;oBACT,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK;oBACjC,YAAY,IAAI,CAAC,eAAe,CAAC,UAAU;oBAC3C,WAAW,IAAI,CAAC,YAAY;oBAC5B,SAAS;gBACX;YAEJ;;QAEF,OAAO;IACT;IACA,4BAA4B,GAAG,EAAE,eAAe,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE;QAChF,IAAI,oBAAoB,MACtB,IAAI,CAAC,2BAA2B,GAAG,gBAAgB,UAAU,CAAC;aAE9D,IAAI,CAAC,2BAA2B,GAAG,QAAQ,OAAO,GAAG,UAAU,CAAC;QAElE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,UAAU;QAC/C,IAAI,iBACF,KAAK,CAAC,4BAA4B,KAAK,iBAAiB,SAAS,YAAY;IAEjF;IACA,yBAAyB,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE;QACxE,IAAI,eAAe,IAAI,CAAC,2BAA2B,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,EAC/E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC;YAC7D,UAAU,IAAI,CAAC,eAAe;YAC9B;YACA,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK;YACjC;YACA;YACA,SAAS;QACX;QAEF,KAAK,CAAC,yBAAyB,KAAK,YAAY,SAAS,YAAY;IACvE;IACA,gBAAgB,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE;QAC5E,IAAI;QACJ,IAAI,WACF,aAAa,UAAU,UAAU,CAAC;aAElC,aAAa,QAAQ,OAAO,GAAG,UAAU,CAAC;QAE5C,IAAI,IAAI,CAAC,eAAe,EAAE,OAAO;YAC/B,IAAI,QAAQ,OAAO,IAAI,eAAe,IAAI,CAAC,2BAA2B,EACpE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC;gBAC7D,UAAU,IAAI,CAAC,eAAe;gBAC9B;gBACA,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK;gBACjC;gBACA;gBACA,SAAS;YACX;YAEF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;gBACpD;gBACA,UAAU,IAAI,CAAC,eAAe;gBAC9B;gBACA,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK;gBACjC;gBACA;gBACA,SAAS,QAAQ,OAAO;YAC1B;QACF;QACA,KAAK,CAAC,gBAAgB,KAAK,OAAO,YAAY,WAAW,OAAO,WAAW;IAC7E;IACA,kBAAkB;QAChB,OAAO,IAAI,CAAC,SAAS;IACvB;IACA,kBAAkB;QAChB,OAAO,IAAI,CAAC,YAAY;IAC1B;AACF;AAEA,4BAA4B;AAC5B,IAAI;AACH,CAAA,CAAC;IACA,gBAAgB,QAAQ,GAAG,aAAa,GAAG,OAAO,CAAC;QACjD,OAAO,CAAC,CAAC,EAAE,WAAW,IAAI,CAAC,EAAE,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC;IAClD,GAAG;AACL,CAAA,EAAG,kBAAmB,CAAA,iBAAiB,CAAC,CAAA;AAExC,yCAAyC;AACzC,IAAI,6BAA6B,cAAc;IAC7C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,CAAC,CAAE;QACb,KAAK;QACL,IAAI,CAAC,KAAK,GAAG;IACf;AACF;AAEA,oCAAoC;AACpC,IAAI,wBAAwB;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,qBAAqB,MAAM,EAAE;QAClC,MAAM,YAAY,EAAE;QACpB,MAAM,WAAW,EAAE;QACnB,MAAM,QAAQ,EAAE;QAChB,MAAM,eAAe,EAAE;QACvB,MAAM,gBAAgB,EAAE;QACxB,MAAM,QAAQ,OAAO,KAAK,CAAC;QAC3B,IAAI,QAAQ;QACZ,IAAI,OAAO,KAAK,CAAC,QAAQ;QACzB,IAAI,SAAS,wBACX,MAAM,IAAI,MAAM;QAElB,GAAG;YACD,OAAO,KAAK,CAAC,QAAQ;YACrB,IAAI,KAAK,MAAM,KAAK,GAClB;YAEF,aAAa,IAAI,CAAC,SAAS,SAAS,OAAO;QAC7C,QAAS,MAAM;QACf,OAAO,KAAK,CAAC,QAAQ;QACrB,IAAI,SAAS,yBACX,MAAM,IAAI,MAAM;QAElB,GAAG;YACD,OAAO,KAAK,CAAC,QAAQ;YACrB,IAAI,KAAK,MAAM,KAAK,GAClB;YAEF,cAAc,IAAI,CAAC,SAAS,SAAS,OAAO;QAC9C,QAAS,MAAM;QACf,OAAO,KAAK,CAAC,QAAQ;QACrB,IAAI,SAAS,eACX,MAAM,IAAI,MAAM;QAElB,GAAG;YACD,OAAO,KAAK,CAAC,QAAQ;YACrB,IAAI,KAAK,MAAM,KAAK,GAClB;YAEF,UAAU,IAAI,CAAC;QACjB,QAAS,MAAM;QACf,OAAO,KAAK,CAAC,QAAQ;QACrB,IAAI,SAAS,kBAAkB;YAC7B,GAAG;gBACD,OAAO,KAAK,CAAC,QAAQ;gBACrB,IAAI,KAAK,MAAM,KAAK,GAClB;gBAEF,SAAS,IAAI,CAAC;YAChB,QAAS,MAAM;YACf,OAAO,KAAK,CAAC,QAAQ;YACrB,IAAI,SAAS,eACX,MAAM,IAAI,MAAM;YAElB,GAAG;gBACD,OAAO,KAAK,CAAC,QAAQ;gBACrB,IAAI,KAAK,MAAM,KAAK,GAClB;gBAEF,MAAM,IAAI,CAAC;YACb,QAAS,MAAM;QACjB;QACA,OAAO,KAAK,CAAC,QAAQ;QACrB,IAAI,SAAS,QACX,MAAM,IAAI,MAAM;QAElB,OAAO,KAAK,CAAC,QAAQ;QACrB,MAAM,WAAW,KAAK,KAAK,CAAC;QAC5B,IAAI;QACJ,MAAM,gBAAgB,EAAE;QACxB,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,EAAE,EAAG;YACxC,MAAM,UAAU,QAAQ,CAAC,EAAE;YAC3B,IAAI,QAAQ,UAAU,CAAC,MACrB,QAAQ,OAAO,QAAQ,SAAS,CAAC,GAAG,IAAI;iBACnC,IAAI,QAAQ,QAAQ,CAAC,MAC1B,QAAQ,OAAO,QAAQ,SAAS,CAAC,GAAG,QAAQ,MAAM,GAAG,GAAG,IAAI;iBAE5D,QAAQ,OAAO,QAAQ,IAAI;YAE7B,aAAa,CAAC,EAAE,GAAG;QACrB;QACA,MAAM,eAAe,IAAI;QACzB,OAAO;YACL,KAAK,aAAa,WAAW,CAAC;YAC9B,YAAY,IAAI,WAAW,cAAc,eAAe,EAAE;YAC1D;YACA,UAAU,SAAS,MAAM,GAAG,IAAI,WAAW,KAAK;YAChD,OAAO,MAAM,MAAM,GAAG,IAAI,QAAQ,KAAK;QACzC;IACF;AACF;AAEA,uCAAuC;AACvC,IAAI,2BAA2B;IAC7B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,MAAM,IAAI,EAAE;QACV,OAAO,KAAK,MAAM,CAAC,IAAI;IACzB;IACA,cAAc,IAAI,EAAE;QAClB,IAAI,SAAS,IAAI,CAAC,aAAa;QAC/B,MAAM,KAAK,KAAK,aAAa;QAC7B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YAC3B,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,SACnC;YAEF,MAAM,IAAI,KAAK,QAAQ,CAAC;YACxB,IAAI,GAAG;gBACL,MAAM,cAAc,EAAE,MAAM,CAAC,IAAI;gBACjC,SAAS,IAAI,CAAC,eAAe,CAAC,QAAQ;YACxC;QACF;QACA,OAAO;IACT;IACA,cAAc,KAAK,EAAE;QACnB,OAAO,IAAI,CAAC,aAAa;IAC3B;IACA,eAAe,KAAK,EAAE;QACpB,OAAO,IAAI,CAAC,aAAa;IAC3B;IACA,gBAAgB;QACd,OAAO;IACT;IACA,qBAAqB,KAAK,EAAE,cAAc,EAAE;QAC1C,OAAO;IACT;IACA,gBAAgB,SAAS,EAAE,UAAU,EAAE;QACrC,OAAO;IACT;AACF;AAEA,8BAA8B;AAC9B,IAAI,kBAAkB,MAAM;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,UAAU,IAAI,mBAAmB;IACxC;;;;;;;;GAQC,GACD,KAAK,QAAQ,EAAE,CAAC,EAAE;QAChB,MAAM,YAAY,aAAa;QAC/B,IAAI,WACF,SAAS,cAAc,CAAC;aACnB,IAAI,aAAa,cACtB,SAAS,aAAa,CAAC;aAClB;YACL,MAAM,IAAI;YACV,IAAI,CAAC,SAAS,CAAC,UAAU;YACzB,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,aAAa,IAAI,IACrC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC;YAEjC,IAAI,CAAC,QAAQ,CAAC,UAAU;QAC1B;IACF;IACA;;;;;;GAMC,GACD,UAAU,QAAQ,EAAE,CAAC,EAAE;QACrB,MAAM,MAAM,EAAE,WAAW;QACzB,SAAS,cAAc,CAAC;QACxB,IAAI,SAAS,CAAC;IAChB;IACA;;;;;;GAMC,GACD,SAAS,QAAQ,EAAE,CAAC,EAAE;QACpB,MAAM,MAAM,EAAE,WAAW;QACzB,IAAI,QAAQ,CAAC;QACb,SAAS,aAAa,CAAC;IACzB;AACF;AAEA,oBAAoB;AACpB,IAAI;AACH,CAAA,CAAC;IACA,YAAY,UAAU,GAAG,aAAa,GAAG,OAAO,CAAC;QAC/C,OAAO,IAAI,eAAe;IAC5B,GAAG;AACL,CAAA,EAAG,cAAe,CAAA,aAAa,CAAC,CAAA;AAChC,IAAI,iBAAiB;IACnB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,GAAG;IACV,QAAQ,EAAE;IACV,KAAK;IACL,YAAY,KAAK,CAAE;QACjB,MAAM,aAAa,EAAE;QACrB,KAAK,MAAM,QAAQ,MACjB,WAAW,IAAI,CAAC,KAAK,WAAW,CAAC;QAEnC,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY;IAC9B;IACA;;;;GAIC,GACD,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG;IACf;IACA,UAAU;QACR,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAChC,MAAM,IAAI,MAAM;QAElB,IAAI,CAAC,KAAK,IAAI;IAChB;IACA,GAAG,MAAM,EAAE;QACT,IAAI,WAAW,GACb,OAAO;QAET,IAAI,SAAS,GACX,UAAU;QAEZ,MAAM,MAAM,IAAI,CAAC,KAAK,GAAG,SAAS;QAClC,IAAI,MAAM,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EACpC,OAAO,MAAM,GAAG;QAElB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI;IACvB;IACA,iDAAiD;IACjD,OAAO;QACL,OAAO;IACT;IACA,QAAQ,OAAO,EAAE,CACjB;IACA;;;GAGC,GACD,KAAK,KAAK,EAAE;QACV,IAAI,SAAS,IAAI,CAAC,KAAK,EAAE;YACvB,IAAI,CAAC,KAAK,GAAG;YACb;QACF;QACA,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM;IAC/C;IACA,iBAAiB,KAAK,EAAE,IAAI,EAAE;QAC5B,OAAO,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG;QAClC,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG;QAE5B,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,MAAM,EAC3B,OAAO;QAET,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,OAAO;IAC5C;IACA,oBAAoB,QAAQ,EAAE;QAC5B,MAAM,QAAQ,SAAS,KAAK;QAC5B,IAAI,OAAO,SAAS,IAAI;QACxB,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG;QAE5B,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,MAAM,EAC3B,OAAO;QAET,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,OAAO;IAC5C;IACA,WAAW;QACT,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B;IACA,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM;IACzB;IACA,gBAAgB;QACd,IAAI,IAAI,CAAC,IAAI,EACX,OAAO,IAAI,CAAC,IAAI;QAElB,OAAO,UAAU,mBAAmB;IACtC;IACA,gBAAgB,KAAK,EAAE,IAAI,EAAE;QAC3B,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO;QACpC,IAAI,SAAS;QACb,KAAK,OAAO,CAAC,CAAC;YACZ,UAAU,OAAO,aAAa,CAAC;QACjC;QACA,OAAO;IACT;AACF;AAEA,uBAAuB;AACvB,IAAI,kBAAkB,aAAa,GAAG,OAAO,CAAC;IAC5C,OAAO,UAAU,OAAO,KAAK,KAAK;AACpC,GAAG;AAEH,6BAA6B;AAC7B,IAAI,sBAAsB;IACxB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;GAEC,GACD,YAAY;IACZ;;;;GAIC,GACD,SAAS,EAAE,CAAC;IACZ;;;;;;;;;;GAUC,GACD,IAAI,GAAG;IACP;;;;;;;;;;GAUC,GACD,aAAa,MAAM;IACnB,YAAY,WAAW,CAAE;QACvB,IAAI,CAAC,WAAW,GAAG;IACrB;IACA,OAAO;QACL,OAAO;IACT;IACA,QAAQ,OAAO,EAAE,CACjB;IACA,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC;IACZ;IACA,KAAK,KAAK,EAAE;QACV,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;IAChC;IACA,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM;IAC3B;IACA,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,CAAC;IACf;IACA,IAAI,KAAK,EAAE;QACT,IAAI,CAAC,QAAQ;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM;IAC3B;IACA,UAAU;QACR,IAAI,eAAe;QACnB,IAAI,IAAI,CAAC,CAAC,IAAI;YACZ,IAAI,IAAI,CAAC,UAAU,EACjB,eAAe,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;iBAE7C,eAAe,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM;eAG5C,eAAe;QAEjB,IAAI,CAAC,gBAAgB,IAAI,CAAC,EAAE,CAAC,OAAO,MAAM,GAAG,EAC3C,MAAM,IAAI,MAAM;QAElB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IACrB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,GAAG;IAE3C;IACA;;;;GAIC,GACD,KAAK,CAAC,EAAE;QACN,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;QACpC,IAAI,KAAK,GAAG;YACV,MAAM,UAAU,IAAI,CAAC,KAAK,CAAC;YAC3B,OAAO,WAAW;QACpB;QACA,OAAO;IACT;IACA;;;;GAIC,GACD,MAAM,EAAE,EAAE;QACR,IAAI,IAAI,CAAC,UAAU,EACjB,OAAO;QAET,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YAC3B,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS;YACpC,IAAI,gBAAgB,IAClB,EAAE,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM;YAEnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACjB,IAAI,EAAE,IAAI,KAAK,MAAM,GAAG,EAAE;gBACxB,IAAI,CAAC,UAAU,GAAG;gBAClB,OAAO,IAAI;YACb;QACF;QACA,OAAO;IACT;IACA,kDAAkD,GAClD,UAAU,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;QAC5B,IAAI,CAAC,QAAQ;QACb,IAAI,UAAU,KAAK,KAAK,SAAS,KAAK,GACpC,OAAO,IAAI,CAAC,MAAM;QAEpB,UAAU;QACV,IAAI,SAAS,KAAK,GAChB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;QAE9B,IAAI,QAAQ,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,OAAO,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,MAAM,EACpF,MAAM,IAAI,WAAW,WAAW,QAAQ,cAAc,OAAO,gBAAiB,CAAA,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAA;QAErG,IAAI,QAAQ,MACV,OAAO,EAAE;QAEX,IAAI,UAAU,KAAK,GACjB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,OAAO;QAEzC,MAAM,SAAS,EAAE;QACjB,IAAI,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,EAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;QAE9B,IAAK,IAAI,IAAI,OAAO,IAAI,MAAM,IAAK;YACjC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;YACxB,IAAI,EAAE,IAAI,KAAK,MAAM,GAAG,EAAE;gBACxB,OAAO,IAAI,CAAC;gBACZ;YACF;YACA,IAAI,MAAM,GAAG,CAAC,EAAE,IAAI,GAClB,OAAO,IAAI,CAAC;QAEhB;QACA,OAAO;IACT;IACA,GAAG,CAAC,EAAE;QACJ,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,QAAQ,MAAM,YAAY;IAC/C;IACA,GAAG,CAAC,EAAE;QACJ,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,GACf,OAAO;QAET,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE;IAChC;IACA,GAAG,CAAC,EAAE;QACJ,IAAI,CAAC,QAAQ;QACb,IAAI,MAAM,GACR,OAAO;QAET,IAAI,IAAI,GACN,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC;QAElB,MAAM,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI;QACvB,IAAI,CAAC,IAAI,CAAC;QACV,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EACzB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE;QAE5C,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;IACvB;IACA;;;;;;;;;;;;;GAaC,GACD,gBAAgB,CAAC,EAAE;QACjB,OAAO;IACT;IACA,WAAW;QACT,IAAI,IAAI,CAAC,CAAC,KAAK,IACb,IAAI,CAAC,KAAK;IAEd;IACA,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC;QACV,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;IAChC;IACA,yDAAyD,GACzD,eAAe,WAAW,EAAE;QAC1B,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,MAAM,GAAG,EAAE;QAChB,IAAI,CAAC,CAAC,GAAG;QACT,IAAI,CAAC,UAAU,GAAG;IACpB;IACA;;;;GAIC,GACD,mBAAmB,CAAC,EAAE,OAAO,EAAE;QAC7B,IAAI,CAAC,IAAI,CAAC;QACV,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EACzB,OAAO;QAET,IAAI,QAAQ,IAAI,CAAC,MAAM,CAAC,EAAE;QAC1B,MAAO,MAAM,OAAO,KAAK,QAAS;YAChC,IAAI,MAAM,IAAI,KAAK,MAAM,GAAG,EAC1B,OAAO;YAET,KAAK;YACL,IAAI,CAAC,IAAI,CAAC;YACV,QAAQ,IAAI,CAAC,MAAM,CAAC,EAAE;QACxB;QACA,OAAO;IACT;IACA;;;;;;;;GAQC,GACD,uBAAuB,CAAC,EAAE,OAAO,EAAE;QACjC,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EACzB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;QAE9B,MAAO,KAAK,EAAG;YACb,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,EAAE;YAC5B,IAAI,MAAM,IAAI,KAAK,MAAM,GAAG,IAAI,MAAM,OAAO,KAAK,SAChD,OAAO;YAET,EAAE;QACJ;QACA,OAAO;IACT;IACA;;;;GAIC,GACD,uBAAuB,UAAU,EAAE,OAAO,EAAE;QAC1C,IAAI,YAAY,KAAK,GACnB,UAAU;QAEZ,IAAI,CAAC,QAAQ;QACb,IAAI,aAAa,KAAK,cAAc,IAAI,CAAC,MAAM,CAAC,MAAM,EACpD,MAAM,IAAI,MAAM,GAAG,WAAW,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG;QAErE,MAAM,gBAAgB,IAAI,CAAC,kBAAkB,CAAC,aAAa,GAAG,MAAM,qBAAqB;QACzF,MAAM,OAAO,aAAa;QAC1B,MAAM,KAAK,kBAAkB,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI;QAC3D,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI;IACzC;IACA;;;;GAIC,GACD,sBAAsB,UAAU,EAAE,OAAO,EAAE;QACzC,IAAI,YAAY,KAAK,GACnB,UAAU;QAEZ,IAAI,CAAC,QAAQ;QACb,IAAI,aAAa,KAAK,cAAc,IAAI,CAAC,MAAM,CAAC,MAAM,EACpD,MAAM,IAAI,MAAM,GAAG,WAAW,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG;QAErE,MAAM,gBAAgB,IAAI,CAAC,sBAAsB,CAAC,aAAa,GAAG,MAAM,qBAAqB;QAC7F,IAAI,kBAAkB,aAAa,GACjC,OAAO,KAAK;QAEd,MAAM,OAAO,gBAAgB;QAC7B,MAAM,KAAK,aAAa;QACxB,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI;IACzC;IACA,iBAAiB,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;QACrC,MAAM,SAAS,EAAE;QACjB,IAAK,IAAI,IAAI,MAAM,IAAI,QAAQ,GAAG,IAAK;YACrC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;YACxB,IAAI,YAAY,IACd;gBAAA,IAAI,EAAE,OAAO,KAAK,MAAM,qBAAqB,EAC3C,OAAO,IAAI,CAAC;YACd,OACK,IAAI,EAAE,OAAO,KAAK,SACvB,OAAO,IAAI,CAAC;QAEhB;QACA,IAAI,OAAO,MAAM,KAAK,GACpB,OAAO,KAAK;QAEd,OAAO;IACT;IACA,gBAAgB;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU;IACpC;IACA,+CAA+C,GAC/C,UAAU;QACR,OAAO,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG;IAC7D;IACA,oBAAoB,QAAQ,EAAE;QAC5B,MAAM,QAAQ,SAAS,KAAK;QAC5B,IAAI,OAAO,SAAS,IAAI;QACxB,IAAI,QAAQ,KAAK,OAAO,GACtB,OAAO;QAET,IAAI,CAAC,IAAI,CAAC;QACV,IAAI,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,EAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;QAE9B,IAAI,SAAS;QACb,IAAK,IAAI,IAAI,OAAO,KAAK,MAAM,EAAE,EAAG;YAClC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;YACxB,IAAI,EAAE,IAAI,KAAK,MAAM,GAAG,EACtB;YAEF,UAAU,EAAE,IAAI;QAClB;QACA,OAAO;IACT;IACA,mBAAmB,GAAG,EAAE;QACtB,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,iBAAiB;IACvD;IACA,iBAAiB,KAAK,EAAE,IAAI,EAAE;QAC5B,IAAI,UAAU,QAAQ,SAAS,MAC7B,OAAO,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC,MAAM,UAAU,EAAE,KAAK,UAAU;QAE/E,OAAO;IACT;IACA,yCAAyC,GACzC,OAAO;QACL,IAAI,CAAC,QAAQ;QACb,MAAO,IAAI,CAAC,KAAK,CAAC,SAAS;IAG7B;IACA,QAAQ,IAAI,EAAE;QACZ,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG;IAC1B;IACA,UAAU,MAAM,EAAE;QAChB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG;IAC5B;AACF;AAEA,2BAA2B;AAC3B,IAAI,oBAAoB,cAAc;IACpC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;;GAMC,GACD,UAAU,MAAM,eAAe,CAAC;IAChC,YAAY,KAAK,EAAE,OAAO,CAAE;QAC1B,KAAK,CAAC;QACN,IAAI,CAAC,OAAO,GAAG,WAAW,MAAM,eAAe;IACjD;IACA,gBAAgB,CAAC,EAAE;QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC,OAAO;IAChD;IACA,GAAG,CAAC,EAAE;QACJ,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,GAAG,IAAI,GAC9B,OAAO;QAET,IAAI,IAAI,IAAI,CAAC,KAAK;QAClB,IAAI,KAAK;QACT,MAAO,MAAM,EAAG;YACd,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO;YACnD,MAAM;QACR;QACA,IAAI,IAAI,GACN,OAAO;QAET,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;IACvB;IACA,GAAG,CAAC,EAAE;QACJ,IAAI,CAAC,QAAQ;QACb,IAAI,MAAM,GACR,OAAO;QAET,IAAI,IAAI,GACN,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC;QAElB,IAAI,IAAI,IAAI,CAAC,KAAK;QAClB,IAAI,KAAK;QACT,MAAO,KAAK,EAAG;YACb,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAChB,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO;YAEjD,MAAM;QACR;QACA,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;IACvB;IACA,uBAAuB;IACvB,6BAA6B;QAC3B,IAAI,KAAK;QACT,IAAI,CAAC,IAAI;QACT,KAAK,MAAM,KAAK,IAAI,CAAC,MAAM,CAAE;YAC3B,IAAI,EAAE,OAAO,KAAK,IAAI,CAAC,OAAO,EAC5B,MAAM;YAER,IAAI,EAAE,IAAI,KAAK,MAAM,GAAG,EACtB;QAEJ;QACA,OAAO;IACT;AACF;AAEA,+BAA+B;AAC/B,IAAI,aAAa,MAAM,oBAAoB;IACzC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,YAAY,EAAE;IACrB,OAAO,WAAW,EAAE;IACpB,OAAO,WAAW,EAAE;IACpB,OAAO,OAAO,EAAE;IAChB,OAAO,WAAW,EAAE;IACpB,OAAO,OAAO,EAAE;IAChB,OAAO,KAAK,EAAE;IACd,OAAO,SAAS,EAAE;IAClB,OAAO,eAAe;QACpB;QACA;KACD,CAAC;IACF,OAAO,eAAe;QACpB;QACA;QACA;QACA;QACA;QACA;QACA;KACD,CAAC;IACF,OAAO,gBAAgB;QACrB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD,CAAC;IACF,OAAO,YAAY;QACjB;KACD,CAAC;IACF,OAAO,YAAY;QACjB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD,CAAC;IACF,YAAY,KAAK,CAAE;QACjB,KAAK,CAAC;QACN,IAAI,CAAC,WAAW,GAAG,IAAI,kBAAkB,IAAI,EAAE,YAAY,IAAI,EAAE,YAAY,cAAc,EAAE,IAAI;IACnG;IACA,IAAI,kBAAkB;QACpB,OAAO;IACT;IACA,IAAI,eAAe;QACjB,OAAO,YAAY,YAAY;IACjC;IACA,IAAI,gBAAgB;QAClB,OAAO,YAAY,aAAa;IAClC;IACA,IAAI,YAAY;QACd,OAAO,YAAY,SAAS;IAC9B;IACA,IAAI,gBAAgB;QAClB,OAAO,YAAY,cAAc;IACnC;IACA,IAAI,eAAe;QACjB,OAAO,YAAY,YAAY;IACjC;IACA,IAAI,YAAY;QACd,OAAO,YAAY,SAAS;IAC9B;IACA,OAAO,YAAY,EAAE,SAAS,EAAE,WAAW,EAAE;QAC3C,OAAQ;YACN,KAAK;gBACH,IAAI,CAAC,SAAS,CAAC,cAAc;gBAC7B;QACJ;IACF;IACA,UAAU,YAAY,EAAE,WAAW,EAAE;QACnC,OAAQ;YACN,KAAK;gBACH,MAAM,OAAO,IAAI,CAAC,IAAI;gBACtB,IAAI,KAAK,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,GAAG,WAAW,IAC/C,IAAI,CAAC,IAAI,GAAG,YAAY,SAAS;qBAEjC,IAAI,CAAC,IAAI,GAAG,YAAY,QAAQ;gBAElC;QACJ;IACF;IACA,OAAO,iBAAiB;QACtb,WAAW,OAAO;QAChB,IAAI,CAAC,YAAY,KAAK,EACpB,YAAY,KAAK,GAAG,IAAI,kBAAkB,WAAW,CAAC,YAAY,cAAc;QAElF,OAAO,YAAY,KAAK;IAC1B;IACA,OAAO,aAAa,IAAI,WAAW,YAAY,YAAY,EAAE,YAAY,aAAa,EAAE,EAAE,EAAE;IAC5F,IAAI,aAAa;QACf,OAAO,YAAY,UAAU;IAC/B;IACA,OAAO,iBAAiB,YAAY,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI;QAChE,OAAO,IAAI,IAAI,IAAI;IACrB,GAAG;AACL;AAEA,4CAA4C;AAC5C,IAAI,0BAA0B,cAAc;IAC1C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,WAAW,EAAE,gBAAgB,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,EAAE,EAAE,EAAE,CACjF;AACF;AAEA,iCAAiC;AACjC,IAAI,eAAe;IACjB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO;IACP,SAAS;IACT;;;;GAIC,GACD,YAAY,QAAQ,CAAE;QACpB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,MAAM,GAAG;IAChB;IACA,WAAW;QACT,MAAM,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM;QAChC,OAAO,kBAAkB,MAAM,IAAI,CAAC,QAAQ,GAAG;IACjD;AACF;AAEA,6CAA6C;AAC7C,IAAI,2BAA2B,cAAc;IAC3C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,YAAY,QAAQ,EAAE,SAAS,CAAE;QAC/B,KAAK,CAAC;QACN,IAAI,CAAC,SAAS,GAAG;IACnB;IACA,SAAS,CAAC,EAAE;QACV,OAAO,MAAM,gBAAgB,CAAC,GAAG,IAAI,CAAC,SAAS;IACjD;IACA,WAAW;QACT,MAAM,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM;QAChC,OAAO,8BAA8B,MAAM,IAAI,CAAC,QAAQ,GAAG;IAC7D;AACF;AAEA,qCAAqC;AACrC,IAAI,mBAAmB,cAAc;IACnC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,YAAY,QAAQ,EAAE,SAAS,CAAE;QAC/B,KAAK,CAAC;QACN,IAAI,CAAC,SAAS,GAAG;IACnB;IACA,SAAS,CAAC,EAAE;QACV,MAAM,QAAQ,EAAE;QAChB,KAAK,MAAM,KAAK,MAAM,WAAW,CAAC,GAAI;YACpC,IAAI,aAAa,mBACf;gBAAA,IAAI,EAAE,SAAS,KAAK,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,SAAS,KAAK,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,EACjG,MAAM,IAAI,CAAC;YACb;QAEJ;QACA,OAAO;IACT;IACA,WAAW;QACT,MAAM,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM;QAChC,OAAO,sBAAsB,MAAM,IAAI,CAAC,QAAQ,GAAG;IACrD;AACF;AAEA,8CAA8C;AAC9C,IAAI,4BAA4B,cAAc;IAC5C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,YAAY,SAAS,EAAE,SAAS,CAAE;QAChC,KAAK,CAAC;QACN,IAAI,CAAC,SAAS,GAAG;IACnB;IACA,SAAS,CAAC,EAAE;QACV,OAAO,MAAM,iBAAiB,CAAC,GAAG,IAAI,CAAC,SAAS;IAClD;IACA,WAAW;QACT,MAAM,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM;QAChC,OAAO,+BAA+B,MAAM,IAAI,CAAC,QAAQ,GAAG;IAC9D;AACF;AAEA,sCAAsC;AACtC,IAAI,oBAAoB,cAAc;IACpC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,YAAY,SAAS,EAAE,SAAS,CAAE;QAChC,KAAK,CAAC;QACN,IAAI,CAAC,SAAS,GAAG;IACnB;IACA,SAAS,CAAC,EAAE;QACV,MAAM,QAAQ,EAAE;QAChB,KAAK,MAAM,KAAK,MAAM,WAAW,CAAC,GAAI;YACpC,IAAI,aAAa,gBAAgB,EAAE,MAAM,EACvC;gBAAA,IAAI,EAAE,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,EACrG,MAAM,IAAI,CAAC;YACb;QAEJ;QACA,OAAO;IACT;IACA,WAAW;QACT,MAAM,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM;QAChC,OAAO,uBAAuB,MAAM,IAAI,CAAC,QAAQ,GAAG;IACtD;AACF;AAEA,iDAAiD;AACjD,IAAI,+BAA+B,cAAc;IAC/C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,aAAc;QACZ,KAAK,CAAC,MAAM,QAAQ;IACtB;IACA,SAAS,CAAC,EAAE;QACV,IAAI,IAAI,CAAC,MAAM,EACb,OAAO,EAAE;QAEX,OAAO,MAAM,WAAW,CAAC;IAC3B;IACA,WAAW;QACT,MAAM,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM;QAChC,OAAO,kCAAkC,MAAM,IAAI,CAAC,QAAQ,GAAG;IACjE;AACF;AAEA,yCAAyC;AACzC,IAAI,uBAAuB,cAAc;IACvC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,aAAc;QACZ,KAAK,CAAC,MAAM,QAAQ;IACtB;IACA,SAAS,CAAC,EAAE;QACV,MAAM,OAAO,EAAE;QACf,IAAI,IAAI,CAAC,MAAM,EACb,OAAO;QAET,KAAK,MAAM,KAAK,MAAM,WAAW,CAAC,GAChC,KAAK,IAAI,CAAC;QAEZ,OAAO;IACT;IACA,WAAW;QACT,MAAM,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM;QAChC,OAAO,0BAA0B,MAAM,IAAI,CAAC,QAAQ,GAAG;IACzD;AACF;AAEA,0BAA0B;AAC1B,IAAI,QAAQ,MAAM;IAChB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,WAAW,IAAI;IACtB,8BAA8B;IAC9B,OAAO,MAAM,IAAI;IACjB,2BAA2B;IAC3B,KAAK;IACL,SAAS;IACT,OAAO;IACP,YAAY,MAAM,EAAE,IAAI,CAAE;QACxB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7B;IACA,OAAO,QAAQ,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE;QAClC,MAAM,IAAI,IAAI,OAAO,QAAQ;QAC7B,OAAO,EAAE,QAAQ,CAAC;IACpB;IACA,uDAAuD;IACvD,MAAM,IAAI,EAAE;QACV,MAAM,QAAQ,IAAI,WAAW,WAAW,UAAU,CAAC;QACnD,MAAM,OAAO,GAAG,CAAC;YACf,MAAM;QACR;QACA,MAAM,oBAAoB;QAC1B,MAAM,gBAAgB,CAAC,IAAI;QAC3B,MAAM,cAAc,IAAI,kBAAkB;QAC1C,IAAI;YACF,YAAY,IAAI;QAClB,EAAE,OAAO,GAAG;YACV,IAAI,aAAa,2BAA2B;gBAC1C,MAAM,MAAM,MAAM,MAAM;gBACxB,MAAM,MAAM,2CAA2C,MAAM,eAAe,OAAO,UAAU,EAAE,OAAO;gBACtG,MAAM,IAAI,WAAW;YACvB;YACA,MAAM;QACR;QACA,MAAM,SAAS,YAAY,SAAS;QACpC,MAAM,WAAW,EAAE;QACnB,MAAM,KAAK,OAAO,MAAM;QACxB,IAAI,IAAI;QACR,MACE,MAAO,IAAI,GAAI;YACb,MAAM,KAAK,MAAM,CAAC,EAAE;YACpB,IAAI;YACJ,OAAQ,GAAG,IAAI;gBACb,KAAK,WAAW,IAAI;gBACpB,KAAK,WAAW,QAAQ;oBACtB,MAAM,WAAW,GAAG,IAAI,KAAK,WAAW,QAAQ;oBAChD;oBACA,OAAO,MAAM,CAAC,EAAE;oBAChB,MAAM,SAAS,KAAK,IAAI,KAAK,WAAW,IAAI;oBAC5C,IAAI,QAAQ;wBACV;wBACA,OAAO,MAAM,CAAC,EAAE;oBAClB;oBACA,MAAM,cAAc,IAAI,CAAC,eAAe,CAAC,MAAM;oBAC/C,YAAY,MAAM,GAAG;oBACrB,SAAS,IAAI,CAAC;oBACd;oBACA;gBACF,KAAK,WAAW,SAAS;gBACzB,KAAK,WAAW,QAAQ;gBACxB,KAAK,WAAW,QAAQ;oBACtB,SAAS,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI;oBACvC,EAAE;oBACF;gBACF,KAAK,MAAM,GAAG;oBACZ,MAAM;gBACR;oBACE,MAAM,IAAI,MAAM,0BAA0B;YAC9C;QACF;QACF,OAAO;IACT;IACA;;;GAGC,GACD,SAAS,CAAC,EAAE;QACV,MAAM,YAAY,IAAI,kBAAkB;QACxC,UAAU,QAAQ,CAAC;QACnB,IAAI,OAAO,aAAa,GAAG,IAAI,IAAI;YAAC;SAAU;QAC9C,IAAI,IAAI;QACR,MAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAE;YAC/B,MAAM,OAAO,aAAa,GAAG,IAAI;YACjC,KAAK,MAAM,QAAQ,KACjB,IAAI,KAAK,aAAa,KAAK,GAAG;gBAC5B,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC;gBAC3C,SAAS,OAAO,CAAC,CAAC;oBAChB,KAAK,GAAG,CAAC;gBACX,GAAG;YACL;YAEF;YACA,OAAO;QACT;QACA,OAAO;IACT;IACA;;;;GAIC,GACD,gBAAgB,SAAS,EAAE,QAAQ,EAAE;QACnC,IAAI,UAAU,IAAI,KAAK,MAAM,GAAG,EAC9B,MAAM,IAAI,MAAM;QAElB,MAAM,OAAO,UAAU,IAAI;QAC3B,IAAI,QAAQ,MACV,MAAM,IAAI,MAAM;QAElB,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;QACvC,MAAM,YAAY,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;QAC3C,OAAQ,UAAU,IAAI;YACpB,KAAK,WAAW,QAAQ;gBACtB,OAAO,WAAW,IAAI,iCAAiC,IAAI;YAC7D,KAAK,WAAW,SAAS;YACzB,KAAK,WAAW,MAAM;gBACpB,IAAI,UAAU,MAAM,YAAY,EAC9B,MAAM,IAAI,MAAM,OAAO,eAAe,UAAU,KAAK,GAAG;gBAE1D,OAAO,WAAW,IAAI,0BAA0B,MAAM,SAAS,IAAI,kBAAkB,MAAM;YAC7F;gBACE,IAAI,cAAc,IAChB,MAAM,IAAI,MAAM,OAAO,eAAe,UAAU,KAAK,GAAG;gBAE1D,OAAO,WAAW,IAAI,yBAAyB,MAAM,aAAa,IAAI,iBAAiB,MAAM;QACjG;IACF;AACF;AAEA,4BAA4B;AAC5B,IAAI,QAAQ;IACV,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;AACH;AAEA,qCAAqC;AACrC,IAAI,iBAAiB;IACnB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;GAEC,GACD,KAAK;IACL;;GAEC,GACD,QAAQ;IACR;;GAEC,GACD,OAAO;IACP;;GAEC,GACD,eAAe;IACf;;;;;;;;;;GAUC,GACD,YAAY,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,cAAc,CAAE;QACjD,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,cAAc,GAAG;IACxB;IACA;;;;;;;;;;;;;;;GAeC,GACD,IAAI,KAAK,EAAE;QACT,MAAM,aAAa,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACnC,IAAI,CAAC,cAAc,WAAW,MAAM,KAAK,GACvC,OAAO;QAET,OAAO,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE;IAC1C;IACA;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,KAAK,EAAE;QACZ,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC9B,OAAO,SAAS,EAAE;IACpB;IACA;;;;;;;;;GASC,GACD,YAAY;QACV,OAAO,IAAI,CAAC,MAAM;IACpB;IACA;;;;;GAKC,GACD,oBAAoB;QAClB,OAAO,IAAI,CAAC,cAAc;IAC5B;IACA;;;;GAIC,GACD,YAAY;QACV,OAAO,CAAC,IAAI,CAAC,cAAc;IAC7B;IACA;;;;GAIC,GACD,aAAa;QACX,OAAO,IAAI,CAAC,OAAO;IACrB;IACA;;;;GAIC,GACD,UAAU;QACR,OAAO,IAAI,CAAC,IAAI;IAClB;IACA,WAAW;QACT,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,KAAK,cAAc,SAAS,QAAQ,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;IACpG;AACF;AAEA,uCAAuC;AACvC,IAAI,mBAAmB;IACrB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;GAEC,GACD,iBAAiB;IACjB;;GAEC,GACD,QAAQ;IACR;;GAEC,GACD,YAAY;IACZ;;GAEC,GACD,QAAQ;IACR;;;;;;;;;GASC,GACD,YAAY,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,WAAW,CAAE;QAC3D,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,WAAW,GAAG;IACrB;IACA;;;;;;;GAOC,GACD,MAAM,IAAI,EAAE;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI;IACtC;IACA;;;;;;GAMC,GACD,QAAQ,IAAI,EAAE;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,EAAE,SAAS;IACjD;IACA;;;;;;;;;;GAUC,GACD,QAAQ,IAAI,EAAE,KAAK,EAAE;QACnB,MAAM,WAAW,MAAM,OAAO,CAAC,MAAM,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS;QAClE,MAAM,UAAU,IAAI;QACpB,KAAK,MAAM,KAAK,SAAU;YACxB,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC;YACzB,IAAI,MAAM,SAAS,IACjB,QAAQ,IAAI,CAAC;QAEjB;QACA,OAAO;IACT;IACA;;;;;GAKC,GACD,aAAa;QACX,OAAO,IAAI,CAAC,OAAO;IACrB;IACA;;;;GAIC,GACD,aAAa;QACX,OAAO,IAAI,CAAC,OAAO;IACrB;IACA;;;;;;GAMC,GACD,sBAAsB;QACpB,OAAO,IAAI,CAAC,gBAAgB;IAC9B;IACA;;;;;;GAMC,GACD,iBAAiB;QACf,OAAO,IAAI,CAAC,WAAW;IACzB;AACF;AAEA,gCAAgC;AAChC,IAAI,yBAAyB,cAAc;IACzC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,UAAU,CAAE;QACtB,KAAK,CAAC;YAAE,SAAS;YAAI;YAAY,OAAO,WAAW,WAAW;YAAE,KAAK,WAAW,OAAO;QAAC;QACxF,IAAI,CAAC,cAAc,GAAG,WAAW,eAAe;IAClD;AACF;AAEA,kCAAkC;AAClC,IAAI,2BAA2B,cAAc;IAC3C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,EAAE;IACd,iBAAiB,EAAE;IACnB,UAAU;IACV,YAAY,UAAU,EAAE,SAAS,EAAE,UAAU,IAAI,CAAE;QACjD,KAAK,CAAC;YACJ,SAAS,cAAc,aAAa,gBAAgB,WAAW;YAC/D;YACA,OAAO,WAAW,WAAW;YAC7B,KAAK,WAAW,OAAO;QACzB;QACA,MAAM,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,WAAW,KAAK,CAAC;QACjD,MAAM,QAAQ,EAAE,WAAW,CAAC,EAAE;QAC9B,IAAI,iBAAiB,qBAAqB;YACxC,IAAI,CAAC,SAAS,GAAG,MAAM,SAAS;YAChC,IAAI,CAAC,cAAc,GAAG,MAAM,SAAS;QACvC,OAAO;YACL,IAAI,CAAC,SAAS,GAAG;YACjB,IAAI,CAAC,cAAc,GAAG;QACxB;QACA,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,cAAc,GAAG,WAAW,eAAe;IAClD;AACF;AACA,IAAI,gBAAgB,aAAa,GAAG,OAAO,CAAC,WAAW;IACrD,IAAI,YAAY,MACd,OAAO;IAET,OAAO,wBAAwB,YAAY;AAC7C,GAAG;AAEH,8BAA8B;AAC9B,IAAI,uBAAuB;IACzB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;;GAMC,GACD,oBAAoB,MAAM;IAC1B;;;;;;GAMC,GACD,iBAAiB,GAAG;IACpB,kBAAkB,IAAI,cAAc;IACpC;;;;;;;GAOC,GACD,oBAAoB,KAAK;IACzB,iBAAiB,EAAE;IACnB;;;GAGC,GACD,MAAM,UAAU,EAAE;QAChB,IAAI,CAAC,iBAAiB,CAAC;IACzB;IACA;;;;;GAKC,GACD,oBAAoB,WAAW,EAAE;QAC/B,IAAI,CAAC,iBAAiB,GAAG;IAC3B;IACA,oBAAoB,WAAW,EAAE;QAC/B,OAAO,IAAI,CAAC,iBAAiB;IAC/B;IACA;;;GAGC,GACD,kBAAkB,WAAW,EAAE;QAC7B,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,eAAe,GAAG,IAAI;QAC3B,IAAI,CAAC,cAAc,GAAG;IACxB;IACA;;GAEC,GACD,YAAY,UAAU,EAAE;QACtB,IAAI,CAAC,iBAAiB,CAAC;IACzB;IACA;;;;;;;;;;GAUC,GACD,YAAY,UAAU,EAAE,CAAC,EAAE;QACzB,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAC3B;QAEF,IAAI,CAAC,mBAAmB,CAAC;QACzB,IAAI,aAAa,sBACf,IAAI,CAAC,yBAAyB,CAAC,YAAY;aACtC,IAAI,aAAa,wBACtB,IAAI,CAAC,mBAAmB,CAAC,YAAY;aAChC,IAAI,aAAa,0BACtB,IAAI,CAAC,qBAAqB,CAAC,YAAY;aAEvC,WAAW,oBAAoB,CAAC,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE;IAEjE;IACA;;;;;GAKC,GACD,QAAQ,UAAU,EAAE,EAAE,EAAE;QACtB,IAAI,IAAI,CAAC,cAAc,KAAK,WAAW,WAAW,EAAE,SAAS,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,KAAK,GACzG,WAAW,OAAO;QAEpB,IAAI,CAAC,cAAc,GAAG,WAAW,WAAW,EAAE,SAAS;QACvD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,KAAK;QAC5C,MAAM,YAAY,IAAI,CAAC,mBAAmB,CAAC;QAC3C,IAAI,CAAC,YAAY,CAAC,YAAY;IAChC;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CC,GACD,KAAK,UAAU,EAAE;QACf,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAC3B;QAEF,MAAM,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,WAAW,KAAK,CAAC;QACjD,MAAM,KAAK,WAAW,WAAW,CAAC,EAAE,CAAC;QACrC,MAAM,aAAa,WAAW,GAAG,CAAC,UAAU,CAAC;QAC7C,IAAI,WAAW,QAAQ,CAAC,KAAK;YAC3B,IAAI,CAAC,iBAAiB,GAAG;YACzB,IAAI,CAAC,cAAc,GAAG,SAAS,oBAAoB;YACnD;QACF;QACA,IAAI,WAAW,QAAQ,CAAC,MAAM,OAAO,GAAG;YACtC,IAAI,IAAI,CAAC,iBAAiB,KAAK,MAAM;gBACnC,IAAI,CAAC,iBAAiB,GAAG,WAAW,OAAO;gBAC3C,IAAI,CAAC,cAAc,GAAG,WAAW,KAAK;YACxC;YACA;QACF;QACA,OAAQ,EAAE,WAAW,CAAC,SAAS;YAC7B,KAAK,SAAS,WAAW;YACzB,KAAK,SAAS,gBAAgB;YAC9B,KAAK,SAAS,gBAAgB;YAC9B,KAAK,SAAS,eAAe;gBAC3B,IAAI,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,MAC3C;gBAEF,MAAM,IAAI,uBAAuB;YAEnC,KAAK,SAAS,cAAc;YAC5B,KAAK,SAAS,cAAc;gBAAE;oBAC5B,IAAI,CAAC,mBAAmB,CAAC;oBACzB,MAAM,YAAY,IAAI;oBACtB,UAAU,MAAM,CAAC,WAAW,iBAAiB;oBAC7C,MAAM,iCAAiC,UAAU,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;oBACjF,IAAI,CAAC,YAAY,CAAC,YAAY;oBAC9B;gBACF;YACA;QACF;IACF;IACA;;;;;;;;GAQC,GACD,0BAA0B,UAAU,EAAE,CAAC,EAAE;QACvC,IAAI,EAAE,OAAO,CAAC,MAAM,GAAG,GAAG;YACxB,WAAW,oBAAoB,CAAC,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE;YAC7D;QACF;QACA,MAAM,SAAS,WAAW,WAAW;QACrC,IAAI;QACJ,IAAI,WAAW,QAAQ,EAAE,UAAU;YACjC,IAAI,EAAE,UAAU,CAAC,IAAI,KAAK,MAAM,GAAG,EACjC,QAAQ;iBAER,QAAQ,OAAO,gBAAgB,CAAC,EAAE,UAAU,EAAE,EAAE,cAAc;eAGhE,QAAQ;QAEV,MAAM,MAAM,oCAAoC,IAAI,CAAC,gBAAgB,CAAC;QACtE,WAAW,oBAAoB,CAAC,KAAK,EAAE,cAAc,EAAE;IACzD;IACA;;;;;;;GAOC,GACD,oBAAoB,UAAU,EAAE,CAAC,EAAE;QACjC,IAAI,EAAE,OAAO,CAAC,MAAM,GAAG,GAAG;YACxB,WAAW,oBAAoB,CAAC,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE;YAC7D;QACF;QACA,MAAM,MAAM,sBAAsB,IAAI,CAAC,oBAAoB,CAAC,EAAE,cAAc,IAAI,gBAAgB,EAAE,iBAAiB,GAAG,sBAAsB,CAAC,WAAW,UAAU;QAClK,WAAW,oBAAoB,CAAC,KAAK,EAAE,cAAc,EAAE;IACzD;IACA;;;;;;;;GAQC,GACD,sBAAsB,UAAU,EAAE,CAAC,EAAE;QACnC,MAAM,WAAW,WAAW,SAAS,CAAC,WAAW,OAAO,CAAC,SAAS,CAAC;QACnE,MAAM,MAAM,UAAU,WAAW,MAAM,EAAE,OAAO;QAChD,WAAW,oBAAoB,CAAC,KAAK,EAAE,cAAc,EAAE;IACzD;IACA;;;;;;;;;;;;;;;;;GAiBC,GACD,oBAAoB,UAAU,EAAE;QAC9B,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAC3B;QAEF,IAAI,CAAC,mBAAmB,CAAC;QACzB,MAAM,IAAI,WAAW,eAAe;QACpC,MAAM,YAAY,IAAI,CAAC,oBAAoB,CAAC;QAC5C,MAAM,YAAY,IAAI,CAAC,iBAAiB,CAAC;QACzC,MAAM,MAAM,sBAAsB,YAAY,gBAAgB,UAAU,sBAAsB,CAAC,WAAW,UAAU;QACpH,WAAW,oBAAoB,CAAC,KAAK,GAAG;IAC1C;IACA;;;;;;;;;;;;;;;;GAgBC,GACD,mBAAmB,UAAU,EAAE;QAC7B,IAAI,IAAI,CAAC,mBAAmB,CAAC,aAC3B;QAEF,IAAI,CAAC,mBAAmB,CAAC;QACzB,MAAM,IAAI,WAAW,eAAe;QACpC,MAAM,YAAY,IAAI,CAAC,iBAAiB,CAAC;QACzC,MAAM,MAAM,aAAa,UAAU,sBAAsB,CAAC,WAAW,UAAU,IAAI,SAAS,IAAI,CAAC,oBAAoB,CAAC;QACtH,WAAW,oBAAoB,CAAC,KAAK,GAAG;IAC1C;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CC,GACD,cAAc,UAAU,EAAE;QACxB,MAAM,gBAAgB,IAAI,CAAC,mBAAmB,CAAC;QAC/C,IAAI,eAAe;YACjB,WAAW,OAAO;YAClB,OAAO;QACT;QACA,IAAI,IAAI,CAAC,oBAAoB,CAAC,aAC5B,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAE/B,MAAM,IAAI,uBAAuB;IACnC;IACA;;;;;;;;;;;;;;;;GAgBC,GACD,qBAAqB,UAAU,EAAE;QAC/B,MAAM,oBAAoB,WAAW,WAAW,EAAE,GAAG,MAAM;QAC3D,MAAM,MAAM,WAAW,GAAG;QAC1B,MAAM,eAAe,IAAI,MAAM,CAAC,WAAW,KAAK,CAAC;QACjD,MAAM,OAAO,aAAa,WAAW,CAAC,EAAE,CAAC,MAAM;QAC/C,MAAM,iBAAiB,IAAI,UAAU,CAAC,MAAM,WAAW,OAAO,IAAI,KAAK;QACvE,IAAI,eAAe,QAAQ,CAAC,oBAAoB;YAC9C,IAAI,CAAC,kBAAkB,CAAC;YACxB,OAAO;QACT;QACA,OAAO;IACT;IACA;;;;;;;;;;;;;;;;;;GAkBC,GACD,oBAAoB,UAAU,EAAE;QAC9B,MAAM,gBAAgB,WAAW,WAAW,EAAE,GAAG,MAAM;QACvD,MAAM,YAAY,IAAI,CAAC,iBAAiB,CAAC;QACzC,IAAI,UAAU,QAAQ,CAAC,gBAAgB;YACrC,IAAI,CAAC,mBAAmB,CAAC;YACzB,WAAW,OAAO;YAClB,MAAM,gBAAgB,WAAW,eAAe;YAChD,IAAI,CAAC,WAAW,CAAC;YACjB,OAAO;QACT;QACA,OAAO;IACT;IACA;;;;;;;;;;;;;;;;;;;GAmBC,GACD,iBAAiB,UAAU,EAAE;QAC3B,MAAM,gBAAgB,WAAW,eAAe;QAChD,MAAM,YAAY,IAAI,CAAC,iBAAiB,CAAC;QACzC,IAAI,oBAAoB,MAAM,YAAY;QAC1C,IAAI,UAAU,MAAM,KAAK,GACvB,oBAAoB,UAAU,UAAU;QAE1C,IAAI;QACJ,IAAI,sBAAsB,MAAM,GAAG,EACjC,YAAY;aAEZ,YAAY,cAAc,WAAW,UAAU,CAAC,cAAc,CAAC,qBAAqB;QAEtF,IAAI,UAAU;QACd,MAAM,WAAW,WAAW,WAAW,EAAE,GAAG,CAAC;QAC7C,IAAI,QAAQ,IAAI,KAAK,MAAM,GAAG,IAAI,aAAa,MAC7C,UAAU;QAEZ,OAAO,WAAW,eAAe,GAAG,MAAM,CACxC,QAAQ,MAAM,EACd,mBACA,WACA,MAAM,eAAe,EACrB,IACA,IACA,QAAQ,IAAI,EACZ,QAAQ,MAAM;IAElB;IACA,kBAAkB,UAAU,EAAE;QAC5B,OAAO,WAAW,iBAAiB;IACrC;IACA;;;;;;;;GAQC,GACD,qBAAqB,CAAC,EAAE;QACtB,IAAI,MAAM,MACR,OAAO;QAET,IAAI,IAAI,EAAE,IAAI;QACd,IAAI,CAAC;YACH,IAAI,EAAE,IAAI,KAAK,MAAM,GAAG,EACtB,IAAI;iBAEJ,IAAI,MAAM,EAAE,IAAI,GAAG;;QAGvB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B;IACA,iBAAiB,CAAC,EAAE;QAClB,IAAI,EAAE,OAAO,CAAC,OAAO;QACrB,IAAI,EAAE,OAAO,CAAC,OAAO;QACrB,IAAI,EAAE,OAAO,CAAC,OAAO;QACrB,OAAO,MAAM,IAAI;IACnB;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4FC,GACD,oBAAoB,UAAU,EAAE;QAC9B,MAAM,MAAM,WAAW,GAAG;QAC1B,IAAI,MAAM,WAAW,OAAO;QAC5B,MAAM,aAAa,IAAI;QACvB,MAAO,QAAQ,QAAQ,IAAI,aAAa,IAAI,EAAG;YAC7C,MAAM,gBAAgB,IAAI,MAAM,CAAC,IAAI,aAAa,CAAC;YACnD,MAAM,KAAK,cAAc,WAAW,CAAC,EAAE;YACvC,MAAM,SAAS,IAAI,UAAU,CAAC,GAAG,WAAW;YAC5C,WAAW,MAAM,CAAC;YAClB,MAAM,IAAI,MAAM;QAClB;QACA,WAAW,SAAS,CAAC,MAAM,OAAO;QAClC,OAAO;IACT;IACA,0DAA0D,GAC1D,aAAa,UAAU,EAAE,GAAG,EAAE;QAC5B,IAAI,QAAQ,WAAW,WAAW,EAAE,GAAG,MAAM;QAC7C,MAAO,UAAU,MAAM,GAAG,IAAI,CAAC,IAAI,QAAQ,CAAC,OAAQ;YAClD,WAAW,OAAO;YAClB,QAAQ,WAAW,WAAW,EAAE,GAAG,MAAM;QAC3C;IACF;AACF;AAEA,2BAA2B;AAC3B,IAAI,oBAAoB,cAAc;IACpC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;GAKC,GACD,QAAQ,UAAU,EAAE,CAAC,EAAE;QACrB,MAAM,IAAI,2BAA2B;IACvC;IACA;;;GAGC,GACD,cAAc,UAAU,EAAE;QACxB,MAAM,YAAY,IAAI,uBAAuB;QAC7C,MAAM,IAAI,2BAA2B;IACvC;IACA,mEAAmE;IACnE,KAAK,WAAW,EAAE,CAClB;AACF;AAEA,yBAAyB;AACzB,IAAI,kBAAkB;IACpB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;GAKC,GACD,WAAW;IACX,eAAe,mBAAmB,OAAO,CAAC;IAC1C;;GAEC,GACD,SAAS,EAAE,CAAC;IACZ;;;;GAIC,GACD,IAAI,EAAE;IACN;;GAEC,GACD,WAAW,KAAK;IAChB,YAAY,MAAM,EAAE,UAAU,CAAE;QAC9B,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,UAAU,GAAG,cAAc;IAClC;IACA,IAAI,SAAS;QACX,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;QAEnC,IAAI,IAAI,CAAC,QAAQ,KAAK,MACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;QAE7B,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG;YAC1B,MAAM,YAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE;YACrD,MAAM,YAAY,UAAU,IAAI;YAChC,IAAI,WAAW;gBACb,MAAM,cAAc,UAAU,WAAW,CAAC;gBAC1C,IAAI,eAAe,GACjB,OAAO,UAAU,MAAM,GAAG,cAAc;YAE5C;YACA,OAAO,UAAU,MAAM,GAAG,UAAU,IAAI,GAAG,UAAU,KAAK,GAAG;QAC/D;QACA,OAAO;IACT;IACA,YAAY;QACV,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAChC,IAAI,IAAI,CAAC,QAAQ,KAAK,MAAM;gBAC1B,IAAI,QAAQ;gBACZ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG;oBAC1B,MAAM,eAAe,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI;oBAC7D,IAAI,iBAAiB,IACnB,QAAQ,eAAe;gBAE3B;gBACA,MAAM,OAAO,KAAK,GAAG,CAAC,IAAI,QAAQ;gBAClC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CACtC;oBAAC,IAAI;oBAAE,IAAI,CAAC,WAAW;iBAAC,EACxB,MAAM,GAAG,EACT,OACA,MAAM,eAAe,EACrB,OACA,MACA,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,MAAM;YAEf;YACA,OAAO,IAAI,CAAC,QAAQ;QACtB;QACA,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7B,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,EAAE,IAAI,KAAK,MAAM,GAAG,EAC3D,IAAI,CAAC,QAAQ,GAAG;QAElB,IAAI,CAAC,CAAC;QACN,OAAO;IACT;IACA,IAAI,OAAO;QACT,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;QAEjC,IAAI,IAAI,CAAC,QAAQ,KAAK,MACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI;QAE3B,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG;YAC1B,MAAM,YAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE;YACrD,IAAI,OAAO,UAAU,IAAI;YACzB,MAAM,YAAY,UAAU,IAAI;YAChC,IAAI,WAAW;gBACb,KAAK,MAAM,QAAQ,UACjB,IAAI,SAAS,MACX;YAGN;YACA,OAAO;QACT;QACA,OAAO;IACT;IACA,IAAI,cAAc;QAChB,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW;QAExC,IAAI,IAAI,CAAC,QAAQ,KAAK,MACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW;QAElC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GACvB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,WAAW;QAExD,OAAO;IACT;IACA,gBAAgB;QACd,IAAI,IAAI,CAAC,UAAU,KAAK,MACtB,OAAO,IAAI,CAAC,UAAU;QAExB,MAAM,cAAc,IAAI,CAAC,WAAW;QACpC,IAAI,gBAAgB,MAClB,OAAO,YAAY,aAAa;QAElC,OAAO;IACT;AACF;AAEA,gCAAgC;AAChC,IAAI,yBAAyB,cAAc;IACzC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,yDAAyD,GACzD,CAAA,SAAU,CAAC;IACX,YAAY,SAAS,EAAE,MAAM,EAAE,mBAAmB,CAAE;QAClD,KAAK,CAAC,QAAQ;QACd,IAAI,CAAC,CAAA,SAAU,GAAG;IACpB;IACA,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,CAAA,SAAU;IACxB;AACF;AAEA,uBAAuB;AACvB,IAAI,gBAAgB;IAClB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO;IACP,YAAY,MAAM,CAAE;QAClB,IAAI,CAAC,MAAM,GAAG;IAChB;IACA,eAAe,GAAG,EAAE;QAClB,QAAQ,GAAG,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,GAAG,aAAa,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,IAAI;IAC/G;IACA,cAAc,IAAI,EAAE;QAClB,QAAQ,GAAG,CAAC,aAAa,KAAK,SAAS,KAAK,WAAW,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;IAC7G;IACA,cAAc,GAAG,EAAE;QACjB,QAAQ,GAAG,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,GAAG,aAAa,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,IAAI;IAC/G;IACA,eAAe,KAAK,EAAE,CACtB;AACF;AAEA,gBAAgB;AAChB,IAAI,SAAS,cAAc;IACzB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,sBAAsB,GACtB,UAAU,KAAK;IACf;;;;;;GAMC,GACD,kBAAkB,KAAK;IACvB;;;;;;GAMC,GACD,eAAe,IAAI,uBAAuB;IAC1C;;;GAGC,GACD,qBAAqB;IACrB,UAAU,KAAK;IACf,kBAAkB,EAAE,CAAC;IACrB;;;;;GAKC,GACD,iBAAiB,KAAK;IACtB;;;GAGC,GACD,eAAe,EAAE;IACjB,qEAAqE,GACrE,aAAa,MAAM;IACnB;;;;;;GAMC,GACD,SAAS,KAAK;IACd;;;;;;;GAOC,GACD,qBAAqB,KAAK;IAC1B,CAAA,WAAY,CAAC;IACb;;GAEC,GACD,YAAY,KAAK,CAAE;QACjB,KAAK;QACL,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,CAAA,WAAY,GAAG;IACtB;IACA,6BAA6B,GAC7B,MAAM,oBAAoB,IAAI,EAAE;QAC9B,IAAI,mBACF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QAExB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI;QAC5B,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,QAAQ,CAAC;QACd,IAAI,CAAC,eAAe,GAAG,EAAE;QACzB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QAC1B,IAAI,IAAI,CAAC,WAAW,EAClB,IAAI,CAAC,WAAW,CAAC,KAAK;IAE1B;IACA;;;;;;;;;;;;;;;;;GAiBC,GACD,MAAM,KAAK,EAAE;QACX,IAAI,IAAI,IAAI,CAAC,eAAe;QAC5B,IAAI,EAAE,IAAI,KAAK,OAAO;YACpB,IAAI,UAAU,MAAM,GAAG,EACrB,IAAI,CAAC,UAAU,GAAG;YAEpB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI;YAClC,IAAI,CAAC,OAAO;QACd,OAAO;YACL,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI;YACxC,IAAI,IAAI,CAAC,eAAe,IAAI,EAAE,UAAU,KAAK,IAC3C,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE;QAEjE;QACA,OAAO;IACT;IACA;;;;;;;;;;;;;;;;GAgBC,GACD,gBAAgB;QACd,IAAI,IAAI,IAAI,CAAC,eAAe;QAC5B,IAAI,EAAE,IAAI,GAAG,GAAG;YACd,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI;YAClC,IAAI,CAAC,OAAO;QACd,OAAO;YACL,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI;YACxC,IAAI,IAAI,CAAC,eAAe,IAAI,EAAE,UAAU,KAAK,IAC3C,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE;QAEjE;QACA,OAAO;IACT;IACA,oBAAoB;QAClB,OAAO,IAAI,CAAC,cAAc,IAAI,EAAE;IAClC;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,iBAAiB,QAAQ,EAAE;QACzB,IAAI,aAAa,MACf,MAAM,IAAI,MAAM;QAElB,IAAI,IAAI,CAAC,cAAc,KAAK,MAC1B,IAAI,CAAC,cAAc,GAAG,EAAE;QAE1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;IAC3B;IACA;;;;;;;GAOC,GACD,oBAAoB,QAAQ,EAAE;QAC5B,IAAI,IAAI,CAAC,cAAc,KAAK,QAAQ,aAAa,MAAM;YACrD,MAAM,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;YACxC,IAAI,OAAO,GACT,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK;YAElC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,GACjC,IAAI,CAAC,cAAc,GAAG;QAE1B;IACF;IACA,8BAA8B;IAC9B,uBAAuB;QACrB,IAAI,CAAC,cAAc,GAAG;IACxB;IACA,qDAAqD;IACrD,wBAAwB;QACtB,IAAI,IAAI,CAAC,cAAc,KAAK,MAAM;YAChC,MAAM,MAAM,IAAI,CAAC,OAAO;YACxB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAC3B,SAAS,cAAc,CAAC;gBACxB,IAAI,SAAS,CAAC;YAChB;QACF;IACF;IACA;;;;GAIC,GACD,uBAAuB;QACrB,IAAI,IAAI,CAAC,cAAc,KAAK,MAAM;YAChC,MAAM,MAAM,IAAI,CAAC,OAAO;YACxB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,OAAO,CAAC,CAAC;gBAC9C,IAAI,QAAQ,CAAC;gBACb,SAAS,aAAa,CAAC;YACzB;QACF;IACF;IACA,kBAAkB;QAChB,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY;IAClD;IACA,6EAA6E;IAC7E,gBAAgB,OAAO,EAAE;QACvB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,GAAG;IAC9C;IACA;;;;;;;;;;GAUC,GACD,wBAAwB,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE;QACxD,IAAI,CAAC,OACH;YAAA,IAAI,IAAI,CAAC,WAAW,KAAK,MAAM;gBAC7B,MAAM,cAAc,IAAI,CAAC,WAAW,CAAC,WAAW;gBAChD,IAAI,uBAAuB,OACzB,QAAQ;YAEZ;QAAA;QAEF,IAAI,CAAC,OACH,MAAM,IAAI,MAAM;QAElB,MAAM,KAAK,IAAI,wBAAwB,OAAO,IAAI;QAClD,OAAO,GAAG,OAAO,CAAC,SAAS;IAC7B;IACA;;;;;;GAMC,GACD,uBAAuB;QACrB,MAAM,gBAAgB,IAAI,CAAC,aAAa;QACxC,IAAI,kBAAkB,MACpB,MAAM,IAAI,MAAM;QAElB,IAAI,IAAI,CAAC,kBAAkB,KAAK,MAC9B,OAAO,IAAI,CAAC,kBAAkB;QAEhC,MAAM,yBAAyB;YAAE,UAAU;YAAO,WAAW;YAAM,+BAA+B;QAAK;QACvG,IAAI,CAAC,kBAAkB,GAAG,IAAI,gBAAgB,wBAAwB,WAAW,CAAC;QAClF,OAAO,IAAI,CAAC,kBAAkB;IAChC;IACA;;;GAGC,GACD,IAAI,uBAAuB;QACzB,OAAO,IAAI,CAAC,YAAY;IAC1B;IACA,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,CAAA,WAAY;IAC1B;IACA,IAAI,YAAY,KAAK,EAAE;QACrB,IAAI,CAAC,WAAW,GAAG;IACrB;IACA,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,CAAA,WAAY;IAC1B;IACA,+CAA+C,GAC/C,IAAI,YAAY,KAAK,EAAE;QACrB,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,CAAA,WAAY,GAAG;IACtB;IACA;;;GAGC,GACD,kBAAkB;QAChB,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;IAC7B;IACA,qBAAqB,GAAG,EAAE,cAAc,EAAE,GAAG,EAAE;QAC7C,iBAAiB,kBAAkB;QACnC,MAAM,OAAO;QACb,IAAI,mBAAmB,MACrB,iBAAiB,IAAI,CAAC,eAAe;QAEvC,IAAI,CAAC,YAAY,IAAI;QACrB,MAAM,OAAO,eAAe,IAAI;QAChC,MAAM,SAAS,eAAe,MAAM;QACpC,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,IAAI,EAAE,gBAAgB,MAAM,QAAQ,KAAK;IAClF;IACA;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,UAAU;QACR,MAAM,IAAI,IAAI,CAAC,eAAe;QAC9B,IAAI,EAAE,IAAI,KAAK,MAAM,GAAG,EACtB,IAAI,CAAC,WAAW,CAAC,OAAO;QAE1B,MAAM,cAAc,IAAI,CAAC,cAAc,KAAK,QAAQ,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG;QACjF,IAAI,IAAI,CAAC,eAAe,IAAI,aAAa;YACvC,IAAI;YACJ,IAAI,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,GAC5C,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE;iBAEpE,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;YAEnC,IAAI,aACF,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAC3B,IAAI,gBAAgB,WAClB,SAAS,cAAc,CAAC;qBAExB,SAAS,aAAa,CAAC;YAE3B;QAEJ;QACA,OAAO;IACT;IACA,wBAAwB;QACtB,IAAI,IAAI,CAAC,OAAO,EAAE,QAChB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO;IAE7C;IACA;;;GAGC,GACD,UAAU,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE;QACrC,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACzC,IAAI,IAAI,CAAC,eAAe,EACtB,IAAI,CAAC,qBAAqB;QAE5B,IAAI,CAAC,qBAAqB;IAC5B;IACA,WAAW;QACT,IAAI,IAAI,CAAC,UAAU,EACjB,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;aAExC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QAE1C,IAAI,CAAC,oBAAoB;QACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa;QACvC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;IACpC;IACA,cAAc,QAAQ,EAAE,MAAM,EAAE;QAC9B,SAAS,YAAY,CAAC;QACtB,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,OAAO,KAAK,UAC3C;YAAA,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ;gBACxB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe;gBACnC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC/B;QAAA;QAEF,IAAI,CAAC,OAAO,GAAG;IACjB;IACA;;;;;GAKC,GACD,gBAAgB;QACd,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,GAClC,OAAO;QAET,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,EAAE;IAC9D;IACA,mBAAmB,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE;QACzD,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACzC,IAAI,CAAC,qBAAqB;IAC5B;IACA,oDAAoD,GACpD,wBAAwB,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE;QACnD,MAAM,WAAW,IAAI,CAAC,OAAO;QAC7B,SAAS,MAAM,GAAG;QAClB,SAAS,aAAa,GAAG;QACzB,SAAS,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,SAAS,KAAK;QACnC,IAAI,IAAI,CAAC,eAAe,EACtB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QAExB,IAAI,CAAC,qBAAqB;IAC5B;IACA,wBAAwB,MAAM,EAAE;QAC9B,IAAI,CAAC,eAAe,CAAC,GAAG;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACxC,MAAM,SAAS,IAAI,CAAC,OAAO;QAC3B,MAAM,iBAAiB,IAAI,CAAC,iBAAiB;QAC7C,IAAI,mBAAmB,QAAQ,eAAe,MAAM,GAAG,GACrD,MAAO,IAAI,CAAC,OAAO,KAAK,OAAQ;YAC9B,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;QACpC;aAEA,IAAI,CAAC,OAAO,GAAG;QAEjB,OAAO,MAAM,GAAG;QAChB,IAAI,IAAI,CAAC,eAAe,IAAI,WAAW,MACrC,OAAO,QAAQ,CAAC;IAEpB;IACA,mBAAmB,SAAS,EAAE;QAC5B,IAAI,MAAM,IAAI,CAAC,OAAO;QACtB,MAAO,QAAQ,KAAM;YACnB,IAAI,IAAI,SAAS,KAAK,WACpB,OAAO;YAET,MAAM,IAAI,MAAM;QAClB;QACA,OAAO;IACT;IACA,SAAS,SAAS,EAAE,UAAU,EAAE;QAC9B,OAAO,cAAc,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,EAAE;IAC5E;IACA;;;;;;;;;;;;;GAaC,GACD,gBAAgB,MAAM,EAAE;QACtB,MAAM,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG;QAChC,IAAI,MAAM,IAAI,CAAC,OAAO;QACtB,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QAChC,IAAI,YAAY,IAAI,UAAU,CAAC;QAC/B,IAAI,UAAU,QAAQ,CAAC,SACrB,OAAO;QAET,IAAI,CAAC,UAAU,QAAQ,CAAC,MAAM,OAAO,GACnC,OAAO;QAET,MAAO,QAAQ,QAAQ,IAAI,aAAa,IAAI,KAAK,UAAU,QAAQ,CAAC,MAAM,OAAO,EAAG;YAClF,MAAM,gBAAgB,IAAI,MAAM,CAAC,IAAI,aAAa,CAAC;YACnD,MAAM,KAAK,cAAc,WAAW,CAAC,EAAE;YACvC,YAAY,IAAI,UAAU,CAAC,GAAG,WAAW;YACzC,IAAI,UAAU,QAAQ,CAAC,SACrB,OAAO;YAET,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,UAAU,QAAQ,CAAC,MAAM,OAAO,KAAK,WAAW,MAAM,GAAG,EAC3D,OAAO;aAEP,OAAO;IAEX;IACA;;;;;;GAMC,GACD,oBAAoB;QAClB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO;IACxE;IACA,qCAAqC;QACnC,MAAM,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG;QAChC,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QAChC,OAAO,IAAI,UAAU,CAAC;IACxB;IACA,yEAAyE,GACzE,aAAa,QAAQ,EAAE;QACrB,OAAO,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC,aAAa;IACjD;IACA;;;;;;;GAOC,GACD,uBAAuB,CAAC,EAAE;QACxB,IAAI,KAAK;QACT,IAAI,MAAM,MACR,IAAI,IAAI,CAAC,OAAO;QAElB,MAAM,QAAQ,EAAE;QAChB,MAAO,MAAM,KAAM;YACjB,MAAM,YAAY,EAAE,SAAS;YAC7B,IAAI,YAAY,GACd,MAAM,IAAI,CAAC;iBAEX,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU;YAEtC,IAAI,EAAE,MAAM;QACd;QACA,OAAO;IACT;IACA;;;;GAIC,GACD,gBAAgB;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ;IAChD;IACA,sCAAsC,GACtC,UAAU;QACR,IAAI,UAAU;QACd,KAAK,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAC9C,IAAI,IAAI,MAAM,GAAG,GAAG;YAClB,IAAI,SACF,QAAQ,GAAG;YAEb,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,IAAI,QAAQ,GAAG;gBAClD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU;YACjD;YACA,UAAU;QACZ;IAEJ;IACA,gBAAgB;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa;IACvC;IACA,eAAe;QACb,MAAM,SAAS,IAAI,CAAC,WAAW;QAC/B,IAAI,kBAAkB,uBACpB,OAAO,IAAI,UAAU;QAEvB,OAAO,KAAK;IACd;IACA,WAAW,OAAO,EAAE;QAClB,MAAM,SAAS,IAAI,CAAC,WAAW;QAC/B,MAAM,WAAW,OAAO,cAAc;QACtC,IAAI,SACF;YAAA,IAAI,CAAE,CAAA,kBAAkB,qBAAoB,GAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,sBAAsB,IAAI;QACnD,OACK,IAAI,kBAAkB,uBAAuB;YAClD,MAAM,qBAAqB,OAAO,kBAAkB;YACpD,IAAI,oBAAoB;gBACtB,MAAM,MAAM,IAAI,mBAAmB,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,aAAa,EAAE;gBACzE,IAAI,CAAC,WAAW,GAAG;YACrB;QACF;QACA,IAAI,CAAC,WAAW,CAAC,cAAc,GAAG;IACpC;IACA;;;GAGC,GACD,SAAS,KAAK,EAAE;QACd,IAAI,CAAC,OAAO;YACV,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM;YACpC,IAAI,CAAC,MAAM,GAAG;QAChB,OAAO;YACL,IAAI,IAAI,CAAC,MAAM,KAAK,MAClB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM;YAEtC,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,IAAI;YACpC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM;QACnC;IACF;IACA,mBAAmB,MAAM,EAAE,CAAC,EAAE;QAC5B,OAAO,IAAI,aAAa;IAC1B;IACA,gBAAgB,MAAM,EAAE,CAAC,EAAE;QACzB,OAAO,IAAI,UAAU;IACvB;AACF;AAEA,2BAA2B;AAC3B,IAAI,oBAAoB,cAAc;IACpC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY;IACZ,uBAAuB,KAAK;IAC5B,qBAAqB,EAAE,CAAC;IACxB,sBAAsB,GAAG;IACzB,0BAA0B,MAAM;IAChC,cAAc;IACd,qBAAqB,IAAI,yBAAyB;IAClD,2BAA2B;IAC3B,CAAA,gBAAiB,GAAG,GAAG;IACvB,CAAA,0BAA2B,GAAG,GAAG;IACjC,CAAA,eAAgB,CAAC;IACjB,CAAA,GAAI,CAAC;IACL,CAAA,SAAU,CAAC;IACX,CAAA,UAAW,CAAC;IACZ,YAAY,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE,KAAK,CAAE;QAC9D,KAAK,CAAC;QACN,IAAI,CAAC,CAAA,eAAgB,GAAG;QACxB,IAAI,CAAC,CAAA,GAAI,GAAG;QACZ,IAAI,CAAC,CAAA,SAAU,GAAG,UAAU,KAAK,CAAC;QAClC,IAAI,CAAC,CAAA,UAAW,GAAG;QACnB,IAAI,CAAC,0BAA0B,GAAG,IAAI;QACtC,KAAK,MAAM,SAAS,IAAI,MAAM,CAC5B,IAAI,iBAAiB,sBAAsB,MAAM,sBAAsB,EACrE,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,MAAM,WAAW;QAGzD,IAAI,CAAC,aAAa,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI;YAChD,OAAO,IAAI,IAAI,IAAI;QACrB;QACA,IAAI,CAAC,WAAW,GAAG,IAAI,mBAAmB,IAAI,EAAE,KAAK,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,kBAAkB;IAClG;IACA,QAAQ;QACN,KAAK,CAAC;QACN,IAAI,CAAC,uBAAuB,GAAG;QAC/B,IAAI,CAAC,oBAAoB,GAAG;IAC9B;IACA,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,CAAA,GAAI;IAClB;IACA,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,CAAA,UAAW;IACzB;IACA,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,CAAA,SAAU;IACxB;IACA,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,CAAA,eAAgB;IAC9B;IACA,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,CAAA,GAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACrC;IACA,MAAM,cAAc,EAAE;QACpB,MAAM,sBAAsB,IAAI,CAAC,CAAA,GAAI,CAAC,gBAAgB,CAAC,eAAe;QACtE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,4BAA4B,CAAC,MAAM,SAAS,oBAAoB,EAAE;QAC1F,IAAI,oBAAoB,mBAAmB,EACzC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,oBAAoB,WAAW,EAAE,gBAAgB;aAE3F,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,oBAAoB,WAAW,EAAE;QAEpE,MAAO,KAAM;YACX,MAAM,IAAI,IAAI,CAAC,QAAQ;YACvB,OAAQ,EAAE,WAAW,CAAC,SAAS;gBAC7B,KAAK,SAAS,SAAS;oBACrB,IAAI,IAAI,CAAC,OAAO,EAAE;wBAChB,IAAI,oBAAoB,mBAAmB,EAAE;4BAC3C,MAAM,SAAS,IAAI,CAAC,OAAO;4BAC3B,MAAM,gBAAgB,IAAI,CAAC,kBAAkB,CAAC,GAAG;4BACjD,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,EAAE;4BAC7C,OAAO;wBACT,OAAO;4BACL,IAAI,CAAC,QAAQ;4BACb,OAAO,IAAI,CAAC,WAAW;wBACzB;;oBAEF,IAAI,CAAC,kBAAkB,CAAC;oBACxB;gBAEF;oBACE,IAAI;wBACF,IAAI,CAAC,UAAU,CAAC;oBAClB,EAAE,OAAO,GAAG;wBACV,IAAI,aAAa,sBAAsB;4BACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAA,GAAI,CAAC,eAAe,CAAC,EAAE,SAAS,CAAC,CAAC,WAAW;4BAC/D,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE;4BACpC,IAAI,CAAC,OAAO,CAAC;wBACf,OACE,MAAM;oBAEV;oBACA;YAEJ;QACF;IACF;IACA,oBAAoB,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE;QACnD,IAAI,CAAC,CAAA,gBAAiB,GAAG;QACzB,IAAI,CAAC,CAAA,0BAA2B,GAAG;QACnC,IAAI,CAAC,mBAAmB,GAAG;IAC7B;IACA,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,CAAA,gBAAiB;IAC/B;IACA,IAAI,6BAA6B;QAC/B,OAAO,IAAI,CAAC,CAAA,0BAA2B;IACzC;IACA,mBAAmB,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE;QACzD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAAC,IAAI,CAAC,OAAO;YAAE,SAAS,aAAa;SAAC;QACnE,KAAK,CAAC,mBAAmB,UAAU,OAAO,WAAW;IACvD;IACA,IAAI,gBAAgB;QAClB,MAAM,IAAI,MAAM;IAClB;IACA,WAAW,CAAC,EAAE;QACZ,IAAI,eAAe;QACnB,IAAI,aAAa,eACf,eAAe,IAAI,CAAC,kBAAkB,CAAC;QAEzC,MAAM,aAAa,EAAE,WAAW,CAAC,eAAe,EAAE;QAClD,OAAQ,WAAW,cAAc;YAC/B,KAAK,WAAW,OAAO;gBACrB,IAAI,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,EAAE,WAAW,KAAK,CAAE,CAAA,WAAW,MAAM,CAAC,WAAW,CAAC,SAAS,KAAK,SAAS,QAAQ,AAAD,GAAI;oBAC1H,MAAM,gBAAgB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,EAAE;oBACjF,MAAM,WAAW,IAAI,CAAC,4BAA4B,CAAC,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;oBAC7G,IAAI,CAAC,uBAAuB,CAC1B,UACA,IAAI,CAAC,CAAA,GAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,CAAC,CAAC,WAAW,EACnD,IAAI,CAAC,OAAO,CAAC,SAAS;gBAE1B;gBACA;YACF,KAAK,WAAW,IAAI;gBAClB,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,CAAC,UAAU;gBACtC;YACF,KAAK,WAAW,KAAK;YACrB,KAAK,WAAW,GAAG;YACnB,KAAK,WAAW,OAAO;gBACrB,IAAI,CAAC,WAAW,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,MAAM,mBAAmB,EAAE,QACzE,IAAI,CAAC,aAAa;gBAEpB,IAAI,CAAC,aAAa;gBAClB;YACF,KAAK,WAAW,QAAQ;gBACtB,IAAI,CAAC,aAAa;gBAClB;YACF,KAAK,WAAW,IAAI;gBAClB,MAAM,iBAAiB,WAAW,MAAM;gBACxC,MAAM,YAAY,eAAe,SAAS;gBAC1C,MAAM,aAAa,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE;gBAClF,IAAI,eAAe,mBAAmB,EACpC,IAAI,CAAC,kBAAkB,CACrB,YACA,eAAe,WAAW,EAC1B,WACA,WAAW,UAAU;qBAGvB,IAAI,CAAC,SAAS,CAAC,YAAY,WAAW,MAAM,CAAC,WAAW,EAAE;gBAE5D;YACF,KAAK,WAAW,SAAS;gBACvB,MAAM,sBAAsB;gBAC5B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,oBAAoB,SAAS,EAAE,oBAAoB,SAAS,GAC1F,MAAM,IAAI,yBAAyB,IAAI;gBAEzC;YACF,KAAK,WAAW,MAAM;gBACpB,MAAM,mBAAmB;gBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,SAAS,EAAE,iBAAiB,WAAW;gBAClF;YACF,KAAK,WAAW,UAAU;gBACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,UAAU,GAAG;oBACvD,MAAM,aAAa,WAAW,UAAU;oBACxC,MAAM,IAAI,yBAAyB,IAAI,EAAE,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;gBAC1E;gBACA;YACF;gBACE,MAAM,IAAI,MAAM;QACpB;QACA,IAAI,CAAC,KAAK,GAAG,WAAW,MAAM,CAAC,WAAW;IAC5C;IACA,mBAAmB,CAAC,EAAE;QACpB,IAAI,eAAe;QACnB,IAAI,EAAE,WAAW,CAAC,MAAM,GAAG,GAAG;YAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI;YAC3B,MAAM,WAAW,EAAE,QAAQ;YAC3B,IAAI,aAAa,IAAI,CAAC,CAAA,gBAAiB,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI,CAAC,CAAA,0BAA2B,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBACvI,eAAe,IAAI,CAAC,mBAAmB;gBACvC,IAAI,CAAC,uBAAuB,GAAG;YACjC,OACE,eAAe,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,IAAI,CAAC,OAAO;QAE5F;QACA,OAAO;IACT;IACA,6BAA6B,MAAM,EAAE,mBAAmB,EAAE,SAAS,EAAE;QACnE,OAAO,IAAI,uBAAuB,WAAW,QAAQ;IACvD;IACA,mBAAmB,CAAC,EAAE;QACpB,MAAM,iBAAiB,IAAI,CAAC,CAAA,GAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,CAAC;QAC9D,IAAI,eAAe,mBAAmB,EAAE;YACtC,MAAM,CAAC,eAAe,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG;YAC1D,IAAI,CAAC,uBAAuB,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG;QACf,OACE,IAAI,CAAC,QAAQ;QAEf,MAAM,iBAAiB,IAAI,CAAC,CAAA,GAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,EAAE;QAClE,IAAI,CAAC,KAAK,GAAG,eAAe,WAAW,CAAC,WAAW;IACrD;IACA,QAAQ,CAAC,EAAE;QACT,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK;QAChC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;QAChC,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,GAAG;YAChC,MAAM,MAAM,EAAE,cAAc;YAC5B,IAAI,CAAC,KACH,MAAM,IAAI,MAAM;YAElB,MAAM,SAAS,IAAI,WAAW;YAC9B,MAAM,SAAS,QAAQ,eAAe;YACtC,MAAM,aAAa;gBAAC;gBAAQ;aAAO;YACnC,IAAI,aAAa,wBAAwB;gBACvC,MAAM,iBAAiB,EAAE,iBAAiB;gBAC1C,IAAI,CAAC,gBACH,MAAM,IAAI,MAAM;gBAElB,IAAI,oBAAoB,MAAM,YAAY;gBAC1C,IAAI,eAAe,MAAM,KAAK,GAC5B,oBAAoB,eAAe,UAAU;gBAE/C,MAAM,WAAW,IAAI,CAAC,eAAe,GAAG,MAAM,CAC5C,YACA,mBACA,IAAI,IAAI,EACR,MAAM,eAAe,EACrB,IACA,IACA,IAAI,IAAI,EACR,IAAI,MAAM;gBAEZ,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE;YAC/D,OAAO;gBACL,MAAM,WAAW,IAAI,CAAC,eAAe,GAAG,MAAM,CAC5C,YACA,MAAM,YAAY,EAClB,IAAI,IAAI,EACR,MAAM,eAAe,EACrB,IACA,IACA,IAAI,IAAI,EACR,IAAI,MAAM;gBAEZ,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE;YAC/D;QACF;IACF;IACA,gBAAgB;QACd,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI;IAC7C;AACF;AAEA,uBAAuB;AACvB,IAAI,WAAW,cAAc;IAC3B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,IAAI,GAAG,EAAE,KAAK,EAAE;QACd,IAAI,iBAAiB,IAAI,CAAC,GAAG,CAAC;QAC9B,IAAI,CAAC,gBAAgB;YACnB,iBAAiB,IAAI;YACrB,IAAI,CAAC,GAAG,CAAC,KAAK;QAChB;QACA,eAAe,IAAI,CAAC;IACtB;IACA,WAAW;QACT,MAAM,QAAQ,IAAI;QAClB,KAAK,MAAM,OAAO,IAAI,CAAC,IAAI,GAAI;YAC7B,MAAM,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;YAChC,KAAK,MAAM,SAAS,KAClB,MAAM,IAAI,CAAC;gBAAC;gBAAK;aAAM;QAE3B;QACA,OAAO;IACT;IACA,WAAW;QACT,MAAM,UAAU,EAAE;QAClB,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO;YACnB,QAAQ,IAAI,CAAC,GAAG,IAAI,EAAE,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7C;QACA,OAAO,CAAC,CAAC,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC;AACF;AAEA,iDAAiD;AACjD,IAAI,6BAA6B,cAAc;IAC7C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,CAAC,CAAE;QACb,KAAK;QACL,IAAI,CAAC,KAAK,GAAG;IACf;AACF;AAEA,mCAAmC;AACnC,IAAI,eAAe;IACjB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,wDAAwD,GACxD,MAAM;IACN,+DAA+D,GAC/D,SAAS;IACT;;;GAGC,GACD,gBAAgB;IAChB,YAAY,QAAQ,EAAE,eAAe,EAAE,KAAK,CAAE;QAC5C,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,KAAK,GAAG;IACf;IACA;;GAEC,GACD,IAAI,UAAU;QACZ,OAAO,MAAM,eAAe;IAC9B;IACA;;;GAGC,GACD,IAAI,OAAO;QACT,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,GACtB,OAAO,MAAM,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,GAAG;QAElD,OAAO,MAAM,IAAI,CAAC,QAAQ,GAAG;IAC/B;IACA;;;GAGC,GACD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,eAAe;IAC7B;IACA;;GAEC,GACD,IAAI,OAAO;QACT,OAAO;IACT;IACA;;GAEC,GACD,IAAI,SAAS;QACX,OAAO;IACT;IACA;;GAEC,GACD,IAAI,aAAa;QACf,OAAO;IACT;IACA;;GAEC,GACD,IAAI,QAAQ;QACV,OAAO;IACT;IACA;;GAEC,GACD,IAAI,OAAO;QACT,OAAO;IACT;IACA;;GAEC,GACD,IAAI,cAAc;QAChB,OAAO;IACT;IACA;;GAEC,GACD,IAAI,cAAc;QAChB,OAAO;IACT;IACA;;;GAGC,GACD,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe;IACnD;AACF;AAEA,8DAA8D;AAC9D,IAAI,0CAA0C,cAAc;IAC1D,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;AACH;AAEA,+BAA+B;AAC/B,IAAI,WAAW,cAAc;IAC3B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,IAAI;IACJ,MAAM;IACN,YAAY,GAAG,IAAI,CAAE;QACnB,IAAI;QACJ,IAAI;QACJ,IAAI,KAAK,MAAM,KAAK,GAClB,MAAM,IAAI,CAAC,EAAE;aACR;YACL,QAAQ,IAAI,CAAC,EAAE;YACf,MAAM,IAAI,CAAC,EAAE;QACf;QACA,KAAK;QACL,IAAI,CAAC,KACH,MAAM,IAAI,MAAM;QAElB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,GAAG,GAAG;IACb;IACA;;;;GAIC,GACD,WAAW;QACT,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,GACtB,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG;QAEpC,OAAO,IAAI,CAAC,GAAG;IACjB;AACF;AAEA,gCAAgC;AAChC,IAAI,YAAY,cAAc;IAC5B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,KAAK;IACL;;;;GAIC,GACD,YAAY,IAAI,CAAE;QAChB,KAAK;QACL,IAAI,CAAC,IAAI,GAAG;IACd;IACA;;GAEC,GACD,WAAW;QACT,OAAO,MAAM,IAAI,CAAC,IAAI,GAAG;IAC3B;AACF;AAEA,oCAAoC;AACpC,IAAI,gBAAgB,cAAc;IAChC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV;;GAEC,GACD,MAAM;IACN,YAAY,SAAS,EAAE,IAAI,EAAE,KAAK,CAAE;QAClC,KAAK,CAAC;YAAE;YAAM,QAAQ,YAAY,YAAY;QAAC;QAC/C,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,KAAK,GAAG;IACf;IACA;;;GAGC,GACD,IAAI,OAAO;QACT,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,GACtB,OAAO,MAAM,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,GAAG;QAEnD,OAAO,MAAM,IAAI,CAAC,SAAS,GAAG;IAChC;IACA;;GAEC,GACD,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,IAAI;IACzC;AACF;AAEA,8CAA8C;AAC9C,IAAI,0BAA0B;IAC5B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,QAAQ,IAAI;IACZ,OAAO,IAAI;IACX,SAAS,KAAK;IACd,oCAAoC;IACpC;;GAEC,GACD,MAAM;IACN;;GAEC,GACD,OAAO;IACP;;;;;GAKC,GACD,YAAY,KAAK,EAAE,MAAM,CAAE;QACzB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,MAAM,GAAG;IAChB;IACA;;;;;;;;;;GAUC,GACD,cAAc,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE;QACrC,IAAI,UAAU,QAAQ,MAAM,MAAM,KAAK,GACrC,MAAM,IAAI,MAAM;QAElB,IAAI,SAAS,QAAQ,KAAK,MAAM,KAAK,GACnC,MAAM,IAAI,MAAM;QAElB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,MAAM,GAAG;IAChB;IACA,QAAQ,GAAG,IAAI,EAAE;QACf,OAAQ,KAAK,MAAM;YACjB,KAAK;gBAAG;oBACN,MAAM,CAAC,MAAM,QAAQ,GAAG;oBACxB,MAAM,SAAS,IAAI;oBACnB,MAAM,iBAAiB,IAAI,CAAC,SAAS,CAAC,MAAM,QAAQ,cAAc,IAAI;oBACtE,OAAO,mBAAmB;gBAC5B;YACA,KAAK;gBAAG;oBACN,MAAM,CAAC,MAAM,SAAS,iBAAiB,GAAG;oBAC1C,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS;oBAChC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM;gBAC5B;YACA;gBACE,MAAM,IAAI,MAAM;QAEpB;IACF;IACA,MAAM,GAAG,IAAI,EAAE;QACb,OAAQ,KAAK,MAAM;YACjB,KAAK;gBAAG;oBACN,MAAM,CAAC,MAAM,QAAQ,GAAG;oBACxB,MAAM,SAAS,IAAI;oBACnB,MAAM,iBAAiB,IAAI,CAAC,SAAS,CAAC,MAAM,QAAQ,cAAc,IAAI;oBACtE,OAAO,IAAI,eAAe,MAAM,SAAS,QAAQ;gBACnD;YACA,KAAK;gBAAG;oBACN,MAAM,CAAC,MAAM,SAAS,iBAAiB,GAAG;oBAC1C,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS;oBAChC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM;gBAC1B;YACA;gBACE,MAAM,IAAI,MAAM;QAEpB;IACF;IACA;;;GAGC,GACD,QAAQ,OAAO,EAAE,gBAAgB,EAAE;QACjC,MAAM,YAAY,IAAI,CAAC,QAAQ,CAAC;QAChC,MAAM,WAAW,IAAI,gBAAgB;QACrC,MAAM,SAAS,IAAI,kBAAkB;QACrC,MAAM,eAAe,IAAI,kBACvB,IAAI,CAAC,MAAM,CAAC,eAAe,EAC3B,IAAI,CAAC,MAAM,CAAC,UAAU,EACtB,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,IAAI,CAAC,MAAM,CAAC,oBAAoB,IAChC;QAEF,aAAa,oBAAoB;QACjC,IAAI,OAAO;QACX,IAAI;YACF,aAAa,YAAY,GAAG,IAAI;YAChC,OAAO,aAAa,KAAK,CAAC;QAC5B,EAAE,OAAO,OAAO;YACd,IAAI,iBAAiB,4BACnB,MAAM,MAAM,KAAK;iBACZ,IAAI,iBAAiB,sBAC1B,MAAM;iBACD,IAAI,iBAAiB,OAC1B,MAAM,IAAI,2BAA2B;iBAErC,MAAM;QAEV;QACA,IAAI,OAAO,EAAE,CAAC,OAAO,MAAM,GAAG,EAC5B,MAAM,IAAI;QAEZ,OAAO,IAAI,iBAAiB,IAAI,EAAE,SAAS,kBAAkB;IAC/D;IACA;;;GAGC,GACD,WAAW;QACT,OAAO,IAAI,CAAC,KAAK;IACnB;IACA;;;GAGC,GACD,YAAY;QACV,OAAO,IAAI,CAAC,MAAM;IACpB;IACA,yBAAyB;IACzB,SAAS,OAAO,EAAE;QAChB,MAAM,SAAS,IAAI,CAAC,KAAK,CAAC;QAC1B,MAAM,SAAS,IAAI;QACnB,KAAK,MAAM,SAAS,OAClB,IAAI,iBAAiB,UAAU;YAC7B,MAAM,WAAW;YACjB,MAAM,OAAO,SAAS,GAAG,CAAC,EAAE;YAC5B,IAAI,SAAS,KAAK,WAAW,IAAI;gBAC/B,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,GAAG;gBACnD,IAAI,UAAU,MAAM,YAAY,EAC9B,MAAM,IAAI,MAAM,mBAAmB,SAAS,GAAG,GAAG,kBAAkB;gBAEtE,MAAM,IAAI,IAAI,cAAc,SAAS,GAAG,EAAE,OAAO,SAAS,KAAK;gBAC/D,OAAO,IAAI,CAAC;YACd,OAAO;gBACL,IAAI,SAAS,KAAK,WAAW,IAAI;oBAC/B,MAAM,YAAY,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,GAAG;oBACvD,IAAI,cAAc,IAChB,MAAM,IAAI,MAAM,kBAAkB,SAAS,GAAG,GAAG,kBAAkB;oBAErE,MAAM,yBAAyB,IAAI,CAAC,MAAM,CAAC,oBAAoB,GAAG,eAAe,CAAC,UAAU;oBAC5F,OAAO,IAAI,CAAC,IAAI,aAAa,SAAS,GAAG,EAAE,wBAAwB,SAAS,KAAK;gBACnF,OACE,MAAM,IAAI,MAAM,kBAAkB,SAAS,GAAG,GAAG,kBAAkB;YAEvE;QACF,OAAO;YACL,MAAM,YAAY;YAClB,MAAM,QAAQ,WAAW,UAAU,CAAC,UAAU,IAAI;YAClD,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG;YACzB,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS;YAC5B,MAAO,EAAE,IAAI,KAAK,MAAM,GAAG,CAAE;gBAC3B,OAAO,IAAI,CAAC;gBACZ,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS;YAC1B;QACF;QAEF,OAAO;IACT;IACA;;GAEC,GACD,MAAM,OAAO,EAAE;QACb,IAAI,IAAI;QACR,MAAM,KAAK,QAAQ,MAAM;QACzB,MAAM,SAAS,IAAI;QACnB,MAAM,SAAS,IAAI;QACnB,MAAM,QAAQ,IAAI;QAClB,MAAO,IAAI,GAAI;YACb,IAAI,MAAM,QAAQ,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,IAClD,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;iBAE3C,IAAI,MAAM,QAAQ,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,IACjD,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM;iBACrC;gBACL,IAAI,MAAM,QAAQ,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI;oBACxC,OAAO,IAAI,CAAC;oBACZ,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM;gBACxB,OACE,IAAI,MAAM,QAAQ,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI;oBACvC,MAAM,IAAI,CAAC;oBACX,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM;gBACvB,OACE;YAGN;QAEJ;QACA,IAAI,OAAO,MAAM,GAAG,MAAM,MAAM,EAC9B,MAAM,IAAI,MAAM,kCAAkC;QAEpD,IAAI,OAAO,MAAM,GAAG,MAAM,MAAM,EAC9B,MAAM,IAAI,MAAM,mCAAmC;QAErD,MAAM,WAAW,OAAO,MAAM;QAC9B,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAK;YACjC,IAAI,MAAM,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,EACvB,MAAM,IAAI,MAAM,6CAA6C;QAEjE;QACA,IAAI,aAAa,GAAG;YAClB,MAAM,OAAO,QAAQ,SAAS,CAAC,GAAG;YAClC,OAAO,IAAI,CAAC,IAAI,UAAU;QAC5B;QACA,IAAI,WAAW,KAAK,MAAM,CAAC,EAAE,GAAG,GAAG;YACjC,MAAM,OAAO,QAAQ,SAAS,CAAC,GAAG,MAAM,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC,IAAI,UAAU;QAC5B;QACA,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAK;YACjC,MAAM,MAAM,QAAQ,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;YACrE,IAAI,cAAc;YAClB,IAAI;YACJ,MAAM,QAAQ,IAAI,OAAO,CAAC;YAC1B,IAAI,SAAS,GAAG;gBACd,QAAQ,IAAI,SAAS,CAAC,GAAG;gBACzB,cAAc,IAAI,SAAS,CAAC,QAAQ,GAAG,IAAI,MAAM;YACnD;YACA,OAAO,IAAI,CAAC,IAAI,SAAS,OAAO;YAChC,IAAI,IAAI,IAAI,UAAU;gBACpB,MAAM,OAAO,QAAQ,SAAS,CAAC,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE;gBACzE,OAAO,IAAI,CAAC,IAAI,UAAU;YAC5B;QACF;QACA,IAAI,WAAW,GAAG;YAChB,MAAM,eAAe,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM;YAC3D,IAAI,eAAe,IAAI;gBACrB,MAAM,OAAO,QAAQ,SAAS,CAAC,cAAc;gBAC7C,OAAO,IAAI,CAAC,IAAI,UAAU;YAC5B;QACF;QACA,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;YACtC,MAAM,IAAI,MAAM,CAAC,EAAE;YACnB,IAAI,aAAa,WAAW;gBAC1B,MAAM,KAAK;gBACX,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE;gBAClD,IAAI,UAAU,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EACnC,MAAM,CAAC,EAAE,GAAG,IAAI,UAAU;YAE9B;QACF;QACA,OAAO;IACT;IACA;;;;;;;;GAQC,GACD,UAAU,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE;QACnC,IAAI,gBAAgB,gBAAgB,uBAAuB,cAAc;YACvE,MAAM,KAAK;YACX,MAAM,KAAK;YACX,IAAI;YACJ,IAAI,GAAG,SAAS,GAAG,IAAI,KAAK,GAAG,SAAS,GAAG,IAAI;gBAC7C,IAAI,GAAG,SAAS,cAAc,eAAe;oBAC3C,MAAM,gBAAgB,GAAG,SAAS;oBAClC,OAAO,GAAG,CAAC,cAAc,SAAS,EAAE;oBACpC,IAAI,cAAc,KAAK,KAAK,KAAK,GAC/B,OAAO,GAAG,CAAC,cAAc,KAAK,EAAE;gBAEpC,OAAO;oBACL,IAAI,GAAG,OAAO,OAAO,GAAG,OAAO;yBAE7B,IAAI,CAAC,gBACH,iBAAiB;gBAGvB;mBAEA,IAAI,CAAC,gBACH,iBAAiB;YAGrB,OAAO;QACT;QACA,IAAI,gBAAgB,qBAAqB,uBAAuB,mBAAmB;YACjF,IAAI;YACJ,MAAM,eAAe,IAAI,CAAC,eAAe,CAAC;YAC1C,IAAI,cAAc;gBAChB,IAAI,KAAK,SAAS,KAAK,YAAY,SAAS,EAAE;oBAC5C,OAAO,GAAG,CAAC,aAAa,QAAQ,EAAE;oBAClC,IAAI,aAAa,KAAK,EACpB,OAAO,GAAG,CAAC,aAAa,KAAK,EAAE;gBAEnC,OACE,IAAI,CAAC,gBACH,iBAAiB;gBAGrB,OAAO;YACT;YACA,IAAI,KAAK,aAAa,OAAO,YAAY,aAAa,IAAI;gBACxD,IAAI,CAAC,gBACH,iBAAiB;gBAEnB,OAAO;YACT;YACA,MAAM,KAAK,KAAK,aAAa;YAC7B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;gBAC3B,MAAM,aAAa,IAAI,CAAC,SAAS,CAAC,KAAK,QAAQ,CAAC,IAAI,YAAY,QAAQ,CAAC,IAAI;gBAC7E,IAAI,YACF,OAAO;YAEX;YACA,OAAO;QACT;QACA,OAAO;IACT;IACA;;GAEC,GACD,gBAAgB,CAAC,EAAE;QACjB,IAAI,aAAa,mBACf;YAAA,IAAI,EAAE,aAAa,OAAO,KAAK,EAAE,QAAQ,CAAC,cAAc,cAAc;gBACpE,MAAM,IAAI,EAAE,QAAQ,CAAC;gBACrB,IAAI,EAAE,SAAS,cAAc,cAC3B,OAAO,EAAE,SAAS;YAEtB;QAAA;QAEF,OAAO,KAAK;IACd;AACF;AAEA,iCAAiC;AACjC,IAAI,0BAA0B,cAAc;IAC1C,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;GAEC,GACD,UAAU;IACV,YAAY,SAAS,CAAE;QACrB,KAAK;QACL,IAAI,CAAC,SAAS,GAAG,aAAa;IAChC;IACA,kBAAkB,aAAa,GAAG,OAAO,CAAC,YAAY,KAAK,YAAY,WAAW,OAAO,WAAW;QAClG,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,OACrB;QAEF,MAAM,WAAW,IAAI,CAAC,sBAAsB,CAAC,YAAY;QACzD,MAAM,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,WAAW;QAC3D,MAAM,OAAO,WAAW,WAAW,EAAE,oBAAoB,SAAS,EAAE,CAAC,YAAY;QACjF,MAAM,UAAU,CAAC,kBAAkB,EAAE,SAAS,YAAY,EAAE,gBAAgB,SAAS,EAAE,KAAK,CAAC,CAAC;QAC9F,WAAW,oBAAoB,CAAC,SAAS,MAAM;IACjD,GAAG,mBAAmB;IACtB,8BAA8B,aAAa,GAAG,OAAO,CAAC,YAAY,KAAK,YAAY,WAAW,kBAAkB;QAC9G,MAAM,WAAW,IAAI,CAAC,sBAAsB,CAAC,YAAY;QACzD,MAAM,OAAO,WAAW,WAAW,EAAE,oBAAoB,SAAS,EAAE,CAAC,YAAY;QACjF,MAAM,UAAU,CAAC,8BAA8B,EAAE,SAAS,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5E,WAAW,oBAAoB,CAAC,SAAS,MAAM;IACjD,GAAG,+BAA+B;IAClC,2BAA2B,aAAa,GAAG,OAAO,CAAC,YAAY,KAAK,YAAY,WAAW,aAAa;QACtG,MAAM,WAAW,IAAI,CAAC,sBAAsB,CAAC,YAAY;QACzD,MAAM,OAAO,WAAW,WAAW,EAAE,oBAAoB,SAAS,EAAE,CAAC,YAAY;QACjF,MAAM,UAAU,CAAC,2BAA2B,EAAE,SAAS,SAAS,EAAE,KAAK,CAAC,CAAC;QACzE,WAAW,oBAAoB,CAAC,SAAS,MAAM;IACjD,GAAG,4BAA4B;IAC/B,yBAAyB,aAAa,GAAG,OAAO,CAAC,YAAY;QAC3D,MAAM,WAAW,IAAI,QAAQ;QAC7B,MAAM,YAAY,IAAI,aAAa,CAAC,SAAS;QAC7C,MAAM,YAAY,WAAW,SAAS;QACtC,IAAI,YAAY,KAAK,aAAa,UAAU,MAAM,EAChD,OAAO,SAAS,QAAQ;QAE1B,MAAM,WAAW,SAAS,CAAC,UAAU;QACrC,IAAI,SAAS,MAAM,KAAK,GACtB,OAAO,SAAS,QAAQ;QAE1B,OAAO,GAAG,SAAS,EAAE,EAAE,SAAS,CAAC,CAAC;IACpC,GAAG,0BAA0B;IAC7B;;;;;;;;;;GAUC,GACD,qBAAqB,aAAa,GAAG,OAAO,CAAC,cAAc;QACzD,IAAI,cACF,OAAO;QAET,MAAM,SAAS,IAAI;QACnB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,OAAO,CAAC,MAAM,EAAE,IAC1C,OAAO,GAAG,CAAC,QAAQ,OAAO,CAAC,EAAE,CAAC,GAAG;QAEnC,OAAO;IACT,GAAG,sBAAsB;AAC3B;AAEA,0BAA0B;AAC1B,IAAI,mBAAmB,cAAc;IACnC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,cAAc;IACd,qBAAqB,IAAI,yBAAyB;IAClD,CAAA,eAAgB,CAAC;IACjB,CAAA,GAAI,CAAC;IACL,CAAA,SAAU,CAAC;IACX,CAAA,YAAa,CAAC;IACd,CAAA,SAAU,CAAC;IACX,CAAA,UAAW,CAAC;IACZ,YAAY,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,EAAE,KAAK,CAAE;QACvF,KAAK,CAAC;QACN,IAAI,IAAI,WAAW,KAAK,IAAI,KAAK,EAC/B,MAAM,IAAI,MAAM;QAElB,IAAI,CAAC,CAAA,eAAgB,GAAG;QACxB,IAAI,CAAC,CAAA,GAAI,GAAG;QACZ,IAAI,CAAC,CAAA,SAAU,GAAG,UAAU,KAAK,CAAC;QAClC,IAAI,CAAC,CAAA,YAAa,GAAG,aAAa,KAAK,CAAC;QACxC,IAAI,CAAC,CAAA,SAAU,GAAG,UAAU,KAAK,CAAC;QAClC,IAAI,CAAC,CAAA,UAAW,GAAG;QACnB,IAAI,CAAC,aAAa,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI;YAChD,OAAO,IAAI,IAAI,IAAI;QACrB;QACA,IAAI,CAAC,WAAW,GAAG,IAAI,kBAAkB,IAAI,EAAE,KAAK,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,kBAAkB;IACjG;IACA,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,CAAA,GAAI;IAClB;IACA,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,CAAA,eAAgB;IAC9B;IACA,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,CAAA,SAAU;IACxB;IACA,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,CAAA,YAAa;IAC3B;IACA,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,CAAA,SAAU;IACxB;IACA,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,CAAA,UAAW;IACzB;IACA,IAAI,gBAAgB;QAClB,MAAM,IAAI,MAAM;IAClB;AACF;AAEA,yBAAyB;AACzB,IAAI,kBAAkB,MAAM;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,UAAU,SAAS;IAC1B;;;;;;;GAOC,GACD,OAAO,oBAAoB;QACzB,OAAO,iBAAiB,OAAO;IACjC;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDC,GACD,OAAO,aAAa,qBAAqB,EAAE,kBAAkB,EAAE;QAC7D,MAAM,iBAAiB,iBAAiB,OAAO;QAC/C,IAAI,qCAAqC;QACzC,IAAI,sCAAsC;QAC1C,qCAAqC,mBAAmB,yBAAyB,iBAAiB,oBAAoB,CAAC,oBAAoB,iBAAiB,oBAAoB,CAAC;QACjL,sCAAsC,mBAAmB,sBAAsB,iBAAiB,oBAAoB,CAAC,oBAAoB,iBAAiB,oBAAoB,CAAC;QAC/K,IAAI,oCACF,QAAQ,KAAK,CAAC,CAAC,mBAAmB,EAAE,sBAAsB,qEAAqE,EAAE,gBAAgB;QAEnJ,IAAI,qCACF,QAAQ,KAAK,CAAC,CAAC,sBAAsB,EAAE,mBAAmB,wEAAwE,EAAE,gBAAgB;IAExJ;IACA;;;;;;;;GAQC,GACD,OAAO,qBAAqB,OAAO,EAAE;QACnC,MAAM,WAAW,QAAQ,OAAO,CAAC;QACjC,MAAM,YAAY,YAAY,IAAI,QAAQ,OAAO,CAAC,KAAK,WAAW,KAAK;QACvE,MAAM,YAAY,QAAQ,OAAO,CAAC;QAClC,IAAI,kBAAkB,QAAQ,MAAM;QACpC,IAAI,aAAa,GACf,kBAAkB,KAAK,GAAG,CAAC,iBAAiB;QAE9C,IAAI,aAAa,GACf,kBAAkB,KAAK,GAAG,CAAC,iBAAiB;QAE9C,OAAO,QAAQ,SAAS,CAAC,GAAG;IAC9B;AACF;AAEA,6BAA6B;AAC7B,IAAI,sBAAsB,MAAM;IAC9B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,OAAO,uBAAuB,UAAU;IACxC,OAAO,oBAAoB,IAAI;IAC/B,OAAO,kBAAkB,EAAE;IAC3B,sBAAsB,GACtB,OAAO;IACP;;;;GAIC,GACD,WAAW,aAAa,GAAG,IAAI,MAAM;IACrC,+CAA+C,GAC/C,wBAAwB;IACxB;;GAEC,GACD,YAAY,MAAM,CAAE;QAClB,IAAI,CAAC,MAAM,GAAG;IAChB;IACA,iBAAiB;QACf,OAAO,IAAI,CAAC,MAAM;IACpB;IACA;;GAEC,GACD,YAAY,YAAY,EAAE,IAAI,EAAE,cAAc,qBAAqB,oBAAoB,EAAE;QACvF,IAAI;QACJ,IAAI,OAAO,iBAAiB,UAC1B,QAAQ;aAER,QAAQ,aAAa,UAAU;QAEjC,MAAM,WAAW,IAAI,CAAC,UAAU,CAAC;QACjC,MAAM,KAAK,IAAI,cAAc,IAAI,CAAC,MAAM,EAAE,OAAO,SAAS,MAAM,EAAE;QAClE,SAAS,IAAI,CAAC;IAChB;IACA;;GAEC,GACD,aAAa,YAAY,EAAE,IAAI,EAAE,cAAc,qBAAqB,oBAAoB,EAAE;QACxF,IAAI;QACJ,IAAI,OAAO,iBAAiB,UAC1B,QAAQ;aAER,QAAQ,aAAa,UAAU;QAEjC,MAAM,WAAW,IAAI,CAAC,UAAU,CAAC;QACjC,MAAM,KAAK,IAAI,eAAe,IAAI,CAAC,MAAM,EAAE,OAAO,SAAS,MAAM,EAAE;QACnE,SAAS,IAAI,CAAC;IAChB;IACA;;GAEC,GACD,cAAc,YAAY,EAAE,IAAI,EAAE,cAAc,qBAAqB,oBAAoB,EAAE;QACzF,IAAI,CAAC,OAAO,CAAC,cAAc,cAAc,MAAM;IACjD;IACA;;GAEC,GACD,QAAQ,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,cAAc,qBAAqB,oBAAoB,EAAE;QAC/E,IAAI,OAAO,SAAS,UAClB,OAAO,KAAK,UAAU;QAExB,IAAI,OAAO,OAAO,UAChB,KAAK,GAAG,UAAU;QAEpB,IAAI,OAAO,MAAM,OAAO,KAAK,KAAK,KAAK,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAC3D,MAAM,IAAI,WAAW,CAAC,wBAAwB,EAAE,KAAK,EAAE,EAAE,GAAG,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAEzF,MAAM,WAAW,IAAI,CAAC,UAAU,CAAC;QACjC,MAAM,KAAK,IAAI,UAAU,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,SAAS,MAAM,EAAE;QACjE,SAAS,IAAI,CAAC;IAChB;IACA;;GAEC,GACD,OAAO,IAAI,EAAE,EAAE,EAAE,cAAc,qBAAqB,oBAAoB,EAAE;QACxE,IAAI,MAAM,MACR,KAAK;QAEP,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM;IAC/B;IACA,WAAW,IAAI,EAAE;QACf,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC3B,IAAI,MAAM,MACR,KAAK,IAAI,CAAC,iBAAiB,CAAC;QAE9B,OAAO;IACT;IACA,kBAAkB,IAAI,EAAE;QACtB,MAAM,KAAK,EAAE;QACb,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM;QACxB,OAAO;IACT;IACA;;GAEC,GACD,QAAQ,iBAAiB,EAAE,cAAc,qBAAqB,oBAAoB,EAAE;QAClF,IAAI;QACJ,IAAI,6BAA6B,UAC/B,WAAW;aAEX,WAAW,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG;QAEhD,IAAI,OAAO,sBAAsB,UAC/B,cAAc;QAEhB,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QACnC,IAAI,QAAQ,SAAS,KAAK;QAC1B,IAAI,OAAO,SAAS,IAAI;QACxB,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,GAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG;QAE5B,IAAI,QAAQ,GACV,QAAQ;QAEV,IAAI,YAAY,QAAQ,SAAS,MAAM,KAAK,GAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,SAAS,OAAO;QAE7D,MAAM,MAAM,EAAE;QACd,MAAM,YAAY,IAAI,CAAC,+BAA+B,CAAC;QACvD,IAAI,IAAI;QACR,MAAO,KAAK,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE;YACxC,MAAM,KAAK,UAAU,GAAG,CAAC;YACzB,UAAU,MAAM,CAAC;YACjB,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YAC1B,IAAI,MAAM,MAAM;gBACd,IAAI,EAAE,IAAI,KAAK,MAAM,GAAG,EACtB,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI;gBAExB;YACF,OACE,IAAI,GAAG,OAAO,CAAC;QAEnB;QACA,IAAI,SAAS,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,GAAG;YACjC,KAAK,MAAM,MAAM,UAAU,MAAM,GAC/B,IAAI,MAAM,GAAG,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,GACvC,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI;QAG7B;QACA,OAAO,IAAI,IAAI,CAAC;IAClB;IACA;;GAEC,GACD,gCAAgC,QAAQ,EAAE;QACxC,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;YACxC,MAAM,KAAK,QAAQ,CAAC,EAAE;YACtB,IAAI,MAAM,MACR;YAEF,IAAI,CAAE,CAAA,cAAc,SAAQ,GAC1B;YAEF,MAAM,MAAM;YACZ,MAAM,UAAU,IAAI,CAAC,YAAY,CAAC,UAAU,gBAAgB;YAC5D,KAAK,MAAM,OAAO,QAAS;gBACzB,IAAI,IAAI,KAAK,KAAK,IAAI,KAAK,EAAE;oBAC3B,QAAQ,CAAC,IAAI,gBAAgB,CAAC,GAAG;oBACjC,IAAI,IAAI,GAAG,OAAO,IAAI,IAAI,IAAK,CAAA,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC,QAAQ,KAAK,EAAC;gBAC3E,OAAO,IAAI,IAAI,KAAK,GAAG,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,SAAS,EAC5D,QAAQ,CAAC,IAAI,gBAAgB,CAAC,GAAG;YAErC;YACA,MAAM,eAAe,IAAI,CAAC,YAAY,CAAC,UAAU,WAAW;YAC5D,KAAK,MAAM,WAAW,aAAc;gBAClC,IAAI,QAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,QAAQ,SAAS,IAAI,IAAI,SAAS,EAAE;oBACpE,QAAQ,CAAC,QAAQ,gBAAgB,CAAC,GAAG;oBACrC;gBACF;gBACA,MAAM,WAAW,QAAQ,SAAS,GAAG,IAAI,KAAK,IAAI,QAAQ,KAAK,GAAG,IAAI,SAAS;gBAC/E,IAAI,QAAQ,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,UAAU;oBACzD,QAAQ,CAAC,QAAQ,gBAAgB,CAAC,GAAG;oBACrC,IAAI,KAAK,GAAG,KAAK,GAAG,CAAC,QAAQ,KAAK,EAAE,IAAI,KAAK;oBAC7C,IAAI,SAAS,GAAG,KAAK,GAAG,CAAC,QAAQ,SAAS,EAAE,IAAI,SAAS;gBAC3D,OAAO,IAAI,CAAC,UACV,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,IAAI,uBAAuB,EAAE,SAAS;YAEtF;QACF;QACA,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;YACxC,MAAM,KAAK,QAAQ,CAAC,EAAE;YACtB,IAAI,MAAM,MACR;YAEF,IAAI,CAAE,CAAA,cAAc,cAAa,GAC/B;YAEF,MAAM,MAAM;YACZ,MAAM,cAAc,IAAI,CAAC,YAAY,CAAC,UAAU,gBAAgB;YAChE,KAAK,MAAM,WAAW,YACpB,IAAI,QAAQ,KAAK,KAAK,IAAI,KAAK,EAAE;gBAC/B,IAAI,mBAAmB,eAAe;oBACpC,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE,IAAI,IAAI;oBAChD,QAAQ,CAAC,QAAQ,gBAAgB,CAAC,GAAG;gBACvC,OAAO,IAAI,mBAAmB,gBAAgB;oBAC5C,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,QAAQ,IAAI;oBAChD,QAAQ,CAAC,QAAQ,gBAAgB,CAAC,GAAG;gBACvC;YACF;YAEF,MAAM,eAAe,IAAI,CAAC,YAAY,CAAC,UAAU,WAAW;YAC5D,KAAK,MAAM,OAAO,aAAc;gBAC9B,IAAI,IAAI,KAAK,KAAK,IAAI,KAAK,EAAE;oBAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,IAAI,IAAI;oBAC5C,QAAQ,CAAC,EAAE,GAAG;oBACd;gBACF;gBACA,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,SAAS,EACtD,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,+BAA+B,EAAE,KAAK;YAE3E;QACF;QACA,MAAM,KAAK,aAAa,GAAG,IAAI;QAC/B,KAAK,MAAM,MAAM,SAAU;YACzB,IAAI,MAAM,MACR;YAEF,IAAI,GAAG,GAAG,CAAC,GAAG,KAAK,KAAK,MACtB,MAAM,IAAI,MAAM;YAElB,GAAG,GAAG,CAAC,GAAG,KAAK,EAAE;QACnB;QACA,OAAO;IACT;IACA,UAAU,CAAC,EAAE,CAAC,EAAE;QACd,IAAI,IAAI;QACR,IAAI,IAAI;QACR,IAAI,KAAK,MACP,IAAI,EAAE,QAAQ;QAEhB,IAAI,KAAK,MACP,IAAI,EAAE,QAAQ;QAEhB,OAAO,IAAI;IACb;IACA;;GAEC,GACD,aAAa,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;QACnC,OAAO,SAAS,KAAK,CAAC,GAAG,QAAQ,MAAM,CAAC,CAAC;YACvC,OAAO,MAAM,cAAc;QAC7B;IACF;AACF;AACA,IAAI,mBAAmB;IACrB,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,0CAA0C,GAC1C,iBAAiB;IACjB,wBAAwB,GACxB,MAAM;IACN,KAAK;IACL,OAAO;IACP,YAAY,MAAM,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,CAAE;QACjD,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,IAAI,GAAG,SAAS,KAAK,IAAI,KAAK;IACrC;IACA,QAAQ,IAAI,EAAE;QACZ,OAAO,IAAI,CAAC,KAAK;IACnB;IACA,WAAW;QACT,OAAO,uBAAuB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,IAAI,GAAG;IACjF;AACF;AACA,IAAI,iBAAiB,cAAc;IACjC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,MAAM,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,CAAE;QACjD,KAAK,CAAC,QAAQ,OAAO,kBAAkB;IACzC;IACA;;GAEC,GACD,QAAQ,GAAG,EAAE;QACX,IAAI,IAAI,CAAC,IAAI,EACX,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ;QAE7B,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,KAAK,MAAM,GAAG,EAChD,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI;QAElD,OAAO,IAAI,CAAC,KAAK,GAAG;IACtB;IACA,WAAW;QACT,OAAO,qBAAqB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,IAAI,GAAG;IAC/E;AACF;AACA,IAAI,gBAAgB,cAAc;IAChC,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY,MAAM,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,CAAE;QACjD,KAAK,CAAC,QAAQ,QAAQ,GAAG,kBAAkB;IAC7C;IACA,WAAW;QACT,OAAO,oBAAoB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,IAAI,GAAG;IAC9E;AACF;AACA,IAAI,YAAY,cAAc;IAC5B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,UAAU;IACV,YAAY,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,gBAAgB,EAAE,IAAI,CAAE;QACpD,KAAK,CAAC,QAAQ,MAAM,kBAAkB;QACtC,IAAI,CAAC,SAAS,GAAG;IACnB;IACA;;GAEC,GACD,QAAQ,GAAG,EAAE;QACX,IAAI,IAAI,CAAC,IAAI,EACX,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ;QAE7B,OAAO,IAAI,CAAC,SAAS,GAAG;IAC1B;IACA,WAAW;QACT,IAAI,IAAI,CAAC,IAAI,IAAI,MACf,OAAO,eAAe,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI;QAE/F,OAAO,gBAAgB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,OAAO,IAAI,CAAC,IAAI,GAAG;IACnH;AACF;AAEA,+BAA+B;AAC/B,IAAI,wBAAwB;IAC1B,MAAO;QACL,OAAO,IAAI,EAAE;IACf,CAAC;IACD,YAAY;IACZ;;;;GAIC,GACD,OAAO;IACP;;;;GAIC,GACD,EAAE;IACF;;;;;GAKC,GACD,IAAI,EAAE;IACN;;;;;GAKC,GACD,aAAa,EAAE;IACf;;GAEC,GACD,UAAU;IACV;;;GAGC,GACD,qBAAqB;IACrB;;;;;;;GAOC,GACD,oBAAoB,EAAE;IACtB,YAAY,WAAW,EAAE,UAAU,CAAE;QACnC,IAAI,CAAC,WAAW,GAAG;QACnB,aAAa,cAAc;QAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM;QACxB,IAAI,CAAC,CAAC,GAAG;QACT,IAAI,CAAC,IAAI,CAAC;IACZ;IACA,IAAI,CAAC,EAAE;QACL,MAAM,mBAAmB,IAAI,CAAC,mBAAmB;QACjD,IAAI,IAAI,oBAAoB,KAAK,mBAAmB,IAAI,CAAC,CAAC,EACxD,MAAM,IAAI,MAAM,SAAS,IAAI,uBAAuB,mBAAmB,OAAQ,CAAA,mBAAmB,IAAI,CAAC,CAAC,AAAD;QAEzG,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,iBAAiB;IAC1C;IACA,gEAAgE;IAChE,GAAG,CAAC,EAAE;QACJ,IAAI,MAAM,IACR,OAAO,IAAI,CAAC,SAAS;QAEvB,IAAI,CAAC,IAAI,CAAC;QACV,MAAM,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI;QAC3B,IAAI,QAAQ,GACV,MAAM,IAAI,MAAM,QAAQ,IAAI;QAE9B,IAAI,SAAS,IAAI,CAAC,CAAC,EACjB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE;QAEhC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM;IAC3B;IACA,gEAAgE;IAChE,GAAG,CAAC,EAAE;QACJ,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI;IACxB;IACA,UAAU;QACR,OAAO;IACT;IACA,mBAAmB,GAAG,EAAE;QACtB,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,iBAAiB;IACvD;IACA,oBAAoB,QAAQ,EAAE;QAC5B,MAAM,mBAAmB,IAAI,CAAC,mBAAmB;QACjD,MAAM,kBAAkB,mBAAmB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;QAChE,MAAM,QAAQ,SAAS,KAAK;QAC5B,MAAM,OAAO,SAAS,IAAI;QAC1B,IAAI,QAAQ,oBAAoB,OAAO,iBACrC,MAAM,IAAI,MAAM,cAAc,WAAW,kCAAkC,mBAAmB,OAAO;QAEvG,MAAM,IAAI,QAAQ;QAClB,MAAM,IAAI,OAAO;QACjB,IAAI,SAAS;QACb,IAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IAAK;YAC3B,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;YACxB,UAAU,EAAE,IAAI;QAClB;QACA,OAAO;IACT;IACA,iBAAiB,KAAK,EAAE,IAAI,EAAE;QAC5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC,MAAM,UAAU,EAAE,KAAK,UAAU;IAC/E;IACA,UAAU;QACR,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,MAAM,GAAG,EAC1B,MAAM,IAAI,MAAM;QAElB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACpC,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,KAAK,GAAG;YAClD,IAAI,CAAC,CAAC,GAAG;YACT,IAAI,CAAC,CAAC,GAAG;YACT,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS;QAC5C;QACA,IAAI,CAAC,CAAC;QACN,IAAI,CAAC,iBAAiB;QACtB,IAAI,CAAC,IAAI,CAAC;IACZ;IACA;;;;;;GAMC,GACD,OAAO;QACL,IAAI,IAAI,CAAC,UAAU,KAAK,GACtB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS;QAE5C,MAAM,OAAO,CAAC,IAAI,CAAC,UAAU,GAAG;QAChC,IAAI,CAAC,UAAU;QACf,OAAO;IACT;IACA,QAAQ,MAAM,EAAE;QACd,MAAM,eAAe,CAAC,IAAI,CAAC,UAAU;QACrC,IAAI,WAAW,cACb,MAAM,IAAI,MAAM;QAElB,IAAI,CAAC,UAAU;QACf,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG;YACzB,IAAI,IAAI,CAAC,CAAC,GAAG,GAAG;gBACd,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBACxC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;gBACxB,IAAI,CAAC,CAAC,GAAG;YACX;YACA,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS;QAC5C;IACF;IACA,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,iBAAiB;IAC/B;IACA,KAAK,KAAK,EAAE;QACV,IAAI,UAAU,IAAI,CAAC,iBAAiB,EAClC;QAEF,IAAI,QAAQ,IAAI,CAAC,iBAAiB,EAAE;YAClC,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,iBAAiB;YACxC,QAAQ,KAAK,GAAG,CAAC,OAAO,IAAI,CAAC,mBAAmB,KAAK,IAAI,CAAC,CAAC,GAAG;QAChE;QACA,MAAM,mBAAmB,IAAI,CAAC,mBAAmB;QACjD,MAAM,IAAI,QAAQ;QAClB,IAAI,IAAI,GACN,MAAM,IAAI,MAAM,mCAAmC;aAC9C;YACL,IAAI,KAAK,IAAI,CAAC,CAAC,EACb,MAAM,IAAI,MAAM,mCAAmC,QAAQ,aAAa,mBAAmB,OAAQ,CAAA,mBAAmB,IAAI,CAAC,CAAC,AAAD;QAE/H;QACA,IAAI,CAAC,CAAC,GAAG;QACT,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,IAAI,CAAC,CAAC,KAAK,GACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,oBAAoB;aAE1C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE;IAE5C;IACA,IAAI,OAAO;QACT,MAAM,IAAI,MAAM;IAClB;IACA,gBAAgB;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU;IACpC;IACA,QAAQ,IAAI,EAAE;QACZ,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG;IAC1B;IACA,UAAU,MAAM,EAAE;QAChB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG;IAC5B;IACA;;;;GAIC,GACD,KAAK,IAAI,EAAE;QACT,MAAM,OAAO,IAAI,CAAC,CAAC,GAAG,OAAO,IAAI,IAAI,CAAC,CAAC,GAAG;QAC1C,IAAI,OAAO,GACT,IAAI,CAAC,IAAI,CAAC;IAEd;IACA;;;;GAIC,GACD,KAAK,EAAE,EAAE;QACP,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YAC3B,IAAI,IAAI,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,KAAK,MAAM,GAAG,EAC1D,OAAO;YAET,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS;YACpC,IAAI,CAAC,GAAG,CAAC;QACX;QACA,OAAO;IACT;IACA,IAAI,CAAC,EAAE;QACL,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAC9B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;QAE5C,IAAI,gBAAgB,IAClB,EAAE,aAAa,CAAC,IAAI,CAAC,mBAAmB,KAAK,IAAI,CAAC,CAAC;QAErD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG;IAC1B;IACA,sBAAsB;QACpB,OAAO,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC;IACxC;AACF;;;ACn7hBA,QAAQ,cAAc,GAAG,SAAU,CAAC;IAClC,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAC,SAAS;IAAC;AAC5C;AAEA,QAAQ,iBAAiB,GAAG,SAAU,CAAC;IACrC,OAAO,cAAc,CAAC,GAAG,cAAc;QAAC,OAAO;IAAI;AACrD;AAEA,QAAQ,SAAS,GAAG,SAAU,MAAM,EAAE,IAAI;IACxC,OAAO,IAAI,CAAC,QAAQ,OAAO,CAAC,SAAU,GAAG;QACvC,IACE,QAAQ,aACR,QAAQ,gBACR,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,MAE3C;QAGF,OAAO,cAAc,CAAC,MAAM,KAAK;YAC/B,YAAY;YACZ,KAAK;gBACH,OAAO,MAAM,CAAC,IAAI;YACpB;QACF;IACF;IAEA,OAAO;AACT;AAEA,QAAQ,MAAM,GAAG,SAAU,IAAI,EAAE,QAAQ,EAAE,GAAG;IAC5C,OAAO,cAAc,CAAC,MAAM,UAAU;QACpC,YAAY;QACZ,KAAK;IACP;AACF;;;AClCA,yGAAyG;;;AAMzG,sDAAa;AAJb;AAIO,MAAM,yBAAyB,UAAM,KAAK;;aACtB,MAAM;;;aACN,KAAK;;;aACL,MAAM;;;aACN,KAAK;;;aACL,QAAQ;;;aACR,OAAO;;;aACP,SAAS;;;aACT,SAAS;;;aACT,SAAS;;;aACT,SAAS;;;aACT,MAAM;;;aACN,KAAK;;;aACL,KAAK;;;aAEL,eAAe;YAClC;YAAyB;SAC5B;;;aAEsB,eAAe;YAClC;YAAM;YAAS;YAAQ;YAAS;YAAO;YAAO;YAAO;YAAO;YAC5D;YAAO;SACV;;;aAEsB,gBAAgB;YACnC;YAAM;YAAO;YAAM;YAAO;YAAM;YAAS;YAAQ;YAAU;YAC3D;YAAU;YAAU;YAAO;YAAM;SACpC;;;aAEsB,YAAY;YAC/B;SACH;;;aAEsB,YAAY;YAC/B;YAAO;YAAM;YAAO;YAAM;YAAS;YAAQ;YAAU;YAAU;YAC/D;YAAU;YAAO;YAAM;SAC1B;;IAGD,YAAmB,KAAuB,CAAE;QACxC,KAAK,CAAC;QACN,IAAI,CAAC,WAAW,GAAG,IAAI,UAAM,iBAAiB,CAAC,IAAI,EAAE,iBAAiB,IAAI,EAAE,iBAAiB,cAAc,EAAE,IAAI,UAAM,sBAAsB;IACjJ;IAEA,IAAW,kBAA0B;QAAE,OAAO;IAAkB;IAEhE,IAAW,eAAkC;QAAE,OAAO,iBAAiB,YAAY;IAAE;IACrF,IAAW,gBAAmC;QAAE,OAAO,iBAAiB,aAAa;IAAE;IACvF,IAAW,YAAsB;QAAE,OAAO,iBAAiB,SAAS;IAAE;IAEtE,IAAW,gBAA0B;QAAE,OAAO,iBAAiB,cAAc;IAAE;IAE/E,IAAW,eAAyB;QAAE,OAAO,iBAAiB,YAAY;IAAE;IAE5E,IAAW,YAAsB;QAAE,OAAO,iBAAiB,SAAS;IAAE;;aAE/C,iBAA2B;YAC9C;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAC/D;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAC9D;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAC9D;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAG;YAAG;YAAE;YAAG;YAAG;YAAG;YAAG;YAAG;YAC9D;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAG;YAAE;YAAG;YAAG;YAAG;YAAG;YAAG;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAG;YAAE;YAAG;YAC7D;YAAG;YAAG;YAAG;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAC9D;YAAG;YAAE;YAAG;YAAG;YAAG;YAAG;YAAG;YAAG;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAG;YAAG;YAAG;YAAG;YAC7D;YAAI;YAAE;YAAE;YAAG;YAAG;YAAG;YAAG;YAAG;YAAG;YAAG;YAAI;YAAE;YAAE;YAAE;YAAG;YAAG;YAAG;YAAG;YAAG;YAAG;YAAE;YAAE;YAAE;YAC/D;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAC/D;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAC/D;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAC/D;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAC9D;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAC/D;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAI;YAAE;YAAE;YAAG;YAAG;YAAE;YAAI;YAAE;YAAE;YAAG;YAAE;YAAE;YAC9D;YAAE;YAAE;YAAG;YAAG;YAAE;YAAI;YAAE;YAAE;YAAG;YAAG;YAAE;YAAI;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAI;YAAE;YAC/D;YAAG;YAAG;YAAE;YAAI;YAAE;YAAE;YAAG;YAAG;YAAE;YAAI;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAC/D;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAC9D;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAC/D;YAAE;YAAI;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAI;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAC9D;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAC/D;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAC9D;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAC9D;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAC9D;YAAG;YAAE;Y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AAO;IACX;;aAEuB,iBAA2B;YAC9C;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAC9D;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAC9D;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAC9D;YAAG;YAAE;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAC/D;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAC9D;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAG;YAAE;YAAG;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAAE;YAC9D;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAC/D;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAC/D;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAC/D;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAC/D;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAC/D;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAC7D;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAG;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAC9D;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAC7D;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAC9D;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;YAC9D;YAAG;YAAE;YAAE;YAAG;YAAE;YAAE;YAAE;YAAE;YAAE;YAAG;YAAG;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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-f967cf51c16ed2c5.js","src/index.ts","node_modules/antlr4ng/dist/index.mjs","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/parser/MainGrammarLexer.ts","src/parser/MainGrammarParser.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SERVER_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"439701173a9199ea\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"4b8ea06834df32e0\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_SERVER_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */,\n  disposedAssets /*: {|[string]: boolean|} */,\n  assetsToDispose /*: Array<[ParcelRequire, string]> */,\n  assetsToAccept /*: Array<[ParcelRequire, string]> */,\n  bundleNotFound = false;\nfunction getHostname() {\n  return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);\n}\n\n// eslint-disable-next-line no-redeclare\nlet WebSocket = globalThis.WebSocket;\nif (!WebSocket && typeof module.bundle.root === 'function') {\n  try {\n    // eslint-disable-next-line no-global-assign\n    WebSocket = module.bundle.root('ws');\n  } catch {\n    // ignore.\n  }\n}\nvar hostname = getHostname();\nvar port = getPort();\nvar protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif (!parent || !parent.isParcelRequire) {\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      // If we're running in the dev server's node runner, listen for messages on the parent port.\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.on('message', async message => {\n          try {\n            await handleMessage(message);\n            parentPort.postMessage('updated');\n          } catch {\n            parentPort.postMessage('restart');\n          }\n        });\n\n        // After the bundle has finished running, notify the dev server that the HMR update is complete.\n        queueMicrotask(() => parentPort.postMessage('ready'));\n      }\n    } catch {\n      if (typeof WebSocket !== 'undefined') {\n        try {\n          ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n        } catch (err) {\n          // Ignore cloudflare workers error.\n          if (err.message && !err.message.includes('Disallowed operation called within global scope')) {\n            console.error(err.message);\n          }\n        }\n      }\n    }\n  }\n  if (ws) {\n    // $FlowFixMe\n    ws.onmessage = async function (event /*: {data: string, ...} */) {\n      var data /*: HMRMessage */ = JSON.parse(event.data);\n      await handleMessage(data);\n    };\n    if (ws instanceof WebSocket) {\n      ws.onerror = function (e) {\n        if (e.message) {\n          console.error(e.message);\n        }\n      };\n      ws.onclose = function () {\n        console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n      };\n    }\n  }\n}\nasync function handleMessage(data /*: HMRMessage */) {\n  checkedAssets = {} /*: {|[string]: boolean|} */;\n  disposedAssets = {} /*: {|[string]: boolean|} */;\n  assetsToAccept = [];\n  assetsToDispose = [];\n  bundleNotFound = false;\n  if (data.type === 'reload') {\n    fullReload();\n  } else if (data.type === 'update') {\n    // Remove error overlay if there is one\n    if (typeof document !== 'undefined') {\n      removeErrorOverlay();\n    }\n    let assets = data.assets;\n\n    // Handle HMR Update\n    let handled = assets.every(asset => {\n      return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n    });\n\n    // Dispatch a custom event in case a bundle was not found. This might mean\n    // an asset on the server changed and we should reload the page. This event\n    // gives the client an opportunity to refresh without losing state\n    // (e.g. via React Server Components). If e.preventDefault() is not called,\n    // we will trigger a full page reload.\n    if (handled && bundleNotFound && assets.some(a => a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n      handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {\n        cancelable: true\n      }));\n    }\n    if (handled) {\n      console.clear();\n\n      // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n      if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n      }\n      await hmrApplyUpdates(assets);\n      hmrDisposeQueue();\n\n      // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n      let processedAssets = {};\n      for (let i = 0; i < assetsToAccept.length; i++) {\n        let id = assetsToAccept[i][1];\n        if (!processedAssets[id]) {\n          hmrAccept(assetsToAccept[i][0], id);\n          processedAssets[id] = true;\n        }\n      }\n    } else fullReload();\n  }\n  if (data.type === 'error') {\n    // Log parcel errors to console\n    for (let ansiDiagnostic of data.diagnostics.ansi) {\n      let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n      console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n    }\n    if (typeof document !== 'undefined') {\n      // Render the fancy html overlay\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html);\n      // $FlowFixMe\n      document.body.appendChild(overlay);\n    }\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if (typeof location !== 'undefined' && 'reload' in location) {\n    location.reload();\n  } else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  } else {\n    try {\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.postMessage('restart');\n      }\n    } catch (err) {\n      console.error('[parcel] ⚠️ An HMR update was not accepted. Please restart the process.');\n    }\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout || typeof document === 'undefined') {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    }\n\n    // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.\n    // This is required in case modules are duplicated. We need to ensure all instances have the updated code.\n    if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  checkedAssets = {};\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else if (a !== null) {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      bundleNotFound = true;\n      return true;\n    }\n    return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return null;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  if (!cached) {\n    return true;\n  }\n  assetsToDispose.push([bundle, id]);\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n  return false;\n}\nfunction hmrDisposeQueue() {\n  // Dispose all old assets.\n  for (let i = 0; i < assetsToDispose.length; i++) {\n    let id = assetsToDispose[i][1];\n    if (!disposedAssets[id]) {\n      hmrDispose(assetsToDispose[i][0], id);\n      disposedAssets[id] = true;\n    }\n  }\n  assetsToDispose = [];\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    let assetsToAlsoAccept = [];\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      let additionalAssets = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (Array.isArray(additionalAssets) && additionalAssets.length) {\n        assetsToAlsoAccept.push(...additionalAssets);\n      }\n    });\n    if (assetsToAlsoAccept.length) {\n      let handled = assetsToAlsoAccept.every(function (a) {\n        return hmrAcceptCheck(a[0], a[1]);\n      });\n      if (!handled) {\n        return fullReload();\n      }\n      hmrDisposeQueue();\n    }\n  }\n}","import { CharStream, CommonTokenStream } from 'antlr4ng';\r\nimport { MainGrammarLexer }      from './parser/MainGrammarLexer';\r\nimport { MainGrammarParser }     from './parser/MainGrammarParser';\r\n\r\n// Grab UI elements\r\nconst inputEl  = document.getElementById('input')  as HTMLTextAreaElement;\r\nconst outputEl = document.getElementById('output') as HTMLPreElement;\r\nconst btn      = document.getElementById('go')     as HTMLButtonElement;\r\n\r\nbtn.addEventListener('click', () => {\r\n  const text = inputEl.value;\r\n  const chars = CharStream.fromString(text);\r\n  const lexer = new MainGrammarLexer(chars);\r\n  const tokens = new CommonTokenStream(lexer);\r\n  const parser = new MainGrammarParser(tokens);\r\n\r\n  // entry rule — adjust to your grammar’s start symbol:\r\n  const tree = parser.program();\r\n\r\n  outputEl.textContent = parser.ruleNames.toString();\r\n});","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/IntStream.ts\nvar IntStream;\n((IntStream2) => {\n  IntStream2.EOF = -1;\n  IntStream2.UNKNOWN_SOURCE_NAME = \"<unknown>\";\n})(IntStream || (IntStream = {}));\n\n// src/Token.ts\nvar Token;\n((Token2) => {\n  Token2.INVALID_TYPE = 0;\n  Token2.EPSILON = -2;\n  Token2.MIN_USER_TOKEN_TYPE = 1;\n  Token2.EOF = IntStream.EOF;\n  Token2.DEFAULT_CHANNEL = 0;\n  Token2.HIDDEN_CHANNEL = 1;\n  Token2.MIN_USER_CHANNEL_VALUE = 2;\n})(Token || (Token = {}));\nvar isToken = /* @__PURE__ */ __name((candidate) => {\n  const token = candidate;\n  return token.tokenSource !== void 0 && token.channel !== void 0;\n}, \"isToken\");\n\n// src/misc/BitSet.ts\nvar BitSet = class {\n  static {\n    __name(this, \"BitSet\");\n  }\n  data;\n  /**\n   * Creates a new bit set. All bits are initially `false`.\n   *\n   * @param data Optional initial data.\n   */\n  constructor(data) {\n    if (data) {\n      this.data = new Uint32Array(data.map((value) => {\n        return value >>> 0;\n      }));\n    } else {\n      this.data = new Uint32Array(1);\n    }\n  }\n  /**\n   * @returns an iterator over all set bits.\n   */\n  [Symbol.iterator]() {\n    const length = this.data.length;\n    let currentIndex = 0;\n    let currentWord = this.data[currentIndex];\n    const words = this.data;\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next: /* @__PURE__ */ __name(() => {\n        while (currentIndex < length) {\n          if (currentWord !== 0) {\n            const t = currentWord & -currentWord;\n            const value = (currentIndex << 5) + this.bitCount(t - 1);\n            currentWord ^= t;\n            return { done: false, value };\n          } else {\n            currentIndex++;\n            if (currentIndex < length) {\n              currentWord = words[currentIndex];\n            }\n          }\n        }\n        return { done: true, value: void 0 };\n      }, \"next\")\n    };\n  }\n  /**\n   * Sets a single bit or all of the bits in this `BitSet` to `false`.\n   *\n   * @param index the index of the bit to be cleared, or undefined to clear all bits.\n   */\n  clear(index) {\n    if (index === void 0) {\n      this.data = new Uint32Array();\n    } else {\n      this.resize(index);\n      this.data[index >>> 5] &= ~(1 << index);\n    }\n  }\n  /**\n   * Performs a logical **OR** of this bit set with the bit set argument. This bit set is modified so that a bit in it\n   * has the value `true` if and only if it either already had the value `true` or the corresponding bit in the bit\n   * set argument has the value `true`.\n   *\n   * @param set the bit set to be ORed with.\n   */\n  or(set) {\n    const minCount = Math.min(this.data.length, set.data.length);\n    for (let k = 0; k < minCount; ++k) {\n      this.data[k] |= set.data[k];\n    }\n    if (this.data.length < set.data.length) {\n      this.resize((set.data.length << 5) - 1);\n      const c = set.data.length;\n      for (let k = minCount; k < c; ++k) {\n        this.data[k] = set.data[k];\n      }\n    }\n  }\n  /**\n   * Returns the value of the bit with the specified index. The value is `true` if the bit with the index `bitIndex`\n   * is currently set in this `BitSet`; otherwise, the result is `false`.\n   *\n   * @param index the bit index\n   *\n   * @returns the value of the bit with the specified index.\n   */\n  get(index) {\n    if (index < 0) {\n      throw new RangeError(\"index cannot be negative\");\n    }\n    const slot = index >>> 5;\n    if (slot >= this.data.length) {\n      return false;\n    }\n    return (this.data[slot] & 1 << index % 32) !== 0;\n  }\n  /**\n   * @returns the number of set bits.\n   */\n  get length() {\n    let result = 0;\n    const c = this.data.length;\n    const w = this.data;\n    for (let i = 0; i < c; i++) {\n      result += this.bitCount(w[i]);\n    }\n    return result;\n  }\n  /**\n   * @returns an array with indices of set bits.\n   */\n  values() {\n    const result = new Array(this.length);\n    let pos = 0;\n    const length = this.data.length;\n    for (let k = 0; k < length; ++k) {\n      let w = this.data[k];\n      while (w !== 0) {\n        const t = w & -w;\n        result[pos++] = (k << 5) + this.bitCount(t - 1);\n        w ^= t;\n      }\n    }\n    return result;\n  }\n  /**\n   * @returns the index of the first bit that is set to `true` that occurs on or after the specified starting index.\n   * If no such bit exists then undefined is returned.\n   *\n   * @param fromIndex the index to start checking from (inclusive)\n   */\n  nextSetBit(fromIndex) {\n    if (fromIndex < 0) {\n      throw new RangeError(\"index cannot be negative\");\n    }\n    for (const index of this) {\n      if (index >= fromIndex) {\n        return index;\n      }\n    }\n    return void 0;\n  }\n  /**\n   * Sets the bit at the specified index to `true`.\n   *\n   * @param index a bit index\n   */\n  set(index) {\n    if (index < 0) {\n      throw new RangeError(\"index cannot be negative\");\n    }\n    this.resize(index);\n    this.data[index >>> 5] |= 1 << index % 32;\n  }\n  /**\n   * @returns a string representation of this bit set.\n   */\n  toString() {\n    return \"{\" + this.values().join(\", \") + \"}\";\n  }\n  resize(index) {\n    const count = index + 32 >>> 5;\n    if (count <= this.data.length) {\n      return;\n    }\n    const data = new Uint32Array(count);\n    data.set(this.data);\n    data.fill(0, this.data.length);\n    this.data = data;\n  }\n  bitCount(v) {\n    v = v - (v >> 1 & 1431655765);\n    v = (v & 858993459) + (v >> 2 & 858993459);\n    v = v + (v >> 4) & 252645135;\n    v = v + (v >> 8);\n    v = v + (v >> 16);\n    return v & 63;\n  }\n};\n\n// src/utils/MurmurHash.ts\nvar c1 = 3432918353;\nvar c2 = 461845907;\nvar r1 = 15;\nvar r2 = 13;\nvar m = 5;\nvar n = 3864292196;\nvar MurmurHash = class _MurmurHash {\n  static {\n    __name(this, \"MurmurHash\");\n  }\n  static defaultSeed = 701;\n  constructor() {\n  }\n  /**\n   * Initialize the hash using the specified {@code seed}.\n   *\n   * @param seed the seed\n   *\n   * @returns the intermediate hash value\n   */\n  static initialize(seed = _MurmurHash.defaultSeed) {\n    return seed;\n  }\n  static updateFromComparable(hash, value) {\n    return this.update(hash, value?.hashCode() ?? 0);\n  }\n  /**\n   * Update the intermediate hash value for the next input {@code value}.\n   *\n   * @param hash The intermediate hash value.\n   * @param value the value to add to the current hash.\n   *\n   * @returns the updated intermediate hash value\n   */\n  static update(hash, value) {\n    value = Math.imul(value, c1);\n    value = value << r1 | value >>> 32 - r1;\n    value = Math.imul(value, c2);\n    hash = hash ^ value;\n    hash = hash << r2 | hash >>> 32 - r2;\n    hash = Math.imul(hash, m) + n;\n    return hash;\n  }\n  /**\n   * Apply the final computation steps to the intermediate value {@code hash}\n   * to form the final result of the MurmurHash 3 hash function.\n   *\n   * @param hash The intermediate hash value.\n   * @param entryCount The number of values added to the hash.\n   *\n   * @returns the final hash result\n   */\n  static finish(hash, entryCount) {\n    hash ^= entryCount * 4;\n    hash ^= hash >>> 16;\n    hash = Math.imul(hash, 2246822507);\n    hash ^= hash >>> 13;\n    hash = Math.imul(hash, 3266489909);\n    hash ^= hash >>> 16;\n    return hash;\n  }\n  /**\n   * An all-in-one convenience method to compute a hash for a single value.\n   *\n   * @param value The value to hash.\n   * @param seed The seed for the hash value.\n   *\n   * @returns The computed hash.\n   */\n  static hashCode(value, seed) {\n    return _MurmurHash.finish(_MurmurHash.update(seed ?? _MurmurHash.defaultSeed, value), 1);\n  }\n};\n\n// src/misc/ObjectEqualityComparator.ts\nvar ObjectEqualityComparator = class _ObjectEqualityComparator {\n  static {\n    __name(this, \"ObjectEqualityComparator\");\n  }\n  static instance = new _ObjectEqualityComparator();\n  hashCode(obj) {\n    if (obj == null) {\n      return 0;\n    }\n    return obj.hashCode();\n  }\n  equals(a, b) {\n    if (a == null) {\n      return b == null;\n    }\n    return a.equals(b);\n  }\n};\n\n// src/misc/DefaultEqualityComparator.ts\nvar DefaultEqualityComparator = class _DefaultEqualityComparator {\n  static {\n    __name(this, \"DefaultEqualityComparator\");\n  }\n  static instance = new _DefaultEqualityComparator();\n  hashCode(obj) {\n    if (obj == null) {\n      return 0;\n    }\n    return ObjectEqualityComparator.instance.hashCode(obj);\n  }\n  equals(a, b) {\n    if (a == null) {\n      return b == null;\n    }\n    if (typeof a === \"string\" || typeof a === \"number\") {\n      return a === b;\n    }\n    return ObjectEqualityComparator.instance.equals(a, b);\n  }\n};\n\n// src/misc/HashSet.ts\nvar HashSet = class _HashSet {\n  static {\n    __name(this, \"HashSet\");\n  }\n  static defaultLoadFactor = 0.75;\n  static initialCapacity = 16;\n  // must be power of 2\n  comparator;\n  buckets;\n  threshold;\n  /** How many elements in set */\n  itemCount = 0;\n  constructor(comparatorOrSet, initialCapacity = _HashSet.initialCapacity) {\n    if (comparatorOrSet instanceof _HashSet) {\n      this.comparator = comparatorOrSet.comparator;\n      this.buckets = comparatorOrSet.buckets.slice(0);\n      for (let i = 0; i < this.buckets.length; i++) {\n        const bucket = this.buckets[i];\n        if (bucket) {\n          this.buckets[i] = bucket.slice(0);\n        }\n      }\n      this.itemCount = comparatorOrSet.itemCount;\n      this.threshold = comparatorOrSet.threshold;\n    } else {\n      this.comparator = comparatorOrSet ?? DefaultEqualityComparator.instance;\n      this.buckets = this.createBuckets(initialCapacity);\n      this.threshold = Math.floor(_HashSet.initialCapacity * _HashSet.defaultLoadFactor);\n    }\n  }\n  /**\n   * Add `o` to set if not there; return existing value if already\n   * there. This method performs the same operation as {@link #add} aside from\n   * the return value.\n   *\n   * @param o the object to add to the set.\n   *\n   * @returns An existing element that equals to `o` if already in set, otherwise `o`.\n   */\n  getOrAdd(o) {\n    if (this.itemCount > this.threshold) {\n      this.expand();\n    }\n    const b = this.getBucket(o);\n    let bucket = this.buckets[b];\n    if (!bucket) {\n      bucket = [o];\n      this.buckets[b] = bucket;\n      ++this.itemCount;\n      return o;\n    }\n    for (const existing of bucket) {\n      if (this.comparator.equals(existing, o)) {\n        return existing;\n      }\n    }\n    bucket.push(o);\n    ++this.itemCount;\n    return o;\n  }\n  get(o) {\n    if (o == null) {\n      return o;\n    }\n    const b = this.getBucket(o);\n    const bucket = this.buckets[b];\n    if (!bucket) {\n      return void 0;\n    }\n    for (const e of bucket) {\n      if (this.comparator.equals(e, o)) {\n        return e;\n      }\n    }\n    return void 0;\n  }\n  /**\n   * Removes the specified element from this set if it is present.\n   *\n   * @param o object to be removed from this set, if present.\n   *\n   * @returns `true` if the set contained the specified element.\n   */\n  remove(o) {\n    if (o == null) {\n      return false;\n    }\n    const b = this.getBucket(o);\n    const bucket = this.buckets[b];\n    if (!bucket) {\n      return false;\n    }\n    for (let i = 0; i < bucket.length; i++) {\n      const existing = bucket[i];\n      if (this.comparator.equals(existing, o)) {\n        bucket.splice(i, 1);\n        --this.itemCount;\n        return true;\n      }\n    }\n    return false;\n  }\n  hashCode() {\n    let hash = MurmurHash.initialize();\n    for (const bucket of this.buckets) {\n      if (bucket == null) {\n        continue;\n      }\n      for (const o of bucket) {\n        if (o == null) {\n          break;\n        }\n        hash = MurmurHash.update(hash, this.comparator.hashCode(o));\n      }\n    }\n    hash = MurmurHash.finish(hash, this.size);\n    return hash;\n  }\n  equals(o) {\n    if (o === this) {\n      return true;\n    }\n    if (!(o instanceof _HashSet)) {\n      return false;\n    }\n    if (o.size !== this.size) {\n      return false;\n    }\n    return this.containsAll(o);\n  }\n  add(t) {\n    const existing = this.getOrAdd(t);\n    return existing === t;\n  }\n  contains(o) {\n    return this.containsFast(o);\n  }\n  containsFast(obj) {\n    if (obj == null) {\n      return false;\n    }\n    return this.get(obj) !== void 0;\n  }\n  *[Symbol.iterator]() {\n    yield* this.toArray();\n  }\n  toArray() {\n    const a = new Array(this.size);\n    let i = 0;\n    for (const bucket of this.buckets) {\n      if (bucket == null) {\n        continue;\n      }\n      for (const o of bucket) {\n        if (o == null) {\n          break;\n        }\n        a[i++] = o;\n      }\n    }\n    return a;\n  }\n  containsAll(collection) {\n    if (collection instanceof _HashSet) {\n      for (const bucket of collection.buckets) {\n        if (bucket == null) {\n          continue;\n        }\n        for (const o of bucket) {\n          if (o == null) {\n            break;\n          }\n          if (!this.containsFast(o)) {\n            return false;\n          }\n        }\n      }\n    } else {\n      for (const o of collection) {\n        if (!this.containsFast(o)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  addAll(c) {\n    let changed = false;\n    for (const o of c) {\n      const existing = this.getOrAdd(o);\n      if (existing !== o) {\n        changed = true;\n      }\n    }\n    return changed;\n  }\n  clear() {\n    this.buckets = this.createBuckets(_HashSet.initialCapacity);\n    this.itemCount = 0;\n    this.threshold = Math.floor(_HashSet.initialCapacity * _HashSet.defaultLoadFactor);\n  }\n  toString() {\n    if (this.size === 0) {\n      return \"{}\";\n    }\n    let buf = \"{\";\n    let first = true;\n    for (const bucket of this.buckets) {\n      if (bucket == null) {\n        continue;\n      }\n      for (const o of bucket) {\n        if (o == null) {\n          break;\n        }\n        if (first) {\n          first = false;\n        } else {\n          buf += \", \";\n        }\n        buf += o.toString();\n      }\n    }\n    buf += \"}\";\n    return buf;\n  }\n  toTableString() {\n    let buf = \"\";\n    for (const bucket of this.buckets) {\n      if (bucket == null) {\n        buf += \"null\\n\";\n        continue;\n      }\n      buf += \"[\";\n      let first = true;\n      for (const o of bucket) {\n        if (first) {\n          first = false;\n        } else {\n          buf += \" \";\n        }\n        if (o == null) {\n          buf += \"_\";\n        } else {\n          buf += o.toString();\n        }\n      }\n      buf += \"]\\n\";\n    }\n    return buf;\n  }\n  getBucket(o) {\n    const hash = this.comparator.hashCode(o);\n    const b = hash & this.buckets.length - 1;\n    return b;\n  }\n  expand() {\n    const old = this.buckets;\n    const newCapacity = this.buckets.length * 2;\n    const newTable = this.createBuckets(newCapacity);\n    this.buckets = newTable;\n    this.threshold = Math.floor(newCapacity * _HashSet.defaultLoadFactor);\n    for (const bucket of old) {\n      if (!bucket) {\n        continue;\n      }\n      for (const o of bucket) {\n        const b = this.getBucket(o);\n        let newBucket = this.buckets[b];\n        if (!newBucket) {\n          newBucket = [];\n          this.buckets[b] = newBucket;\n        }\n        newBucket.push(o);\n      }\n    }\n  }\n  get size() {\n    return this.itemCount;\n  }\n  get isEmpty() {\n    return this.itemCount === 0;\n  }\n  /**\n   * Return an array of `T[]` with length `capacity`.\n   *\n   * @param capacity the length of the array to return\n   * @returns the newly constructed array\n   */\n  createBuckets(capacity) {\n    return new Array(capacity);\n  }\n};\n\n// src/misc/Interval.ts\nvar Interval = class _Interval {\n  static {\n    __name(this, \"Interval\");\n  }\n  static INVALID_INTERVAL = new _Interval(-1, -2);\n  static INTERVAL_POOL_MAX_VALUE = 1e3;\n  static cache = [];\n  start;\n  stop;\n  cachedHashCode;\n  constructor(start, stop) {\n    this.start = start;\n    this.stop = stop;\n    this.cachedHashCode = Math.imul(651 + start, 31) + stop;\n  }\n  /**\n   * Creates a new interval from the given values.\n   *\n   * Interval objects are used readonly so share all with the\n   * same single value a==b up to some max size. Use an array as a perfect hash.\n   * Return shared object for 0..INTERVAL_POOL_MAX_VALUE or a new\n   * Interval object with a..a in it.  On Java.g4, 218623 IntervalSets\n   * have a..a (set with 1 element).\n   *\n   * @param a The start of the interval.\n   * @param b The end of the interval (inclusive).\n   *\n   * @returns A cached or new interval.\n   */\n  static of(a, b) {\n    if (a !== b || a < 0 || a > _Interval.INTERVAL_POOL_MAX_VALUE) {\n      return new _Interval(a, b);\n    }\n    if (!_Interval.cache[a]) {\n      _Interval.cache[a] = new _Interval(a, a);\n    }\n    return _Interval.cache[a];\n  }\n  equals(o) {\n    return this.start === o.start && this.stop === o.stop;\n  }\n  hashCode() {\n    return this.cachedHashCode;\n  }\n  /** Does this start completely before other? Disjoint */\n  startsBeforeDisjoint(other) {\n    return this.start < other.start && this.stop < other.start;\n  }\n  /** Does this start at or before other? Nondisjoint */\n  startsBeforeNonDisjoint(other) {\n    return this.start <= other.start && this.stop >= other.start;\n  }\n  /** Does this.start start after other.stop? May or may not be disjoint */\n  startsAfter(other) {\n    return this.start > other.start;\n  }\n  /** Does this start completely after other? Disjoint */\n  startsAfterDisjoint(other) {\n    return this.start > other.stop;\n  }\n  /** Does this start after other? NonDisjoint */\n  startsAfterNonDisjoint(other) {\n    return this.start > other.start && this.start <= other.stop;\n  }\n  /** Are both ranges disjoint? I.e., no overlap? */\n  disjoint(other) {\n    return this.startsBeforeDisjoint(other) || this.startsAfterDisjoint(other);\n  }\n  /** Are two intervals adjacent such as 0..41 and 42..42? */\n  adjacent(other) {\n    return this.start === other.stop + 1 || this.stop === other.start - 1;\n  }\n  properlyContains(other) {\n    return other.start >= this.start && other.stop <= this.stop;\n  }\n  /** Return the interval computed from combining this and other */\n  union(other) {\n    return _Interval.of(Math.min(this.start, other.start), Math.max(this.stop, other.stop));\n  }\n  /** Return the interval in common between this and o */\n  intersection(other) {\n    return _Interval.of(Math.max(this.start, other.start), Math.min(this.stop, other.stop));\n  }\n  /**\n   * Return the interval with elements from this not in other;\n   *  other must not be totally enclosed (properly contained)\n   *  within this, which would result in two disjoint intervals\n   *  instead of the single one returned by this method.\n   */\n  differenceNotProperlyContained(other) {\n    let diff = null;\n    if (other.startsBeforeNonDisjoint(this)) {\n      diff = _Interval.of(Math.max(this.start, other.stop + 1), this.stop);\n    } else if (other.startsAfterNonDisjoint(this)) {\n      diff = _Interval.of(this.start, other.start - 1);\n    }\n    return diff;\n  }\n  toString() {\n    return `${this.start}..${this.stop}`;\n  }\n  get length() {\n    if (this.stop < this.start) {\n      return 0;\n    }\n    return this.stop - this.start + 1;\n  }\n};\n\n// src/Vocabulary.ts\nvar Vocabulary = class _Vocabulary {\n  static {\n    __name(this, \"Vocabulary\");\n  }\n  static EMPTY_NAMES = [];\n  /**\n   * Gets an empty {@link Vocabulary} instance.\n   *\n   *\n   * No literal or symbol names are assigned to token types, so\n   * {@link #getDisplayName(int)} returns the numeric value for all tokens\n   * except {@link Token#EOF}.\n   */\n  static EMPTY_VOCABULARY = new _Vocabulary(_Vocabulary.EMPTY_NAMES, _Vocabulary.EMPTY_NAMES, _Vocabulary.EMPTY_NAMES);\n  maxTokenType;\n  literalNames;\n  symbolicNames;\n  displayNames;\n  /**\n   * Constructs a new instance of {@link Vocabulary} from the specified\n   * literal, symbolic, and display token names.\n   *\n   * @param literalNames The literal names assigned to tokens, or `null`\n   * if no literal names are assigned.\n   * @param symbolicNames The symbolic names assigned to tokens, or\n   * `null` if no symbolic names are assigned.\n   * @param displayNames The display names assigned to tokens, or `null`\n   * to use the values in `literalNames` and `symbolicNames` as\n   * the source of display names, as described in\n   * {@link #getDisplayName(int)}.\n   */\n  constructor(literalNames, symbolicNames, displayNames) {\n    this.literalNames = literalNames ?? _Vocabulary.EMPTY_NAMES;\n    this.symbolicNames = symbolicNames ?? _Vocabulary.EMPTY_NAMES;\n    this.displayNames = displayNames ?? _Vocabulary.EMPTY_NAMES;\n    this.maxTokenType = Math.max(this.displayNames.length, Math.max(\n      this.literalNames.length,\n      this.symbolicNames.length\n    )) - 1;\n  }\n  /**\n   * Returns a {@link Vocabulary} instance from the specified set of token\n   * names. This method acts as a compatibility layer for the single\n   * `tokenNames` array generated by previous releases of ANTLR.\n   *\n   * The resulting vocabulary instance returns `null` for\n   * {@link getLiteralName getLiteralName(int)} and {@link getSymbolicName getSymbolicName(int)}, and the\n   * value from `tokenNames` for the display names.\n   *\n   * @param tokenNames The token names, or `null` if no token names are\n   * available.\n   * @returns A {@link Vocabulary} instance which uses `tokenNames` for\n   * the display names of tokens.\n   */\n  static fromTokenNames(tokenNames) {\n    if (tokenNames == null || tokenNames.length === 0) {\n      return _Vocabulary.EMPTY_VOCABULARY;\n    }\n    const literalNames = [...tokenNames];\n    const symbolicNames = [...tokenNames];\n    for (let i = 0; i < tokenNames.length; i++) {\n      const tokenName = tokenNames[i];\n      if (tokenName == null) {\n        continue;\n      }\n      if (tokenName.length > 0) {\n        const firstChar = tokenName.codePointAt(0);\n        if (firstChar === 39) {\n          symbolicNames[i] = null;\n          continue;\n        } else if (firstChar >= 65 && firstChar <= 90) {\n          literalNames[i] = null;\n          continue;\n        }\n      }\n      literalNames[i] = null;\n      symbolicNames[i] = null;\n    }\n    return new _Vocabulary(literalNames, symbolicNames, tokenNames);\n  }\n  getMaxTokenType() {\n    return this.maxTokenType;\n  }\n  getLiteralName(tokenType) {\n    if (tokenType >= 0 && tokenType < this.literalNames.length) {\n      return this.literalNames[tokenType];\n    }\n    return null;\n  }\n  getSymbolicName(tokenType) {\n    if (tokenType >= 0 && tokenType < this.symbolicNames.length) {\n      return this.symbolicNames[tokenType];\n    }\n    if (tokenType === Token.EOF) {\n      return \"EOF\";\n    }\n    return null;\n  }\n  getDisplayName(tokenType) {\n    if (tokenType >= 0 && tokenType < this.displayNames.length) {\n      const displayName = this.displayNames[tokenType];\n      if (displayName != null) {\n        return displayName;\n      }\n    }\n    const literalName = this.getLiteralName(tokenType);\n    if (literalName != null) {\n      return literalName;\n    }\n    const symbolicName = this.getSymbolicName(tokenType);\n    if (symbolicName != null) {\n      return symbolicName;\n    }\n    return `${tokenType}`;\n  }\n  getLiteralNames() {\n    return this.literalNames;\n  }\n  getSymbolicNames() {\n    return this.symbolicNames;\n  }\n  getDisplayNames() {\n    return this.displayNames;\n  }\n};\n\n// src/misc/IntervalSet.ts\nvar IntervalSet = class _IntervalSet {\n  static {\n    __name(this, \"IntervalSet\");\n  }\n  /** The list of sorted, disjoint intervals. */\n  intervals = [];\n  cachedHashCode;\n  constructor(set) {\n    if (set) {\n      if (Array.isArray(set)) {\n        for (const el of set) {\n          this.addOne(el);\n        }\n      } else {\n        this.addSet(set);\n      }\n    }\n  }\n  /** Create a set with all ints within range [a..b] (inclusive) */\n  static of(a, b) {\n    const s = new _IntervalSet();\n    s.addRange(a, b);\n    return s;\n  }\n  /** Combine all sets in the array and return the union of them */\n  static or(sets) {\n    const result = new _IntervalSet();\n    for (const set of sets) {\n      result.addSet(set);\n    }\n    return result;\n  }\n  [Symbol.iterator]() {\n    return this.intervals[Symbol.iterator]();\n  }\n  get(index) {\n    return this.intervals[index];\n  }\n  /**\n   * Returns the minimum value contained in the set if not isNil().\n   *\n   * @returns the minimum value contained in the set.\n   */\n  get minElement() {\n    if (this.intervals.length === 0) {\n      return Token.INVALID_TYPE;\n    }\n    return this.intervals[0].start;\n  }\n  /**\n   * Returns the maximum value contained in the set if not isNil().\n   *\n   * @returns the maximum value contained in the set.\n   */\n  get maxElement() {\n    if (this.intervals.length === 0) {\n      return Token.INVALID_TYPE;\n    }\n    return this.intervals[this.intervals.length - 1].stop;\n  }\n  clear() {\n    this.cachedHashCode = void 0;\n    this.intervals = [];\n  }\n  /**\n   * Add a single element to the set.  An isolated element is stored\n   *  as a range el..el.\n   */\n  addOne(v) {\n    this.addInterval(new Interval(v, v));\n  }\n  /**\n   * Add interval; i.e., add all integers from a to b to set.\n   *  If b < a, do nothing.\n   *  Keep list in sorted order (by left range value).\n   *  If overlap, combine ranges. For example,\n   *  If this is {1..5, 10..20}, adding 6..7 yields\n   *  {1..5, 6..7, 10..20}. Adding 4..8 yields {1..8, 10..20}.\n   */\n  addRange(l, h) {\n    this.addInterval(new Interval(l, h));\n  }\n  addInterval(addition) {\n    this.cachedHashCode = void 0;\n    if (this.intervals.length === 0) {\n      this.intervals.push(addition);\n    } else {\n      for (let pos = 0; pos < this.intervals.length; pos++) {\n        const existing = this.intervals[pos];\n        if (addition.equals(existing)) {\n          return;\n        }\n        if (addition.adjacent(existing) || !addition.disjoint(existing)) {\n          const bigger = addition.union(existing);\n          this.intervals[pos] = bigger;\n          for (let sub = pos + 1; sub < this.intervals.length; ) {\n            const next = this.intervals[sub];\n            if (!bigger.adjacent(next) && bigger.disjoint(next)) {\n              break;\n            }\n            this.intervals.splice(sub, 1);\n            this.intervals[pos] = bigger.union(next);\n          }\n          return;\n        }\n        if (addition.startsBeforeDisjoint(existing)) {\n          this.intervals.splice(pos, 0, addition);\n          return;\n        }\n      }\n      this.intervals.push(addition);\n    }\n  }\n  addSet(other) {\n    other.intervals.forEach((toAdd) => {\n      return this.addInterval(toAdd);\n    }, this);\n    return this;\n  }\n  complementWithVocabulary(vocabulary) {\n    const result = new _IntervalSet();\n    if (!vocabulary) {\n      return result;\n    }\n    if (vocabulary.length === 0) {\n      return result;\n    }\n    result.addSet(vocabulary);\n    return result.subtract(this);\n  }\n  complement(minElement, maxElement) {\n    const result = new _IntervalSet();\n    result.addInterval(new Interval(minElement, maxElement));\n    return result.subtract(this);\n  }\n  /** combine all sets in the array returned the or'd value */\n  or(sets) {\n    const result = new _IntervalSet();\n    result.addSet(this);\n    sets.forEach((set) => {\n      return result.addSet(set);\n    });\n    return result;\n  }\n  and(other) {\n    if (other.length === 0) {\n      return new _IntervalSet();\n    }\n    const myIntervals = this.intervals;\n    const theirIntervals = other.intervals;\n    let intersection;\n    const mySize = myIntervals.length;\n    const theirSize = theirIntervals.length;\n    let i = 0;\n    let j = 0;\n    while (i < mySize && j < theirSize) {\n      const mine = myIntervals[i];\n      const theirs = theirIntervals[j];\n      if (mine.startsBeforeDisjoint(theirs)) {\n        i++;\n      } else if (theirs.startsBeforeDisjoint(mine)) {\n        j++;\n      } else if (mine.properlyContains(theirs)) {\n        if (!intersection) {\n          intersection = new _IntervalSet();\n        }\n        intersection.addInterval(mine.intersection(theirs));\n        j++;\n      } else if (theirs.properlyContains(mine)) {\n        if (!intersection) {\n          intersection = new _IntervalSet();\n        }\n        intersection.addInterval(mine.intersection(theirs));\n        i++;\n      } else if (!mine.disjoint(theirs)) {\n        if (!intersection) {\n          intersection = new _IntervalSet();\n        }\n        intersection.addInterval(mine.intersection(theirs));\n        if (mine.startsAfterNonDisjoint(theirs)) {\n          j++;\n        } else if (theirs.startsAfterNonDisjoint(mine)) {\n          i++;\n        }\n      }\n    }\n    if (!intersection) {\n      return new _IntervalSet();\n    }\n    return intersection;\n  }\n  /**\n   * Compute the set difference between two interval sets. The specific\n   * operation is `left - right`. If either of the input sets is\n   * `null`, it is treated as though it was an empty set.\n   */\n  subtract(other) {\n    if (this.length === 0) {\n      return new _IntervalSet();\n    }\n    const result = new _IntervalSet(this);\n    if (other.length === 0) {\n      return result;\n    }\n    let resultI = 0;\n    let rightI = 0;\n    while (resultI < result.intervals.length && rightI < other.intervals.length) {\n      const resultInterval = result.intervals[resultI];\n      const rightInterval = other.intervals[rightI];\n      if (rightInterval.stop < resultInterval.start) {\n        rightI++;\n        continue;\n      }\n      if (rightInterval.start > resultInterval.stop) {\n        resultI++;\n        continue;\n      }\n      let beforeCurrent;\n      let afterCurrent;\n      if (rightInterval.start > resultInterval.start) {\n        beforeCurrent = new Interval(resultInterval.start, rightInterval.start - 1);\n      }\n      if (rightInterval.stop < resultInterval.stop) {\n        afterCurrent = new Interval(rightInterval.stop + 1, resultInterval.stop);\n      }\n      if (beforeCurrent) {\n        if (afterCurrent) {\n          result.intervals[resultI] = beforeCurrent;\n          result.intervals.splice(resultI + 1, 0, afterCurrent);\n          resultI++;\n          rightI++;\n        } else {\n          result.intervals[resultI] = beforeCurrent;\n          resultI++;\n        }\n      } else {\n        if (afterCurrent) {\n          result.intervals[resultI] = afterCurrent;\n          rightI++;\n        } else {\n          result.intervals.splice(resultI, 1);\n        }\n      }\n    }\n    return result;\n  }\n  contains(el) {\n    const n2 = this.intervals.length;\n    let l = 0;\n    let r = n2 - 1;\n    while (l <= r) {\n      const m2 = Math.floor((l + r) / 2);\n      const interval = this.intervals[m2];\n      if (interval.stop < el) {\n        l = m2 + 1;\n      } else if (interval.start > el) {\n        r = m2 - 1;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n  removeRange(toRemove) {\n    this.cachedHashCode = void 0;\n    if (toRemove.start === toRemove.stop) {\n      this.removeOne(toRemove.start);\n    } else if (this.intervals !== null) {\n      let pos = 0;\n      for (const existing of this.intervals) {\n        if (toRemove.stop <= existing.start) {\n          return;\n        } else if (toRemove.start > existing.start && toRemove.stop < existing.stop) {\n          this.intervals[pos] = new Interval(existing.start, toRemove.start);\n          const x = new Interval(toRemove.stop, existing.stop);\n          this.intervals.splice(pos, 0, x);\n          return;\n        } else if (toRemove.start <= existing.start && toRemove.stop >= existing.stop) {\n          this.intervals.splice(pos, 1);\n          pos = pos - 1;\n        } else if (toRemove.start < existing.stop) {\n          this.intervals[pos] = new Interval(existing.start, toRemove.start);\n        } else if (toRemove.stop < existing.stop) {\n          this.intervals[pos] = new Interval(toRemove.stop, existing.stop);\n        }\n        pos += 1;\n      }\n    }\n  }\n  removeOne(value) {\n    this.cachedHashCode = void 0;\n    for (let i = 0; i < this.intervals.length; i++) {\n      const existing = this.intervals[i];\n      if (value < existing.start) {\n        return;\n      } else if (value === existing.start && value === existing.stop) {\n        this.intervals.splice(i, 1);\n        return;\n      } else if (value === existing.start) {\n        this.intervals[i] = new Interval(existing.start + 1, existing.stop);\n        return;\n      } else if (value === existing.stop) {\n        this.intervals[i] = new Interval(existing.start, existing.stop - 1);\n        return;\n      } else if (value < existing.stop) {\n        const replace = new Interval(existing.start, value - 1);\n        this.intervals[i] = new Interval(value + 1, existing.stop);\n        this.intervals.splice(i, 0, replace);\n        return;\n      }\n    }\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      for (const interval of this.intervals) {\n        hash = MurmurHash.update(hash, interval.start);\n        hash = MurmurHash.update(hash, interval.stop);\n      }\n      this.cachedHashCode = MurmurHash.finish(hash, this.intervals.length * 2);\n    }\n    return this.cachedHashCode;\n  }\n  /**\n   * Are two IntervalSets equal? Because all intervals are sorted and disjoint, equals is a simple linear walk over\n   * both lists to make sure they are the same. Interval.equals() is used by the List.equals() method to check\n   * the ranges.\n   */\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (this.intervals.length !== other.intervals.length) {\n      return false;\n    }\n    for (let i = 0; i < this.intervals.length; i++) {\n      if (!this.intervals[i].equals(other.intervals[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  toString(elementsAreChar) {\n    if (this.intervals.length === 0) {\n      return \"{}\";\n    }\n    let result = \"\";\n    if (this.length > 1) {\n      result += \"{\";\n    }\n    for (let i = 0; i < this.intervals.length; ++i) {\n      const interval = this.intervals[i];\n      const start = interval.start;\n      const stop = interval.stop;\n      if (start === stop) {\n        if (start === Token.EOF) {\n          result += \"<EOF>\";\n        } else if (elementsAreChar) {\n          result += \"'\" + String.fromCodePoint(start) + \"'\";\n        } else {\n          result += start;\n        }\n      } else {\n        if (elementsAreChar) {\n          result += \"'\" + String.fromCodePoint(start) + \"'..'\" + String.fromCodePoint(stop) + \"'\";\n        } else {\n          result += start + \"..\" + stop;\n        }\n      }\n      if (i < this.intervals.length - 1) {\n        result += \", \";\n      }\n    }\n    if (this.length > 1) {\n      result += \"}\";\n    }\n    return result;\n  }\n  toStringWithVocabulary(vocabulary) {\n    if (this.intervals.length === 0) {\n      return \"{}\";\n    }\n    let result = \"\";\n    if (this.length > 1) {\n      result += \"{\";\n    }\n    for (let i = 0; i < this.intervals.length; ++i) {\n      const interval = this.intervals[i];\n      const start = interval.start;\n      const stop = interval.stop;\n      if (start === stop) {\n        if (start === Token.EOF) {\n          result += \"<EOF>\";\n        } else {\n          result += this.elementName(vocabulary, start);\n        }\n      } else {\n        for (let i2 = start; i2 <= stop; ++i2) {\n          if (i2 > start) {\n            result += \", \";\n          }\n          result += this.elementName(vocabulary, i2);\n        }\n      }\n      if (i < this.intervals.length - 1) {\n        result += \", \";\n      }\n    }\n    if (this.length > 1) {\n      result += \"}\";\n    }\n    return result;\n  }\n  toStringWithRuleNames(ruleNames) {\n    if (this.intervals.length === 0) {\n      return \"{}\";\n    }\n    let result = \"\";\n    if (this.length > 1) {\n      result += \"{\";\n    }\n    const vocabulary = Vocabulary.fromTokenNames(ruleNames);\n    for (let i = 0; i < this.intervals.length; ++i) {\n      const interval = this.intervals[i];\n      const start = interval.start;\n      const stop = interval.stop;\n      if (start === stop) {\n        if (start === Token.EOF) {\n          result += \"<EOF>\";\n        } else {\n          result += this.elementName(vocabulary, start);\n        }\n      } else {\n        for (let i2 = start; i2 <= stop; ++i2) {\n          if (i2 > start) {\n            result += \", \";\n          }\n          result += this.elementName(vocabulary, i2);\n        }\n      }\n      if (i < this.intervals.length - 1) {\n        result += \", \";\n      }\n    }\n    if (this.length > 1) {\n      result += \"}\";\n    }\n    return result;\n  }\n  toArray() {\n    const data = [];\n    for (const interval of this.intervals) {\n      for (let j = interval.start; j <= interval.stop; j++) {\n        data.push(j);\n      }\n    }\n    return data;\n  }\n  /** @returns the number of elements in this set. */\n  get length() {\n    let result = 0;\n    for (const interval of this.intervals) {\n      result += interval.length;\n    }\n    return result;\n  }\n  elementName(vocabulary, token) {\n    if (token === Token.EOF) {\n      return \"<EOF>\";\n    }\n    if (token === Token.EPSILON) {\n      return \"<EPSILON>\";\n    }\n    return vocabulary.getDisplayName(token);\n  }\n};\n\n// src/utils/helpers.ts\nvar isComparable = /* @__PURE__ */ __name((candidate) => {\n  return typeof candidate.equals === \"function\";\n}, \"isComparable\");\nvar valueToString = /* @__PURE__ */ __name((v) => {\n  return v === null ? \"null\" : v;\n}, \"valueToString\");\nvar arrayToString = /* @__PURE__ */ __name((value) => {\n  return Array.isArray(value) ? \"[\" + value.map(valueToString).join(\", \") + \"]\" : \"null\";\n}, \"arrayToString\");\nvar equalArrays = /* @__PURE__ */ __name((a, b) => {\n  if (a === b) {\n    return true;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    const left = a[i];\n    const right = b[i];\n    if (left === right) {\n      continue;\n    }\n    if (!left || !left.equals(right)) {\n      return false;\n    }\n  }\n  return true;\n}, \"equalArrays\");\nvar equalNumberArrays = /* @__PURE__ */ __name((a, b) => {\n  if (a === b) {\n    return true;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}, \"equalNumberArrays\");\nvar escapeWhitespace = /* @__PURE__ */ __name((s, escapeSpaces = false) => {\n  s = s.replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n  if (escapeSpaces) {\n    s = s.replace(/ /g, \"\\xB7\");\n  }\n  return s;\n}, \"escapeWhitespace\");\n\n// src/atn/SemanticContext.ts\nvar SemanticContext = class _SemanticContext {\n  static {\n    __name(this, \"SemanticContext\");\n  }\n  cachedHashCode;\n  static andContext(a, b) {\n    if (a === null || a === _SemanticContext.NONE) {\n      return b;\n    }\n    if (b === null || b === _SemanticContext.NONE) {\n      return a;\n    }\n    const result = new AND(a, b);\n    if (result.operands.length === 1) {\n      return result.operands[0];\n    }\n    return result;\n  }\n  static orContext(a, b) {\n    if (a === null) {\n      return b;\n    }\n    if (b === null) {\n      return a;\n    }\n    if (a === _SemanticContext.NONE || b === _SemanticContext.NONE) {\n      return _SemanticContext.NONE;\n    }\n    const result = new OR(a, b);\n    if (result.operands.length === 1) {\n      return result.operands[0];\n    } else {\n      return result;\n    }\n  }\n  static filterPrecedencePredicates(set) {\n    const result = [];\n    for (const context of set) {\n      if (context instanceof _SemanticContext.PrecedencePredicate) {\n        result.push(context);\n      }\n    }\n    return result;\n  }\n  /**\n   * Evaluate the precedence predicates for the context and reduce the result.\n   *\n   * @param _parser The parser instance.\n   * @param _parserCallStack The current parser context object.\n   * @returns The simplified semantic context after precedence predicates are\n   * evaluated, which will be one of the following values.\n   * - {@link NONE}: if the predicate simplifies to `true` after\n   * precedence predicates are evaluated.\n   * - `null`: if the predicate simplifies to `false` after\n   * precedence predicates are evaluated.\n   * - `this`: if the semantic context is not changed as a result of\n   * precedence predicate evaluation.\n   * - A non-`null` {@link SemanticContext}: the new simplified\n   * semantic context after precedence predicates are evaluated.\n   */\n  evalPrecedence(_parser, _parserCallStack) {\n    return this;\n  }\n};\nvar AND = class _AND extends SemanticContext {\n  static {\n    __name(this, \"AND\");\n  }\n  operands;\n  /**\n   * A semantic context which is true whenever none of the contained contexts\n   * is false\n   */\n  constructor(a, b) {\n    super();\n    const operands = new HashSet();\n    if (a instanceof _AND) {\n      a.operands.forEach((o) => {\n        operands.add(o);\n      });\n    } else {\n      operands.add(a);\n    }\n    if (b instanceof _AND) {\n      b.operands.forEach((o) => {\n        operands.add(o);\n      });\n    } else {\n      operands.add(b);\n    }\n    const precedencePredicates = SemanticContext.filterPrecedencePredicates(operands);\n    if (precedencePredicates.length > 0) {\n      let reduced = null;\n      precedencePredicates.forEach((p) => {\n        if (reduced === null || p.precedence < reduced.precedence) {\n          reduced = p;\n        }\n      });\n      if (reduced) {\n        operands.add(reduced);\n      }\n    }\n    this.operands = operands.toArray();\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _AND)) {\n      return false;\n    }\n    return equalArrays(this.operands, other.operands);\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      for (const operand of this.operands) {\n        hash = MurmurHash.updateFromComparable(hash, operand);\n      }\n      hash = MurmurHash.update(hash, 3813686060);\n      this.cachedHashCode = MurmurHash.finish(hash, this.operands.length + 1);\n    }\n    return this.cachedHashCode;\n  }\n  /**\n   * {@inheritDoc}\n   *\n   *\n   * The evaluation of predicates by this context is short-circuiting, but\n   * unordered.\n   */\n  evaluate(parser, parserCallStack) {\n    for (const operand of this.operands) {\n      if (!operand.evaluate(parser, parserCallStack)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  evalPrecedence(parser, parserCallStack) {\n    let differs = false;\n    const operands = [];\n    for (const context of this.operands) {\n      const evaluated = context.evalPrecedence(parser, parserCallStack);\n      differs ||= evaluated !== context;\n      if (evaluated === null) {\n        return null;\n      } else if (evaluated !== SemanticContext.NONE) {\n        operands.push(evaluated);\n      }\n    }\n    if (!differs) {\n      return this;\n    }\n    if (operands.length === 0) {\n      return SemanticContext.NONE;\n    }\n    let result = null;\n    operands.forEach((o) => {\n      result = result === null ? o : SemanticContext.andContext(result, o);\n    });\n    return result;\n  }\n  toString() {\n    const s = this.operands.map((o) => {\n      return o.toString();\n    });\n    return (s.length > 3 ? s.slice(3) : s).join(\"&&\");\n  }\n};\nvar OR = class _OR extends SemanticContext {\n  static {\n    __name(this, \"OR\");\n  }\n  operands;\n  /**\n   * A semantic context which is true whenever at least one of the contained\n   * contexts is true\n   */\n  constructor(a, b) {\n    super();\n    const operands = new HashSet();\n    if (a instanceof _OR) {\n      a.operands.forEach((o) => {\n        operands.add(o);\n      });\n    } else {\n      operands.add(a);\n    }\n    if (b instanceof _OR) {\n      b.operands.forEach((o) => {\n        operands.add(o);\n      });\n    } else {\n      operands.add(b);\n    }\n    const precedencePredicates = SemanticContext.filterPrecedencePredicates(operands);\n    if (precedencePredicates.length > 0) {\n      const s = precedencePredicates.sort((a2, b2) => {\n        return a2.compareTo(b2);\n      });\n      const reduced = s[s.length - 1];\n      operands.add(reduced);\n    }\n    this.operands = operands.toArray();\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    } else if (!(other instanceof _OR)) {\n      return false;\n    } else {\n      return equalArrays(this.operands, other.operands);\n    }\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      for (const operand of this.operands) {\n        hash = MurmurHash.updateFromComparable(hash, operand);\n      }\n      hash = MurmurHash.update(hash, 3383313031);\n      this.cachedHashCode = MurmurHash.finish(hash, this.operands.length + 1);\n    }\n    return this.cachedHashCode;\n  }\n  /**\n   * The evaluation of predicates by this context is short-circuiting, but unordered.\n   */\n  evaluate(parser, parserCallStack) {\n    for (const operand of this.operands) {\n      if (operand.evaluate(parser, parserCallStack)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  evalPrecedence(parser, parserCallStack) {\n    let differs = false;\n    const operands = [];\n    for (const context of this.operands) {\n      const evaluated = context.evalPrecedence(parser, parserCallStack);\n      differs ||= evaluated !== context;\n      if (evaluated === SemanticContext.NONE) {\n        return SemanticContext.NONE;\n      } else if (evaluated !== null) {\n        operands.push(evaluated);\n      }\n    }\n    if (!differs) {\n      return this;\n    }\n    if (operands.length === 0) {\n      return null;\n    }\n    let result = null;\n    operands.forEach((o) => {\n      result = result === null ? o : SemanticContext.orContext(result, o);\n    });\n    return result;\n  }\n  toString() {\n    const s = this.operands.map((o) => {\n      return o.toString();\n    });\n    return (s.length > 3 ? s.slice(3) : s).join(\"||\");\n  }\n};\n((SemanticContext2) => {\n  class Predicate extends SemanticContext2 {\n    static {\n      __name(this, \"Predicate\");\n    }\n    ruleIndex;\n    predIndex;\n    isCtxDependent;\n    // e.g., $i ref in pred\n    constructor(ruleIndex, predIndex, isCtxDependent) {\n      super();\n      this.ruleIndex = ruleIndex ?? -1;\n      this.predIndex = predIndex ?? -1;\n      this.isCtxDependent = isCtxDependent ?? false;\n    }\n    evaluate(parser, outerContext) {\n      const localctx = this.isCtxDependent ? outerContext : null;\n      return parser.sempred(localctx, this.ruleIndex, this.predIndex);\n    }\n    hashCode() {\n      if (this.cachedHashCode === void 0) {\n        let hashCode = MurmurHash.initialize();\n        hashCode = MurmurHash.update(hashCode, this.ruleIndex);\n        hashCode = MurmurHash.update(hashCode, this.predIndex);\n        hashCode = MurmurHash.update(hashCode, this.isCtxDependent ? 1 : 0);\n        hashCode = MurmurHash.finish(hashCode, 3);\n        this.cachedHashCode = hashCode;\n      }\n      return this.cachedHashCode;\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      }\n      return this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;\n    }\n    toString() {\n      return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n    }\n  }\n  SemanticContext2.Predicate = Predicate;\n  class PrecedencePredicate extends SemanticContext2 {\n    static {\n      __name(this, \"PrecedencePredicate\");\n    }\n    precedence;\n    constructor(precedence) {\n      super();\n      this.precedence = precedence ?? 0;\n    }\n    evaluate(parser, outerContext) {\n      return parser.precpred(outerContext, this.precedence);\n    }\n    evalPrecedence(parser, outerContext) {\n      if (parser.precpred(outerContext ?? null, this.precedence)) {\n        return SemanticContext2.NONE;\n      }\n      return null;\n    }\n    compareTo(other) {\n      return this.precedence - other.precedence;\n    }\n    hashCode() {\n      return 31 + this.precedence;\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      }\n      return this.precedence === other.precedence;\n    }\n    toString() {\n      return \"{\" + this.precedence + \">=prec}?\";\n    }\n  }\n  SemanticContext2.PrecedencePredicate = PrecedencePredicate;\n  SemanticContext2.NONE = new Predicate();\n})(SemanticContext || (SemanticContext = {}));\n\n// src/atn/ATNConfig.ts\nvar ATNConfig = class _ATNConfig {\n  static {\n    __name(this, \"ATNConfig\");\n  }\n  /** The ATN state associated with this configuration */\n  state;\n  /** What alt (or lexer rule) is predicted by this configuration */\n  alt;\n  /**\n   * We cannot execute predicates dependent upon local context unless\n   * we know for sure we are in the correct context. Because there is\n   * no way to do this efficiently, we simply cannot evaluate\n   * dependent predicates unless we are in the rule that initially\n   * invokes the ATN simulator.\n   *\n   * closure() tracks the depth of how far we dip into the outer context:\n   * depth > 0.\n   */\n  reachesIntoOuterContext = false;\n  // Not used in hash code.\n  precedenceFilterSuppressed = false;\n  // Not used in hash code.\n  get semanticContext() {\n    return this.#semanticContext;\n  }\n  cachedHashCode;\n  // Shared with LexerATNConfig.\n  /**\n   * The syntactic context is a graph-structured stack node whose\n   * path(s) to the root is the rule invocation(s)\n   * chain used to arrive at the state.  The semantic context is\n   * the tree of semantic predicates encountered before reaching\n   * an ATN state\n   */\n  #context = null;\n  #semanticContext;\n  /** Never create config classes directly. Use the factory methods below. */\n  constructor(c, state, context, semanticContext) {\n    this.state = state;\n    this.alt = c.alt;\n    this.context = context;\n    this.#semanticContext = semanticContext ?? SemanticContext.NONE;\n    this.reachesIntoOuterContext = c.reachesIntoOuterContext;\n    if (c.precedenceFilterSuppressed !== void 0) {\n      this.precedenceFilterSuppressed = c.precedenceFilterSuppressed;\n    }\n  }\n  static duplicate(old, semanticContext) {\n    return new _ATNConfig(old, old.state, old.context, semanticContext ?? old.semanticContext);\n  }\n  static createWithContext(state, alt, context, semanticContext) {\n    return new _ATNConfig({ alt }, state, context, semanticContext);\n  }\n  static createWithConfig(state, config, context) {\n    return new _ATNConfig(config, state, context ?? config.context, config.semanticContext);\n  }\n  static createWithSemanticContext(state, c, semanticContext) {\n    return new _ATNConfig(c, state ?? c.state, c.context, semanticContext);\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hashCode = MurmurHash.initialize(7);\n      hashCode = MurmurHash.update(hashCode, this.state.stateNumber);\n      hashCode = MurmurHash.update(hashCode, this.alt);\n      hashCode = MurmurHash.updateFromComparable(hashCode, this.#context);\n      hashCode = MurmurHash.updateFromComparable(hashCode, this.semanticContext);\n      hashCode = MurmurHash.finish(hashCode, 4);\n      this.cachedHashCode = hashCode;\n    }\n    return this.cachedHashCode;\n  }\n  /**\n   * The stack of invoking states leading to the rule/states associated\n   * with this config.  We track only those contexts pushed during\n   * execution of the ATN simulator.\n   */\n  get context() {\n    return this.#context;\n  }\n  set context(context) {\n    this.#context = context;\n    this.cachedHashCode = void 0;\n  }\n  /**\n   * An ATN configuration is equal to another if both have\n   * the same state, they predict the same alternative, and\n   * syntactic/semantic contexts are the same.\n   */\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;\n  }\n  toString(_recog, showAlt = true) {\n    let alt = \"\";\n    if (showAlt) {\n      alt = \",\" + this.alt;\n    }\n    return \"(\" + this.state + alt + (this.context !== null ? \",[\" + this.context.toString() + \"]\" : \"\") + (this.semanticContext !== SemanticContext.NONE ? \",\" + this.semanticContext.toString() : \"\") + (this.reachesIntoOuterContext ? \",up=\" + this.reachesIntoOuterContext : \"\") + \")\";\n  }\n};\n\n// src/atn/ATNState.ts\nvar ATNState = class _ATNState {\n  static {\n    __name(this, \"ATNState\");\n  }\n  static INVALID_STATE_NUMBER = -1;\n  static INVALID_TYPE = 0;\n  static BASIC = 1;\n  static RULE_START = 2;\n  static BLOCK_START = 3;\n  static PLUS_BLOCK_START = 4;\n  static STAR_BLOCK_START = 5;\n  static TOKEN_START = 6;\n  static RULE_STOP = 7;\n  static BLOCK_END = 8;\n  static STAR_LOOP_BACK = 9;\n  static STAR_LOOP_ENTRY = 10;\n  static PLUS_LOOP_BACK = 11;\n  static LOOP_END = 12;\n  static stateType = _ATNState.INVALID_STATE_NUMBER;\n  stateNumber = 0;\n  ruleIndex = 0;\n  // at runtime, we don't have Rule objects\n  epsilonOnlyTransitions = false;\n  /** Used to cache lookahead during parsing, not used during construction */\n  nextTokenWithinRule;\n  /** Track the transitions emanating from this ATN state. */\n  transitions = [];\n  hashCode() {\n    return this.stateNumber;\n  }\n  equals(other) {\n    return this.stateNumber === other.stateNumber;\n  }\n  toString() {\n    return `${this.stateNumber}`;\n  }\n  addTransitionAtIndex(index, transition) {\n    if (this.transitions.length === 0) {\n      this.epsilonOnlyTransitions = transition.isEpsilon;\n    } else if (this.epsilonOnlyTransitions !== transition.isEpsilon) {\n      this.epsilonOnlyTransitions = false;\n    }\n    this.transitions.splice(index, 0, transition);\n  }\n  addTransition(transition) {\n    if (this.transitions.length === 0) {\n      this.epsilonOnlyTransitions = transition.isEpsilon;\n    } else if (this.epsilonOnlyTransitions !== transition.isEpsilon) {\n      this.epsilonOnlyTransitions = false;\n    }\n    this.transitions.push(transition);\n  }\n  setTransition(i, e) {\n    this.transitions.splice(i, 1, e);\n  }\n  removeTransition(index) {\n    const t = this.transitions.splice(index, 1);\n    return t[0];\n  }\n};\n\n// src/atn/PredictionContext.ts\nvar PredictionContext = class _PredictionContext {\n  static {\n    __name(this, \"PredictionContext\");\n  }\n  /**\n   * Represents `$` in an array in full context mode, when `$`\n   * doesn't mean wildcard: `$ + x = [$,x]`. Here,\n   * `$` = {@link EMPTY_RETURN_STATE}.\n   */\n  static EMPTY_RETURN_STATE = 2147483647;\n  static traceATNSimulator = false;\n  cachedHashCode;\n  constructor(cachedHashCode) {\n    this.cachedHashCode = cachedHashCode;\n  }\n  static calculateEmptyHashCode() {\n    let hash = MurmurHash.initialize(31);\n    hash = MurmurHash.finish(hash, 0);\n    return hash;\n  }\n  static calculateHashCodeSingle(parent, returnState) {\n    let hash = MurmurHash.initialize(31);\n    hash = MurmurHash.updateFromComparable(hash, parent);\n    hash = MurmurHash.update(hash, returnState);\n    hash = MurmurHash.finish(hash, 2);\n    return hash;\n  }\n  static calculateHashCodeList(parents, returnStates) {\n    let hash = MurmurHash.initialize(31);\n    for (const parent of parents) {\n      hash = MurmurHash.updateFromComparable(hash, parent);\n    }\n    for (const returnState of returnStates) {\n      hash = MurmurHash.update(hash, returnState);\n    }\n    hash = MurmurHash.finish(hash, 2 * parents.length);\n    return hash;\n  }\n  isEmpty() {\n    return false;\n  }\n  hasEmptyPath() {\n    return this.getReturnState(this.length - 1) === _PredictionContext.EMPTY_RETURN_STATE;\n  }\n  hashCode() {\n    return this.cachedHashCode;\n  }\n  toString(_recog) {\n    return \"\";\n  }\n};\n\n// src/atn/SingletonPredictionContext.ts\nvar SingletonPredictionContext = class _SingletonPredictionContext extends PredictionContext {\n  static {\n    __name(this, \"SingletonPredictionContext\");\n  }\n  parent;\n  returnState;\n  constructor(parent, returnState) {\n    super(\n      parent ? PredictionContext.calculateHashCodeSingle(parent, returnState) : PredictionContext.calculateEmptyHashCode()\n    );\n    this.parent = parent ?? null;\n    this.returnState = returnState;\n  }\n  getParent(_index) {\n    return this.parent;\n  }\n  getReturnState(_index) {\n    return this.returnState;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _SingletonPredictionContext)) {\n      return false;\n    }\n    if (this.hashCode() !== other.hashCode()) {\n      return false;\n    }\n    if (this.returnState !== other.returnState) {\n      return false;\n    }\n    if (this.parent == null) {\n      return other.parent == null;\n    }\n    return this.parent.equals(other.parent);\n  }\n  toString() {\n    const up = this.parent === null ? \"\" : this.parent.toString();\n    if (up.length === 0) {\n      if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n        return \"$\";\n      }\n      return \"\" + this.returnState;\n    } else {\n      return \"\" + this.returnState + \" \" + up;\n    }\n  }\n  get length() {\n    return 1;\n  }\n};\n\n// src/atn/EmptyPredictionContext.ts\nvar EmptyPredictionContext = class _EmptyPredictionContext extends SingletonPredictionContext {\n  static {\n    __name(this, \"EmptyPredictionContext\");\n  }\n  /**\n   * Represents `$` in local context prediction, which means wildcard.\n   * `*+x = *`.\n   */\n  static instance = new _EmptyPredictionContext();\n  constructor() {\n    super(void 0, PredictionContext.EMPTY_RETURN_STATE);\n  }\n  isEmpty() {\n    return true;\n  }\n  getParent() {\n    return null;\n  }\n  getReturnState() {\n    return this.returnState;\n  }\n  equals(other) {\n    return this === other;\n  }\n  toString() {\n    return \"$\";\n  }\n};\n\n// src/atn/Transition.ts\nvar Transition = class {\n  static {\n    __name(this, \"Transition\");\n  }\n  static INVALID = 0;\n  static EPSILON = 1;\n  static RANGE = 2;\n  static RULE = 3;\n  static PREDICATE = 4;\n  // e.g., {isType(input.LT(1))}\n  static ATOM = 5;\n  static ACTION = 6;\n  static SET = 7;\n  // ~(A|B) or ~atom, wildcard, which convert to next\n  static NOT_SET = 8;\n  static WILDCARD = 9;\n  static PRECEDENCE = 10;\n  /** The target of this transition. */\n  target;\n  constructor(target) {\n    this.target = target;\n  }\n  /**\n   * Determines if the transition is an \"epsilon\" transition.\n   *\n   * The default implementation returns `false`.\n   *\n   * @returns `true` if traversing this transition in the ATN does not\n   * consume an input symbol; otherwise, `false` if traversing this\n   * transition consumes (matches) an input symbol.\n   */\n  get isEpsilon() {\n    return false;\n  }\n  get label() {\n    return null;\n  }\n  toString() {\n    return \"\";\n  }\n};\n\n// src/atn/SetTransition.ts\nvar SetTransition = class extends Transition {\n  static {\n    __name(this, \"SetTransition\");\n  }\n  set;\n  constructor(target, set) {\n    super(target);\n    if (set) {\n      this.set = set;\n    } else {\n      this.set = IntervalSet.of(Token.INVALID_TYPE, Token.INVALID_TYPE);\n    }\n  }\n  get transitionType() {\n    return Transition.SET;\n  }\n  get label() {\n    return this.set;\n  }\n  matches(symbol, _minVocabSymbol, _maxVocabSymbol) {\n    return this.set.contains(symbol);\n  }\n  toString() {\n    return this.set.toString();\n  }\n};\n\n// src/atn/NotSetTransition.ts\nvar NotSetTransition = class extends SetTransition {\n  static {\n    __name(this, \"NotSetTransition\");\n  }\n  get transitionType() {\n    return Transition.NOT_SET;\n  }\n  matches(symbol, minVocabSymbol, maxVocabSymbol) {\n    return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);\n  }\n  toString() {\n    return \"~\" + super.toString();\n  }\n};\n\n// src/misc/MapKeyEqualityOperator.ts\nvar MapKeyEqualityComparator = class {\n  static {\n    __name(this, \"MapKeyEqualityComparator\");\n  }\n  keyComparator;\n  constructor(keyComparator) {\n    this.keyComparator = keyComparator;\n  }\n  hashCode(obj) {\n    return this.keyComparator.hashCode(obj.key);\n  }\n  equals(a, b) {\n    return this.keyComparator.equals(a.key, b.key);\n  }\n};\n\n// src/misc/HashMap.ts\nvar HashMap = class _HashMap {\n  static {\n    __name(this, \"HashMap\");\n  }\n  backingStore;\n  constructor(keyComparer) {\n    if (keyComparer instanceof _HashMap) {\n      this.backingStore = new HashSet(keyComparer.backingStore);\n    } else {\n      keyComparer = keyComparer ?? DefaultEqualityComparator.instance;\n      this.backingStore = new HashSet(new MapKeyEqualityComparator(keyComparer));\n    }\n  }\n  clear() {\n    this.backingStore.clear();\n  }\n  containsKey(key) {\n    return this.backingStore.contains({ key });\n  }\n  get(key) {\n    const bucket = this.backingStore.get({ key });\n    if (!bucket) {\n      return void 0;\n    }\n    return bucket.value;\n  }\n  get isEmpty() {\n    return this.backingStore.isEmpty;\n  }\n  /**\n   * Sets the value for a key in the map. If the key is not present in the map, it is added.\n   * If the key is present, the value is updated and the old value is returned.\n   *\n   * @param key The key to set.\n   * @param value The value to set.\n   *\n   * @returns The old value for the key, if present.\n   */\n  set(key, value) {\n    const element = this.backingStore.get({ key, value });\n    let result;\n    if (!element) {\n      this.backingStore.add({ key, value });\n    } else {\n      result = element.value;\n      element.value = value;\n    }\n    return result;\n  }\n  /**\n   * Sets the value for a key in the map if the key is not already present. Otherwise the value is not changed and\n   * the old value is returned.\n   *\n   * @param key The key to set.\n   * @param value The value to set.\n   *\n   * @returns The current value for the key, if present.\n   */\n  setIfAbsent(key, value) {\n    const element = this.backingStore.get({ key, value });\n    let result;\n    if (!element) {\n      this.backingStore.add({ key, value });\n    } else {\n      result = element.value;\n    }\n    return result;\n  }\n  keys() {\n    return this.backingStore.toArray().map((bucket) => {\n      return bucket.key;\n    });\n  }\n  values() {\n    return this.backingStore.toArray().map((bucket) => {\n      return bucket.value;\n    });\n  }\n  get size() {\n    return this.backingStore.size;\n  }\n  hashCode() {\n    return this.backingStore.hashCode();\n  }\n  equals(o) {\n    return this.backingStore.equals(o.backingStore);\n  }\n};\n\n// src/tree/TerminalNode.ts\nvar TerminalNode = class {\n  static {\n    __name(this, \"TerminalNode\");\n  }\n  parent = null;\n  symbol;\n  constructor(symbol) {\n    this.symbol = symbol;\n  }\n  getChild(_i) {\n    return null;\n  }\n  getSymbol() {\n    return this.symbol;\n  }\n  getPayload() {\n    return this.symbol;\n  }\n  getSourceInterval() {\n    if (this.symbol === null) {\n      return Interval.INVALID_INTERVAL;\n    }\n    const tokenIndex = this.symbol.tokenIndex;\n    return new Interval(tokenIndex, tokenIndex);\n  }\n  getChildCount() {\n    return 0;\n  }\n  accept(visitor) {\n    return visitor.visitTerminal(this);\n  }\n  getText() {\n    return this.symbol?.text ?? \"\";\n  }\n  toString() {\n    if (this.symbol?.type === Token.EOF) {\n      return \"<EOF>\";\n    } else {\n      return this.symbol?.text ?? \"\";\n    }\n  }\n  toStringTree() {\n    return this.toString();\n  }\n};\n\n// src/tree/ErrorNode.ts\nvar ErrorNode = class extends TerminalNode {\n  static {\n    __name(this, \"ErrorNode\");\n  }\n  accept(visitor) {\n    return visitor.visitErrorNode(this);\n  }\n};\n\n// src/CommonToken.ts\nvar CommonToken = class _CommonToken {\n  static {\n    __name(this, \"CommonToken\");\n  }\n  /**\n   * An empty tuple which is used as the default value of\n   * {@link source} for tokens that do not have a source.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static EMPTY_SOURCE = [null, null];\n  /**\n   * These properties share a field to reduce the memory footprint of\n   * {@link CommonToken}. Tokens created by a {@link CommonTokenFactory} from\n   * the same source and input stream share a reference to the same\n   * {@link Pair} containing these values.\n   */\n  source;\n  tokenIndex;\n  start;\n  stop;\n  /**\n   * This is the backing field for {@link #getType} and {@link #setType}.\n   */\n  type;\n  /**\n   * The (one-based) line number on which the 1st character of this token was.\n   */\n  line;\n  /**\n   * The zero-based index of the first character position in its line.\n   */\n  column;\n  /**\n   * The token's channel.\n   */\n  channel;\n  /**\n   * This is the backing field for {@link getText} when the token text is\n   * explicitly set in the constructor or via {@link setText}.\n   */\n  #text;\n  constructor(details) {\n    this.type = details.type;\n    this.source = details.source;\n    this.tokenIndex = details.tokenIndex ?? -1;\n    this.line = details.line ?? 0;\n    this.column = details.column ?? -1;\n    this.channel = details.channel ?? Token.DEFAULT_CHANNEL;\n    this.start = details.start ?? 0;\n    this.stop = details.stop ?? 0;\n    this.#text = details.text;\n    if (details.line === void 0 && details.source[0] !== null) {\n      this.line = details.source[0].line;\n    }\n    if (details.column === void 0 && details.source[0] !== null) {\n      this.column = details.source[0].column;\n    }\n  }\n  /**\n   * Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n   *\n   * If `token` is also a {@link CommonToken} instance, the newly\n   * constructed token will share a reference to the {@link #text} field and\n   * the {@link Pair} stored in {@link source}. Otherwise, {@link text} will\n   * be assigned the result of calling {@link getText}, and {@link source}\n   * will be constructed from the result of {@link Token.getTokenSource} and\n   * {@link Token#getInputStream}.\n   *\n   * @param token The token to copy.\n   */\n  static fromToken(token) {\n    const source = [token.tokenSource, token.inputStream];\n    return new _CommonToken({\n      type: token.type,\n      line: token.line,\n      tokenIndex: token.tokenIndex,\n      column: token.column,\n      channel: token.channel,\n      start: token.start,\n      stop: token.stop,\n      text: token.text,\n      source\n    });\n  }\n  /**\n   * Constructs a new {@link CommonToken} with the specified token type and text.\n   *\n   * @param type The token type.\n   * @param text The text of the token.\n   */\n  static fromType(type, text) {\n    return new _CommonToken({ type, text, source: _CommonToken.EMPTY_SOURCE });\n  }\n  static fromSource(source, type, channel, start, stop) {\n    return new _CommonToken({ type, channel, start, stop, source });\n  }\n  get tokenSource() {\n    return this.source[0];\n  }\n  get inputStream() {\n    return this.source[1];\n  }\n  set inputStream(input) {\n    this.source[1] = input;\n  }\n  /**\n   * Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n   *\n   * If `oldToken` is also a {@link CommonToken} instance, the newly\n   * constructed token will share a reference to the {@link text} field and\n   * the {@link Pair} stored in {@link source}. Otherwise, {@link text} will\n   * be assigned the result of calling {@link getText}, and {@link source}\n   * will be constructed from the result of {@link Token.getTokenSource} and\n   * {@link Token.getInputStream}.\n   */\n  clone() {\n    const t = new _CommonToken({\n      source: this.source,\n      type: this.type,\n      channel: this.channel,\n      start: this.start,\n      stop: this.stop,\n      tokenIndex: this.tokenIndex,\n      line: this.line,\n      column: this.column,\n      text: this.#text\n    });\n    return t;\n  }\n  toString(recognizer) {\n    let channelStr = \"\";\n    if (this.channel > 0) {\n      channelStr = \",channel=\" + this.channel;\n    }\n    let text = this.text;\n    if (text) {\n      text = text.replace(/\\n/g, \"\\\\n\");\n      text = text.replace(/\\r/g, \"\\\\r\");\n      text = text.replace(/\\t/g, \"\\\\t\");\n    } else {\n      text = \"<no text>\";\n    }\n    let typeString = String(this.type);\n    if (recognizer) {\n      typeString = recognizer.vocabulary.getDisplayName(this.type) ?? \"<unknown>\";\n    }\n    return \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" + text + \"',<\" + typeString + \">\" + channelStr + \",\" + this.line + \":\" + this.column + \"]\";\n  }\n  get text() {\n    if (this.#text !== void 0) {\n      return this.#text;\n    }\n    const input = this.inputStream;\n    if (!input) {\n      return void 0;\n    }\n    const n2 = input.size;\n    if (this.start < n2 && this.stop < n2) {\n      return input.getTextFromRange(this.start, this.stop);\n    }\n    return \"<EOF>\";\n  }\n  set text(text) {\n    this.#text = text;\n  }\n  // WritableToken implementation\n  setText(text) {\n    this.#text = text;\n  }\n  setType(ttype) {\n    this.type = ttype;\n  }\n  setLine(line) {\n    this.line = line;\n  }\n  setCharPositionInLine(pos) {\n    this.column = pos;\n  }\n  setChannel(channel) {\n    this.channel = channel;\n  }\n  setTokenIndex(index) {\n    this.tokenIndex = index;\n  }\n};\n\n// src/tree/Trees.ts\nvar Trees = class _Trees {\n  static {\n    __name(this, \"Trees\");\n  }\n  /**\n   * Print out a whole tree in LISP form. {@link getNodeText} is used on the\n   * node payloads to get the text for the nodes.  Detect\n   * parse trees and extract data appropriately.\n   */\n  static toStringTree(tree, ruleNames, recog) {\n    ruleNames = ruleNames ?? null;\n    if (recog) {\n      ruleNames = recog.ruleNames;\n    }\n    let s = _Trees.getNodeText(tree, ruleNames);\n    s = escapeWhitespace(s, false);\n    const c = tree.getChildCount();\n    if (c === 0) {\n      return s;\n    }\n    let res = \"(\" + s + \" \";\n    if (c > 0) {\n      s = _Trees.toStringTree(tree.getChild(0), ruleNames);\n      res = res.concat(s);\n    }\n    for (let i = 1; i < c; i++) {\n      s = _Trees.toStringTree(tree.getChild(i), ruleNames);\n      res = res.concat(\" \" + s);\n    }\n    res = res.concat(\")\");\n    return res;\n  }\n  static getNodeText(t, ruleNames, recog) {\n    ruleNames = ruleNames ?? null;\n    if (recog) {\n      ruleNames = recog.ruleNames;\n    }\n    if (ruleNames !== null) {\n      if (t instanceof ParserRuleContext) {\n        const context = t.ruleContext;\n        const altNumber = context.getAltNumber();\n        if (altNumber !== 0) {\n          return ruleNames[t.ruleIndex] + \":\" + altNumber;\n        }\n        return ruleNames[t.ruleIndex];\n      } else if (t instanceof ErrorNode) {\n        return t.toString();\n      } else if (t instanceof TerminalNode) {\n        return t.symbol.text;\n      }\n    }\n    const payload = t.getPayload();\n    if (isToken(payload)) {\n      return payload.text;\n    }\n    return String(t.getPayload());\n  }\n  /**\n   * Return ordered list of all children of this node\n   */\n  static getChildren(t) {\n    const list = [];\n    for (let i = 0; i < t.getChildCount(); i++) {\n      list.push(t.getChild(i));\n    }\n    return list;\n  }\n  /**\n   * Return a list of all ancestors of this node.  The first node of\n   * list is the root and the last is the parent of this node.\n   */\n  static getAncestors(t) {\n    if (t.parent === null) {\n      return [];\n    }\n    let ancestors = [];\n    let p = t.parent;\n    while (p !== null) {\n      ancestors = [p].concat(ancestors);\n      p = p.parent;\n    }\n    return ancestors;\n  }\n  /**\n   * Return true if t is u's parent or a node on path to root from u.\n   */\n  static isAncestorOf(t, u) {\n    if (t === null || u === null || t.parent === null) {\n      return false;\n    }\n    let p = u.parent;\n    while (p !== null) {\n      if (t === p) {\n        return true;\n      }\n      p = p.parent;\n    }\n    return false;\n  }\n  static findAllTokenNodes(t, ttype) {\n    return _Trees.findAllNodes(t, ttype, true);\n  }\n  static findAllRuleNodes(t, ruleIndex) {\n    return _Trees.findAllNodes(t, ruleIndex, false);\n  }\n  static findAllNodes(t, index, findTokens) {\n    const nodes = [];\n    _Trees.doFindAllNodes(t, index, findTokens, nodes);\n    return nodes;\n  }\n  static descendants(t) {\n    let nodes = [t];\n    for (let i = 0; i < t.getChildCount(); i++) {\n      nodes = nodes.concat(_Trees.descendants(t.getChild(i)));\n    }\n    return nodes;\n  }\n  /**\n   * Find smallest subtree of t enclosing range startTokenIndex..stopTokenIndex\n   * inclusively using post order traversal. Recursive depth-first-search.\n   */\n  static getRootOfSubtreeEnclosingRegion(t, startTokenIndex, stopTokenIndex) {\n    const n2 = t.getChildCount();\n    for (let i = 0; i < n2; i++) {\n      const child = t.getChild(i);\n      const r = this.getRootOfSubtreeEnclosingRegion(child, startTokenIndex, stopTokenIndex);\n      if (r !== null) {\n        return r;\n      }\n    }\n    if (t instanceof ParserRuleContext) {\n      if (startTokenIndex >= t.start.tokenIndex && // is range fully contained in t?\n      (t.stop === null || stopTokenIndex <= t.stop.tokenIndex)) {\n        return t;\n      }\n    }\n    return null;\n  }\n  /**\n   * Replace any subtree siblings of root that are completely to left\n   * or right of lookahead range with a CommonToken(Token.INVALID_TYPE,\"...\")\n   * node. The source interval for t is not altered to suit smaller range!\n   *\n   * WARNING: destructive to t.\n   */\n  static stripChildrenOutOfRange(t, root, startIndex, stopIndex) {\n    if (t === null) {\n      return;\n    }\n    for (let i = 0; i < t.getChildCount(); i++) {\n      const child = t.getChild(i);\n      const range = child.getSourceInterval();\n      if (t instanceof ParserRuleContext && (range.stop < startIndex || range.start > stopIndex)) {\n        if (this.isAncestorOf(child, root)) {\n          const abbrev = CommonToken.fromType(Token.INVALID_TYPE, \"...\");\n          t.children[i] = new TerminalNode(abbrev);\n        }\n      }\n    }\n  }\n  static doFindAllNodes(t, index, findTokens, nodes) {\n    if (findTokens && t instanceof TerminalNode) {\n      if (t.symbol?.type === index) {\n        nodes.push(t);\n      }\n    } else if (!findTokens && t instanceof ParserRuleContext) {\n      if (t.ruleIndex === index) {\n        nodes.push(t);\n      }\n    }\n    for (let i = 0; i < t.getChildCount(); i++) {\n      _Trees.doFindAllNodes(t.getChild(i), index, findTokens, nodes);\n    }\n  }\n};\n\n// src/ParserRuleContext.ts\nvar ParserRuleContext = class _ParserRuleContext {\n  static {\n    __name(this, \"ParserRuleContext\");\n  }\n  static empty = new _ParserRuleContext(null);\n  start = null;\n  stop = null;\n  children = [];\n  /**\n   * What state invoked the rule associated with this context?\n   *  The \"return address\" is the followState of invokingState\n   *  If parent is null, this should be -1 this context object represents\n   *  the start rule.\n   */\n  invokingState;\n  parent;\n  /**\n   * A rule context is a record of a single rule invocation. It knows\n   * which context invoked it, if any. If there is no parent context, then\n   * naturally the invoking state is not valid.  The parent link\n   * provides a chain upwards from the current rule invocation to the root\n   * of the invocation tree, forming a stack. We actually carry no\n   * information about the rule associated with this context (except\n   * when parsing). We keep only the state number of the invoking state from\n   * the ATN submachine that invoked this. Contrast this with the s\n   * pointer inside ParserRuleContext that tracks the current state\n   * being \"executed\" for the current rule.\n   *\n   * The parent contexts are useful for computing lookahead sets and\n   * getting error information.\n   *\n   * These objects are used during parsing and prediction.\n   * For the special case of parsers, we use the subclass\n   * ParserRuleContext.\n   */\n  constructor(parent, invokingStateNumber = -1) {\n    this.parent = parent;\n    this.invokingState = invokingStateNumber;\n  }\n  /** Copy a context */\n  copyFrom(ctx) {\n    this.parent = ctx.parent;\n    this.invokingState = ctx.invokingState;\n    this.children.slice(0, this.children.length);\n    this.start = ctx.start;\n    this.stop = ctx.stop;\n    if (ctx.children) {\n      ctx.children.forEach((child) => {\n        if (child instanceof ErrorNode) {\n          this.children.push(child);\n          child.parent = this;\n        }\n      });\n    }\n  }\n  // Double dispatch methods for listeners\n  enterRule(_listener) {\n  }\n  exitRule(_listener) {\n  }\n  addChild(child) {\n    this.children.push(child);\n    return child;\n  }\n  /**\n   * Used by enterOuterAlt to toss out a RuleContext previously added as\n   * we entered a rule. If we have label, we will need to remove\n   * generic ruleContext object.\n   */\n  removeLastChild() {\n    this.children.pop();\n  }\n  addTokenNode(token) {\n    const node = new TerminalNode(token);\n    this.children.push(node);\n    node.parent = this;\n    return node;\n  }\n  addErrorNode(errorNode) {\n    errorNode.parent = this;\n    this.children.push(errorNode);\n    return errorNode;\n  }\n  getChild(i, type) {\n    if (i < 0 || i >= this.children.length) {\n      return null;\n    }\n    if (!type) {\n      return this.children[i];\n    }\n    for (const child of this.children) {\n      if (child instanceof type) {\n        if (i === 0) {\n          return child;\n        } else {\n          i -= 1;\n        }\n      }\n    }\n    return null;\n  }\n  getToken(ttype, i) {\n    if (i < 0 || i >= this.children.length) {\n      return null;\n    }\n    for (const child of this.children) {\n      if (\"symbol\" in child) {\n        if (child.symbol?.type === ttype) {\n          if (i === 0) {\n            return child;\n          } else {\n            i -= 1;\n          }\n        }\n      }\n    }\n    return null;\n  }\n  getTokens(ttype) {\n    const tokens = [];\n    for (const child of this.children) {\n      if (\"symbol\" in child) {\n        if (child.symbol?.type === ttype) {\n          tokens.push(child);\n        }\n      }\n    }\n    return tokens;\n  }\n  // XXX: base the child type selection on the rule index, not the class.\n  getRuleContext(index, ctxType) {\n    return this.getChild(index, ctxType);\n  }\n  // XXX: base the child type selection on the rule index, not the class.\n  getRuleContexts(ctxType) {\n    const contexts = [];\n    for (const child of this.children) {\n      if (child instanceof ctxType) {\n        contexts.push(child);\n      }\n    }\n    return contexts;\n  }\n  getChildCount() {\n    return this.children.length;\n  }\n  getSourceInterval() {\n    if (this.start === null) {\n      return Interval.INVALID_INTERVAL;\n    }\n    if (this.stop === null || this.stop.tokenIndex < this.start.tokenIndex) {\n      return new Interval(this.start.tokenIndex, this.start.tokenIndex - 1);\n    }\n    return new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n  }\n  depth() {\n    let n2 = 0;\n    let p = this;\n    while (p !== null) {\n      p = p.parent;\n      n2 += 1;\n    }\n    return n2;\n  }\n  /**\n   * A context is empty if there is no invoking state; meaning nobody call\n   * current context.\n   */\n  isEmpty() {\n    return this.invokingState === -1;\n  }\n  get ruleContext() {\n    return this;\n  }\n  get ruleIndex() {\n    return -1;\n  }\n  getPayload() {\n    return this;\n  }\n  getText() {\n    if (this.children.length === 0) {\n      return \"\";\n    }\n    return this.children.map((child) => {\n      return child.getText();\n    }).join(\"\");\n  }\n  /**\n   * For rule associated with this parse tree internal node, return\n   * the outer alternative number used to match the input. Default\n   * implementation does not compute nor store this alt num. Create\n   * a subclass of ParserRuleContext with backing field and set\n   * option contextSuperClass.\n   * to set it.\n   */\n  getAltNumber() {\n    return ATN.INVALID_ALT_NUMBER;\n  }\n  /**\n   * Set the outer alternative number for this context node. Default\n   * implementation does nothing to avoid backing field overhead for\n   * trees that don't need it.  Create\n   * a subclass of ParserRuleContext with backing field and set\n   * option contextSuperClass.\n   */\n  setAltNumber(_altNumber) {\n  }\n  accept(visitor) {\n    return visitor.visitChildren(this);\n  }\n  toStringTree(...args) {\n    if (args.length < 2) {\n      return Trees.toStringTree(this, null, args[0]);\n    }\n    return Trees.toStringTree(this, args[0], args[1]);\n  }\n  toString(ruleNames, stop) {\n    ruleNames = ruleNames ?? null;\n    stop = stop ?? null;\n    let p = this;\n    let s = \"[\";\n    while (p !== null && p !== stop) {\n      if (ruleNames === null) {\n        if (!p.isEmpty()) {\n          s += p.invokingState;\n        }\n      } else {\n        const ri = p.ruleIndex;\n        const ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : \"\" + ri;\n        s += ruleName;\n      }\n      if (p.parent !== null && (ruleNames !== null || !p.parent.isEmpty())) {\n        s += \" \";\n      }\n      p = p.parent;\n    }\n    s += \"]\";\n    return s;\n  }\n};\n\n// src/atn/ArrayPredictionContext.ts\nvar ArrayPredictionContext = class _ArrayPredictionContext extends PredictionContext {\n  static {\n    __name(this, \"ArrayPredictionContext\");\n  }\n  parents = [];\n  returnStates = [];\n  constructor(parents, returnStates) {\n    super(PredictionContext.calculateHashCodeList(parents, returnStates));\n    this.parents = parents;\n    this.returnStates = returnStates;\n    return this;\n  }\n  isEmpty() {\n    return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n  }\n  get length() {\n    return this.returnStates.length;\n  }\n  getParent(index) {\n    return this.parents[index];\n  }\n  getReturnState(index) {\n    return this.returnStates[index];\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _ArrayPredictionContext) || this.hashCode() !== other.hashCode()) {\n      return false;\n    }\n    return equalNumberArrays(this.returnStates, other.returnStates) && equalArrays(this.parents, other.parents);\n  }\n  toString() {\n    if (this.isEmpty()) {\n      return \"[]\";\n    }\n    const entries = [];\n    for (let i = 0; i < this.returnStates.length; i++) {\n      if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n        entries.push(\"$\");\n        continue;\n      }\n      entries.push(this.returnStates[i].toString());\n      if (this.parents[i]) {\n        entries.push(this.parents[i].toString());\n      } else {\n        entries.push(\"null\");\n      }\n    }\n    return `[${entries.join(\", \")}]`;\n  }\n};\n\n// src/atn/helpers.ts\nvar createSingletonPredictionContext = /* @__PURE__ */ __name((parent, returnState) => {\n  if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n    return EmptyPredictionContext.instance;\n  } else {\n    return new SingletonPredictionContext(parent, returnState);\n  }\n}, \"createSingletonPredictionContext\");\n\n// src/atn/PredictionContextUtils.ts\nvar predictionContextFromRuleContext = /* @__PURE__ */ __name((atn, outerContext) => {\n  if (!outerContext) {\n    outerContext = ParserRuleContext.empty;\n  }\n  if (!outerContext.parent || outerContext === ParserRuleContext.empty) {\n    return EmptyPredictionContext.instance;\n  }\n  const parent = predictionContextFromRuleContext(atn, outerContext.parent);\n  const state = atn.states[outerContext.invokingState];\n  const transition = state.transitions[0];\n  return createSingletonPredictionContext(parent, transition.followState.stateNumber);\n}, \"predictionContextFromRuleContext\");\nvar getCachedPredictionContext = /* @__PURE__ */ __name((context, contextCache, visited) => {\n  if (context.isEmpty()) {\n    return context;\n  }\n  let existing = visited.get(context);\n  if (existing) {\n    return existing;\n  }\n  existing = contextCache.get(context);\n  if (existing) {\n    visited.set(context, existing);\n    return existing;\n  }\n  let changed = false;\n  let parents = [];\n  for (let i = 0; i < parents.length; i++) {\n    const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n    if (changed || parent !== context.getParent(i)) {\n      if (!changed) {\n        parents = [];\n        for (let j = 0; j < context.length; j++) {\n          parents[j] = context.getParent(j);\n        }\n        changed = true;\n      }\n      parents[i] = parent;\n    }\n  }\n  if (!changed) {\n    contextCache.add(context);\n    visited.set(context, context);\n    return context;\n  }\n  let updated;\n  if (parents.length === 0) {\n    updated = EmptyPredictionContext.instance;\n  } else if (parents.length === 1) {\n    updated = createSingletonPredictionContext(parents[0] ?? void 0, context.getReturnState(0));\n  } else {\n    updated = new ArrayPredictionContext(parents, context.returnStates);\n  }\n  contextCache.add(updated);\n  visited.set(updated, updated);\n  visited.set(context, updated);\n  return updated;\n}, \"getCachedPredictionContext\");\nvar merge = /* @__PURE__ */ __name((a, b, rootIsWildcard, mergeCache) => {\n  if (a === b || a.equals(b)) {\n    return a;\n  }\n  if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n    return mergeSingletons(a, b, rootIsWildcard, mergeCache);\n  }\n  if (rootIsWildcard) {\n    if (a instanceof EmptyPredictionContext) {\n      return a;\n    }\n    if (b instanceof EmptyPredictionContext) {\n      return b;\n    }\n  }\n  if (a instanceof SingletonPredictionContext) {\n    a = new ArrayPredictionContext([a.parent], [a.returnState]);\n  }\n  if (b instanceof SingletonPredictionContext) {\n    b = new ArrayPredictionContext([b.parent], [b.returnState]);\n  }\n  return mergeArrays(a, b, rootIsWildcard, mergeCache);\n}, \"merge\");\nvar mergeArrays = /* @__PURE__ */ __name((a, b, rootIsWildcard, mergeCache) => {\n  if (mergeCache) {\n    let previous = mergeCache.get(a, b);\n    if (previous) {\n      return previous;\n    }\n    previous = mergeCache.get(b, a);\n    if (previous) {\n      return previous;\n    }\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let mergedReturnStates = new Array(a.returnStates.length + b.returnStates.length).fill(0);\n  let mergedParents = new Array(a.returnStates.length + b.returnStates.length).fill(null);\n  while (i < a.returnStates.length && j < b.returnStates.length) {\n    const aParent = a.parents[i];\n    const bParent = b.parents[j];\n    if (a.returnStates[i] === b.returnStates[j]) {\n      const payload = a.returnStates[i];\n      const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE && aParent === null && bParent === null;\n      const axAx = aParent !== null && bParent !== null && aParent === bParent;\n      if (bothDollars || axAx) {\n        mergedParents[k] = aParent;\n        mergedReturnStates[k] = payload;\n      } else {\n        mergedParents[k] = merge(aParent, bParent, rootIsWildcard, mergeCache);\n        mergedReturnStates[k] = payload;\n      }\n      i += 1;\n      j += 1;\n    } else if (a.returnStates[i] < b.returnStates[j]) {\n      mergedParents[k] = aParent;\n      mergedReturnStates[k] = a.returnStates[i];\n      i += 1;\n    } else {\n      mergedParents[k] = bParent;\n      mergedReturnStates[k] = b.returnStates[j];\n      j += 1;\n    }\n    k += 1;\n  }\n  if (i < a.returnStates.length) {\n    for (let p = i; p < a.returnStates.length; p++) {\n      mergedParents[k] = a.parents[p];\n      mergedReturnStates[k] = a.returnStates[p];\n      k += 1;\n    }\n  } else {\n    for (let p = j; p < b.returnStates.length; p++) {\n      mergedParents[k] = b.parents[p];\n      mergedReturnStates[k] = b.returnStates[p];\n      k += 1;\n    }\n  }\n  if (k < mergedParents.length) {\n    if (k === 1) {\n      const aNew = createSingletonPredictionContext(mergedParents[0] ?? void 0, mergedReturnStates[0]);\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, aNew);\n      }\n      return aNew;\n    }\n    mergedParents = mergedParents.slice(0, k);\n    mergedReturnStates = mergedReturnStates.slice(0, k);\n  }\n  const merged = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n  if (merged.equals(a)) {\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, a);\n    }\n    if (PredictionContext.traceATNSimulator) {\n      console.log(\"mergeArrays a=\" + a + \",b=\" + b + \" -> a\");\n    }\n    return a;\n  }\n  if (merged.equals(b)) {\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, b);\n    }\n    return b;\n  }\n  combineCommonParents(mergedParents);\n  if (mergeCache !== null) {\n    mergeCache.set(a, b, merged);\n  }\n  if (PredictionContext.traceATNSimulator) {\n    console.log(\"mergeArrays a=\" + a + \",b=\" + b + \" -> \" + merged);\n  }\n  return merged;\n}, \"mergeArrays\");\nvar combineCommonParents = /* @__PURE__ */ __name((parents) => {\n  const uniqueParents = new HashMap(ObjectEqualityComparator.instance);\n  for (const parent of parents) {\n    if (parent) {\n      if (!uniqueParents.containsKey(parent)) {\n        uniqueParents.set(parent, parent);\n      }\n    }\n  }\n  for (let q = 0; q < parents.length; q++) {\n    if (parents[q]) {\n      parents[q] = uniqueParents.get(parents[q]) ?? null;\n    }\n  }\n}, \"combineCommonParents\");\nvar mergeSingletons = /* @__PURE__ */ __name((a, b, rootIsWildcard, mergeCache) => {\n  if (mergeCache !== null) {\n    let previous = mergeCache.get(a, b);\n    if (previous !== null) {\n      return previous;\n    }\n    previous = mergeCache.get(b, a);\n    if (previous !== null) {\n      return previous;\n    }\n  }\n  const rootMerge = mergeRoot(a, b, rootIsWildcard);\n  if (rootMerge !== null) {\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, rootMerge);\n    }\n    return rootMerge;\n  }\n  if (a.returnState === b.returnState) {\n    const parent = merge(a.parent, b.parent, rootIsWildcard, mergeCache);\n    if (parent === a.parent) {\n      return a;\n    }\n    if (parent === b.parent) {\n      return b;\n    }\n    const spc = createSingletonPredictionContext(parent, a.returnState);\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, spc);\n    }\n    return spc;\n  } else {\n    let singleParent = null;\n    if (a === b || a.parent !== null && a.parent.equals(b.parent)) {\n      singleParent = a.parent;\n    }\n    if (singleParent !== null) {\n      const payloads2 = [a.returnState, b.returnState];\n      if (a.returnState > b.returnState) {\n        payloads2[0] = b.returnState;\n        payloads2[1] = a.returnState;\n      }\n      const parents2 = [singleParent, singleParent];\n      const apc = new ArrayPredictionContext(parents2, payloads2);\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, apc);\n      }\n      return apc;\n    }\n    const payloads = [a.returnState, b.returnState];\n    let parents = [a.parent, b.parent];\n    if (a.returnState > b.returnState) {\n      payloads[0] = b.returnState;\n      payloads[1] = a.returnState;\n      parents = [b.parent, a.parent];\n    }\n    const aNew = new ArrayPredictionContext(parents, payloads);\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, aNew);\n    }\n    return aNew;\n  }\n}, \"mergeSingletons\");\nvar mergeRoot = /* @__PURE__ */ __name((a, b, rootIsWildcard) => {\n  if (rootIsWildcard) {\n    if (a === EmptyPredictionContext.instance || b === EmptyPredictionContext.instance) {\n      return EmptyPredictionContext.instance;\n    }\n  } else {\n    if (a === EmptyPredictionContext.instance && b === EmptyPredictionContext.instance) {\n      return EmptyPredictionContext.instance;\n    }\n    if (a === EmptyPredictionContext.instance) {\n      const payloads = [\n        b.returnState,\n        PredictionContext.EMPTY_RETURN_STATE\n      ];\n      const parents = [b.parent, null];\n      return new ArrayPredictionContext(parents, payloads);\n    }\n    if (b === EmptyPredictionContext.instance) {\n      const payloads = [a.returnState, PredictionContext.EMPTY_RETURN_STATE];\n      const parents = [a.parent, null];\n      return new ArrayPredictionContext(parents, payloads);\n    }\n  }\n  return null;\n}, \"mergeRoot\");\n\n// src/atn/LL1Analyzer.ts\nvar LL1Analyzer = class _LL1Analyzer {\n  constructor(atn) {\n    this.atn = atn;\n  }\n  static {\n    __name(this, \"LL1Analyzer\");\n  }\n  /**\n   * Special value added to the lookahead sets to indicate that we hit\n   * a predicate during analysis if `seeThruPreds==false`.\n   */\n  static hitPredicate = Token.INVALID_TYPE;\n  /**\n   * Calculates the SLL(1) expected lookahead set for each outgoing transition\n   * of an {@link ATNState}. The returned array has one element for each\n   * outgoing transition in `s`. If the closure from transition\n   * _i_ leads to a semantic predicate before matching a symbol, the\n   * element at index *i* of the result will be `undefined`.\n   *\n   * @param s the ATN state\n   * @returns the expected symbols for each outgoing transition of `s`.\n   */\n  getDecisionLookahead(s) {\n    const count = s.transitions.length;\n    const look = new Array(count);\n    for (let alt = 0; alt < count; alt++) {\n      const set = new IntervalSet();\n      const lookBusy = new HashSet();\n      this.doLook(\n        s.transitions[alt].target,\n        void 0,\n        EmptyPredictionContext.instance,\n        set,\n        lookBusy,\n        new BitSet(),\n        false,\n        false\n      );\n      if (set.length > 0 && !set.contains(_LL1Analyzer.hitPredicate)) {\n        look[alt] = set;\n      }\n    }\n    return look;\n  }\n  /**\n   * Compute set of tokens that can follow `s` in the ATN in the\n   * specified `ctx`.\n   *\n   * If `ctx` is `null` and the end of the rule containing\n   * `s` is reached, {@link Token//EPSILON} is added to the result set.\n   * If `ctx` is not `null` and the end of the outermost rule is\n   * reached, {@link Token//EOF} is added to the result set.\n   *\n   * @param s the ATN state\n   * @param stopState the ATN state to stop at. This can be a\n   * {@link BlockEndState} to detect epsilon paths through a closure.\n   * @param ctx the complete parser context, or `null` if the context\n   * should be ignored\n   *\n   * @returns The set of tokens that can follow `s` in the ATN in the\n   * specified `ctx`.\n   */\n  look(s, stopState, ctx) {\n    const r = new IntervalSet();\n    const lookContext = ctx ? predictionContextFromRuleContext(this.atn, ctx) : null;\n    this.doLook(s, stopState, lookContext, r, new HashSet(), new BitSet(), true, true);\n    return r;\n  }\n  /**\n   * Compute set of tokens that can follow `s` in the ATN in the\n   * specified `ctx`.\n   *\n   * If `ctx` is `null` and `stopState` or the end of the\n   * rule containing `s` is reached, {@link Token//EPSILON} is added to\n   * the result set. If `ctx` is not `null` and `addEOF` is\n   * `true` and `stopState` or the end of the outermost rule is\n   * reached, {@link Token//EOF} is added to the result set.\n   *\n   * @param s the ATN state.\n   * @param stopState the ATN state to stop at. This can be a\n   * {@link BlockEndState} to detect epsilon paths through a closure.\n   * @param ctx The outer context, or `null` if the outer context should\n   * not be used.\n   * @param look The result lookahead set.\n   * @param lookBusy A set used for preventing epsilon closures in the ATN\n   * from causing a stack overflow. Outside code should pass\n   * `new CustomizedSet<ATNConfig>` for this argument.\n   * @param calledRuleStack A set used for preventing left recursion in the\n   * ATN from causing a stack overflow. Outside code should pass\n   * `new BitSet()` for this argument.\n   * @param seeThruPreds `true` to true semantic predicates as\n   * implicitly `true` and \"see through them\", otherwise `false`\n   * to treat semantic predicates as opaque and add {@link hitPredicate} to the\n   * result if one is encountered.\n   * @param addEOF Add {@link Token//EOF} to the result if the end of the\n   * outermost context is reached. This parameter has no effect if `ctx`\n   * is `null`.\n   */\n  doLook(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n    const c = ATNConfig.createWithContext(s, 0, ctx);\n    if (lookBusy.get(c)) {\n      return;\n    }\n    lookBusy.add(c);\n    if (s === stopState) {\n      if (!ctx) {\n        look.addOne(Token.EPSILON);\n        return;\n      } else if (ctx.isEmpty() && addEOF) {\n        look.addOne(Token.EOF);\n        return;\n      }\n    }\n    if (s.constructor.stateType === ATNState.RULE_STOP) {\n      if (!ctx) {\n        look.addOne(Token.EPSILON);\n        return;\n      } else if (ctx.isEmpty() && addEOF) {\n        look.addOne(Token.EOF);\n        return;\n      }\n      if (ctx !== EmptyPredictionContext.instance) {\n        const removed = calledRuleStack.get(s.ruleIndex);\n        try {\n          calledRuleStack.clear(s.ruleIndex);\n          for (let i = 0; i < ctx.length; i++) {\n            const returnState = this.atn.states[ctx.getReturnState(i)];\n            this.doLook(\n              returnState,\n              stopState,\n              ctx.getParent(i),\n              look,\n              lookBusy,\n              calledRuleStack,\n              seeThruPreds,\n              addEOF\n            );\n          }\n        } finally {\n          if (removed) {\n            calledRuleStack.set(s.ruleIndex);\n          }\n        }\n        return;\n      }\n    }\n    for (const t of s.transitions) {\n      switch (t.transitionType) {\n        case Transition.RULE: {\n          if (calledRuleStack.get(t.target.ruleIndex)) {\n            continue;\n          }\n          const newContext = createSingletonPredictionContext(\n            ctx ?? void 0,\n            t.followState.stateNumber\n          );\n          try {\n            calledRuleStack.set(t.target.ruleIndex);\n            this.doLook(\n              t.target,\n              stopState,\n              newContext,\n              look,\n              lookBusy,\n              calledRuleStack,\n              seeThruPreds,\n              addEOF\n            );\n          } finally {\n            calledRuleStack.clear(t.target.ruleIndex);\n          }\n          break;\n        }\n        case Transition.PREDICATE:\n        case Transition.PRECEDENCE: {\n          if (seeThruPreds) {\n            this.doLook(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n          } else {\n            look.addOne(_LL1Analyzer.hitPredicate);\n          }\n          break;\n        }\n        case Transition.WILDCARD: {\n          look.addRange(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n          break;\n        }\n        default: {\n          if (t.isEpsilon) {\n            this.doLook(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n          } else {\n            let set = t.label;\n            if (set) {\n              if (t instanceof NotSetTransition) {\n                set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n              }\n              look.addSet(set);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n};\n\n// src/atn/ATN.ts\nvar ATN = class {\n  static {\n    __name(this, \"ATN\");\n  }\n  static INVALID_ALT_NUMBER = 0;\n  /** Represents the type of recognizer an ATN applies to */\n  static LEXER = 0;\n  static PARSER = 1;\n  /**\n   * Used for runtime deserialization of ATNs from strings\n   * The type of the ATN.\n   */\n  grammarType;\n  /** The maximum value for any symbol recognized by a transition in the ATN. */\n  maxTokenType;\n  states = [];\n  /**\n   * Each subrule/rule is a decision point and we must track them so we\n   * can go back later and build DFA predictors for them.  This includes\n   * all the rules, subrules, optional blocks, ()+, ()* etc...\n   */\n  decisionToState = [];\n  /** Maps from rule index to starting state number. */\n  ruleToStartState = [];\n  // Initialized by the ATN deserializer.\n  /** Maps from rule index to stop state number. */\n  ruleToStopState = [];\n  // Initialized by the ATN deserializer.\n  modeNameToStartState = /* @__PURE__ */ new Map();\n  /**\n   * For lexer ATNs, this maps the rule index to the resulting token type.\n   * For parser ATNs, this maps the rule index to the generated bypass token\n   * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n   * deserialization option was specified; otherwise, this is `null`\n   */\n  ruleToTokenType = [];\n  // Initialized by the ATN deserializer.\n  /**\n   * For lexer ATNs, this is an array of {@link LexerAction} objects which may\n   * be referenced by action transitions in the ATN\n   */\n  lexerActions = [];\n  modeToStartState = [];\n  analyzer;\n  constructor(grammarType, maxTokenType) {\n    this.grammarType = grammarType;\n    this.maxTokenType = maxTokenType;\n    this.analyzer = new LL1Analyzer(this);\n  }\n  /**\n   * Compute the set of valid tokens that can occur starting in state `s`.\n   * If `ctx` is null, the set of tokens will not include what can follow\n   * the rule surrounding `s`. In other words, the set will be\n   * restricted to tokens reachable staying within `s`'s rule.\n   */\n  nextTokens(atnState, ctx) {\n    if (!ctx && atnState.nextTokenWithinRule) {\n      return atnState.nextTokenWithinRule;\n    }\n    const next = this.analyzer.look(atnState, void 0, ctx);\n    if (!ctx) {\n      atnState.nextTokenWithinRule = next;\n    }\n    return next;\n  }\n  addState(state) {\n    if (state) {\n      state.stateNumber = this.states.length;\n    }\n    this.states.push(state);\n  }\n  removeState(state) {\n    this.states[state.stateNumber] = null;\n  }\n  defineDecisionState(s) {\n    this.decisionToState.push(s);\n    s.decision = this.decisionToState.length - 1;\n    return s.decision;\n  }\n  getDecisionState(decision) {\n    if (this.decisionToState.length === 0) {\n      return null;\n    } else {\n      return this.decisionToState[decision];\n    }\n  }\n  getNumberOfDecisions() {\n    return this.decisionToState.length;\n  }\n  /**\n   * Computes the set of input symbols which could follow ATN state number\n   * `stateNumber` in the specified full `context`. This method\n   * considers the complete parser context, but does not evaluate semantic\n   * predicates (i.e. all predicates encountered during the calculation are\n   * assumed true). If a path in the ATN exists from the starting state to the\n   * {@link RuleStopState} of the outermost context without matching any\n   * symbols, {@link Token//EOF} is added to the returned set.\n   *\n   * If `context` is `null`, it is treated as\n   * {@link ParserRuleContext//EMPTY}.\n   *\n   * @param stateNumber the ATN state number\n   * @param context the full parse context\n   *\n   * @returns {IntervalSet} The set of potentially valid input symbols which could follow the\n   * specified state in the specified context.\n   *\n   * @throws IllegalArgumentException if the ATN does not contain a state with\n   * number `stateNumber`\n   */\n  getExpectedTokens(stateNumber, context) {\n    if (stateNumber < 0 || stateNumber >= this.states.length) {\n      throw new Error(\"Invalid state number.\");\n    }\n    const s = this.states[stateNumber];\n    let following = this.nextTokens(s);\n    if (!following.contains(Token.EPSILON)) {\n      return following;\n    }\n    let ctx = context;\n    const expected = new IntervalSet();\n    expected.addSet(following);\n    expected.removeOne(Token.EPSILON);\n    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n      const invokingState = this.states[ctx.invokingState];\n      const rt = invokingState.transitions[0];\n      following = this.nextTokens(rt.followState);\n      expected.addSet(following);\n      expected.removeOne(Token.EPSILON);\n      ctx = ctx.parent;\n    }\n    if (following.contains(Token.EPSILON)) {\n      expected.addOne(Token.EOF);\n    }\n    return expected;\n  }\n};\n\n// src/atn/ATNConfigSet.ts\nvar KeyTypeEqualityComparer = class _KeyTypeEqualityComparer {\n  static {\n    __name(this, \"KeyTypeEqualityComparer\");\n  }\n  static instance = new _KeyTypeEqualityComparer();\n  hashCode(config) {\n    let hashCode = 7;\n    hashCode = 31 * hashCode + config.state.stateNumber;\n    hashCode = 31 * hashCode + config.alt;\n    hashCode = 31 * hashCode + config.semanticContext.hashCode();\n    return hashCode;\n  }\n  equals(a, b) {\n    if (a === b) {\n      return true;\n    }\n    return a.state.stateNumber === b.state.stateNumber && a.alt === b.alt && a.semanticContext.equals(b.semanticContext);\n  }\n};\nvar ATNConfigSet = class {\n  static {\n    __name(this, \"ATNConfigSet\");\n  }\n  /**\n   * The reason that we need this is because we don't want the hash map to use\n   * the standard hash code and equals. We need all configurations with the\n   * same\n   * `(s,i,_,semctx)` to be equal. Unfortunately, this key effectively\n   * doubles\n   * the number of objects associated with ATNConfigs. The other solution is\n   * to\n   * use a hash table that lets us specify the equals/hashCode operation.\n   * All configs but hashed by (s, i, _, pi) not including context. Wiped out\n   * when we go readonly as this set becomes a DFA state\n   */\n  configLookup = new HashSet(KeyTypeEqualityComparer.instance);\n  // Track the elements as they are added to the set; supports get(i).\n  configs = [];\n  uniqueAlt = 0;\n  /**\n   * Used in parser and lexer. In lexer, it indicates we hit a pred\n   * while computing a closure operation. Don't make a DFA state from this\n   */\n  hasSemanticContext = false;\n  dipsIntoOuterContext = false;\n  /**\n   * Indicates that this configuration set is part of a full context\n   * LL prediction. It will be used to determine how to merge $. With SLL\n   * it's a wildcard whereas it is not for LL context merge\n   */\n  fullCtx = false;\n  /**\n   * Indicates that the set of configurations is read-only. Do not\n   * allow any code to manipulate the set; DFA states will point at\n   * the sets and they must not change. This does not protect the other\n   * fields; in particular, conflictingAlts is set after\n   * we've made this readonly\n   */\n  readOnly = false;\n  conflictingAlts = null;\n  /**\n   * Tracks the first config that has a rule stop state. Avoids frequent linear search for that, when adding\n   * a DFA state in the lexer ATN simulator.\n   */\n  firstStopState;\n  #cachedHashCode = -1;\n  constructor(fullCtxOrOldSet) {\n    if (fullCtxOrOldSet !== void 0) {\n      if (typeof fullCtxOrOldSet === \"boolean\") {\n        this.fullCtx = fullCtxOrOldSet ?? true;\n      } else {\n        const old = fullCtxOrOldSet;\n        this.addAll(old.configs);\n        this.uniqueAlt = old.uniqueAlt;\n        this.conflictingAlts = old.conflictingAlts;\n        this.hasSemanticContext = old.hasSemanticContext;\n        this.dipsIntoOuterContext = old.dipsIntoOuterContext;\n      }\n    }\n  }\n  [Symbol.iterator]() {\n    return this.configs[Symbol.iterator]();\n  }\n  /**\n   * Adding a new config means merging contexts with existing configs for\n   * `(s, i, pi, _)`, where `s` is the {@link ATNConfig.state}, `i` is the {@link ATNConfig.alt}, and\n   * `pi` is the {@link ATNConfig.semanticContext}. We use `(s,i,pi)` as key.\n   *\n   * This method updates {@link dipsIntoOuterContext} and\n   * {@link hasSemanticContext} when necessary.\n   */\n  add(config, mergeCache = null) {\n    if (this.readOnly) {\n      throw new Error(\"This set is readonly\");\n    }\n    if (!this.firstStopState && config.state.constructor.stateType === ATNState.RULE_STOP) {\n      this.firstStopState = config;\n    }\n    this.hasSemanticContext ||= config.semanticContext !== SemanticContext.NONE;\n    this.dipsIntoOuterContext ||= config.reachesIntoOuterContext;\n    const existing = this.configLookup.getOrAdd(config);\n    if (existing === config) {\n      this.#cachedHashCode = -1;\n      this.configs.push(config);\n      return;\n    }\n    const rootIsWildcard = !this.fullCtx;\n    const merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n    existing.reachesIntoOuterContext ||= config.reachesIntoOuterContext;\n    existing.precedenceFilterSuppressed ||= config.precedenceFilterSuppressed;\n    existing.context = merged;\n  }\n  /** Return a List holding list of configs */\n  get elements() {\n    return this.configs;\n  }\n  /**\n   * Gets the complete set of represented alternatives for the configuration set.\n   *\n   * @returns the set of represented alternatives in this configuration set\n   */\n  getAlts() {\n    const alts = new BitSet();\n    for (const config of this.configs) {\n      alts.set(config.alt);\n    }\n    return alts;\n  }\n  getPredicates() {\n    const preds = [];\n    for (const config of this.configs) {\n      if (config.semanticContext !== SemanticContext.NONE) {\n        preds.push(config.semanticContext);\n      }\n    }\n    return preds;\n  }\n  getStates() {\n    const states = new HashSet();\n    for (const config of this.configs) {\n      states.add(config.state);\n    }\n    return states;\n  }\n  optimizeConfigs(interpreter) {\n    if (this.readOnly) {\n      throw new Error(\"This set is readonly\");\n    }\n    if (this.configLookup.size === 0) {\n      return;\n    }\n    for (const config of this.configs) {\n      config.context = interpreter.getCachedContext(config.context);\n    }\n  }\n  addAll(coll) {\n    for (const config of coll) {\n      this.add(config);\n    }\n    return false;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext && equalArrays(this.configs, other.configs)) {\n      return true;\n    }\n    return false;\n  }\n  hashCode() {\n    if (this.#cachedHashCode === -1) {\n      this.#cachedHashCode = this.computeHashCode();\n    }\n    return this.#cachedHashCode;\n  }\n  get length() {\n    return this.configs.length;\n  }\n  isEmpty() {\n    return this.configs.length === 0;\n  }\n  contains(item) {\n    if (this.configLookup === null) {\n      throw new Error(\"This method is not implemented for readonly sets.\");\n    }\n    return this.configLookup.contains(item);\n  }\n  containsFast(item) {\n    if (this.configLookup === null) {\n      throw new Error(\"This method is not implemented for readonly sets.\");\n    }\n    return this.configLookup.contains(item);\n  }\n  clear() {\n    if (this.readOnly) {\n      throw new Error(\"This set is readonly\");\n    }\n    this.configs = [];\n    this.#cachedHashCode = -1;\n    this.configLookup = new HashSet(KeyTypeEqualityComparer.instance);\n  }\n  setReadonly(readOnly) {\n    this.readOnly = readOnly;\n    if (readOnly) {\n      this.configLookup = null;\n    }\n  }\n  toString() {\n    return arrayToString(this.configs) + (this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") + (this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") + (this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") + (this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n  }\n  computeHashCode() {\n    let hash = MurmurHash.initialize();\n    this.configs.forEach((config) => {\n      hash = MurmurHash.update(hash, config.hashCode());\n    });\n    hash = MurmurHash.finish(hash, this.configs.length);\n    return hash;\n  }\n};\n\n// src/atn/BasicState.ts\nvar BasicState = class extends ATNState {\n  static {\n    __name(this, \"BasicState\");\n  }\n  static stateType = ATNState.BASIC;\n};\n\n// src/atn/DecisionState.ts\nvar DecisionState = class extends ATNState {\n  static {\n    __name(this, \"DecisionState\");\n  }\n  decision = -1;\n  nonGreedy = false;\n};\n\n// src/atn/BlockStartState.ts\nvar BlockStartState = class extends DecisionState {\n  static {\n    __name(this, \"BlockStartState\");\n  }\n  endState;\n};\n\n// src/atn/BlockEndState.ts\nvar BlockEndState = class extends ATNState {\n  static {\n    __name(this, \"BlockEndState\");\n  }\n  static stateType = ATNState.BLOCK_END;\n  startState;\n};\n\n// src/atn/LoopEndState.ts\nvar LoopEndState = class extends ATNState {\n  static {\n    __name(this, \"LoopEndState\");\n  }\n  static stateType = ATNState.LOOP_END;\n  loopBackState;\n};\n\n// src/atn/RuleStartState.ts\nvar RuleStartState = class extends ATNState {\n  static {\n    __name(this, \"RuleStartState\");\n  }\n  static stateType = ATNState.RULE_START;\n  stopState;\n  isLeftRecursiveRule = false;\n};\n\n// src/atn/RuleStopState.ts\nvar RuleStopState = class extends ATNState {\n  static {\n    __name(this, \"RuleStopState\");\n  }\n  static stateType = ATNState.RULE_STOP;\n};\n\n// src/atn/TokensStartState.ts\nvar TokensStartState = class extends DecisionState {\n  static {\n    __name(this, \"TokensStartState\");\n  }\n  static stateType = ATNState.TOKEN_START;\n};\n\n// src/atn/PlusLoopbackState.ts\nvar PlusLoopbackState = class extends DecisionState {\n  static {\n    __name(this, \"PlusLoopbackState\");\n  }\n  static stateType = ATNState.PLUS_LOOP_BACK;\n};\n\n// src/atn/StarLoopbackState.ts\nvar StarLoopbackState = class extends ATNState {\n  static {\n    __name(this, \"StarLoopbackState\");\n  }\n  static stateType = ATNState.STAR_LOOP_BACK;\n};\n\n// src/atn/StarLoopEntryState.ts\nvar StarLoopEntryState = class extends DecisionState {\n  static {\n    __name(this, \"StarLoopEntryState\");\n  }\n  static stateType = ATNState.STAR_LOOP_ENTRY;\n  // This is always set during ATN deserialization\n  loopBackState;\n  /**\n   * Indicates whether this state can benefit from a precedence DFA during SLL\n   * decision making.\n   *\n   * This is a computed property that is calculated during ATN deserialization\n   * and stored for use in {@link ParserATNSimulator} and\n   * {@link ParserInterpreter}.\n   *\n   * @see `DFA.isPrecedenceDfa`\n   */\n  precedenceRuleDecision = false;\n};\n\n// src/atn/PlusBlockStartState.ts\nvar PlusBlockStartState = class extends BlockStartState {\n  static {\n    __name(this, \"PlusBlockStartState\");\n  }\n  static stateType = ATNState.PLUS_BLOCK_START;\n  loopBackState;\n};\n\n// src/atn/StarBlockStartState.ts\nvar StarBlockStartState = class extends BlockStartState {\n  static {\n    __name(this, \"StarBlockStartState\");\n  }\n  static stateType = ATNState.STAR_BLOCK_START;\n};\n\n// src/atn/BasicBlockStartState.ts\nvar BasicBlockStartState = class extends BlockStartState {\n  static {\n    __name(this, \"BasicBlockStartState\");\n  }\n  static stateType = ATNState.BLOCK_START;\n};\n\n// src/atn/AtomTransition.ts\nvar AtomTransition = class extends Transition {\n  static {\n    __name(this, \"AtomTransition\");\n  }\n  /** The token type or character value; or, signifies special label. */\n  labelValue;\n  #label;\n  constructor(target, label) {\n    super(target);\n    this.labelValue = label;\n    this.#label = IntervalSet.of(label, label);\n  }\n  get label() {\n    return this.#label;\n  }\n  get transitionType() {\n    return Transition.ATOM;\n  }\n  matches(symbol) {\n    return this.labelValue === symbol;\n  }\n  toString() {\n    return this.labelValue.toString();\n  }\n};\n\n// src/atn/RuleTransition.ts\nvar RuleTransition = class extends Transition {\n  static {\n    __name(this, \"RuleTransition\");\n  }\n  ruleIndex;\n  precedence;\n  followState;\n  constructor(ruleStart, ruleIndex, precedence, followState) {\n    super(ruleStart);\n    this.ruleIndex = ruleIndex;\n    this.precedence = precedence;\n    this.followState = followState;\n  }\n  get isEpsilon() {\n    return true;\n  }\n  get transitionType() {\n    return Transition.RULE;\n  }\n  matches(_symbol, _minVocabSymbol, _maxVocabSymbol) {\n    return false;\n  }\n};\n\n// src/atn/RangeTransition.ts\nvar RangeTransition = class extends Transition {\n  static {\n    __name(this, \"RangeTransition\");\n  }\n  start;\n  stop;\n  #label = new IntervalSet();\n  constructor(target, start, stop) {\n    super(target);\n    this.start = start;\n    this.stop = stop;\n    this.#label.addRange(start, stop);\n  }\n  get label() {\n    return this.#label;\n  }\n  get transitionType() {\n    return Transition.RANGE;\n  }\n  matches(symbol, _minVocabSymbol, _maxVocabSymbol) {\n    return symbol >= this.start && symbol <= this.stop;\n  }\n  toString() {\n    return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n  }\n};\n\n// src/atn/ActionTransition.ts\nvar ActionTransition = class extends Transition {\n  static {\n    __name(this, \"ActionTransition\");\n  }\n  ruleIndex;\n  actionIndex;\n  isCtxDependent;\n  constructor(target, ruleIndex, actionIndex, isCtxDependent) {\n    super(target);\n    this.ruleIndex = ruleIndex;\n    this.actionIndex = actionIndex ?? -1;\n    this.isCtxDependent = isCtxDependent ?? false;\n  }\n  get isEpsilon() {\n    return true;\n  }\n  get transitionType() {\n    return Transition.ACTION;\n  }\n  matches(_symbol, _minVocabSymbol, _maxVocabSymbol) {\n    return false;\n  }\n  toString() {\n    return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n  }\n};\n\n// src/atn/EpsilonTransition.ts\nvar EpsilonTransition = class extends Transition {\n  static {\n    __name(this, \"EpsilonTransition\");\n  }\n  #outermostPrecedenceReturn;\n  constructor(target, outermostPrecedenceReturn = -1) {\n    super(target);\n    this.#outermostPrecedenceReturn = outermostPrecedenceReturn;\n  }\n  /**\n   * @returns the rule index of a precedence rule for which this transition is\n   * returning from, where the precedence value is 0; otherwise, -1.\n   *\n   * @see ATNConfig.isPrecedenceFilterSuppressed()\n   * @see ParserATNSimulator.applyPrecedenceFilter(ATNConfigSet)\n   * @since 4.4.1\n   */\n  get outermostPrecedenceReturn() {\n    return this.#outermostPrecedenceReturn;\n  }\n  get isEpsilon() {\n    return true;\n  }\n  get transitionType() {\n    return Transition.EPSILON;\n  }\n  matches() {\n    return false;\n  }\n  toString() {\n    return \"epsilon\";\n  }\n};\n\n// src/atn/WildcardTransition.ts\nvar WildcardTransition = class extends Transition {\n  static {\n    __name(this, \"WildcardTransition\");\n  }\n  get transitionType() {\n    return Transition.WILDCARD;\n  }\n  matches(symbol, minVocabSymbol, maxVocabSymbol) {\n    return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n  }\n  toString() {\n    return \".\";\n  }\n};\n\n// src/atn/AbstractPredicateTransition.ts\nvar AbstractPredicateTransition = class extends Transition {\n  static {\n    __name(this, \"AbstractPredicateTransition\");\n  }\n  constructor(target) {\n    super(target);\n  }\n};\n\n// src/atn/PredicateTransition.ts\nvar PredicateTransition = class extends AbstractPredicateTransition {\n  static {\n    __name(this, \"PredicateTransition\");\n  }\n  ruleIndex;\n  predIndex;\n  isCtxDependent;\n  // e.g., $i ref in pred\n  constructor(target, ruleIndex, predIndex, isCtxDependent) {\n    super(target);\n    this.ruleIndex = ruleIndex;\n    this.predIndex = predIndex;\n    this.isCtxDependent = isCtxDependent;\n  }\n  get isEpsilon() {\n    return true;\n  }\n  matches(_symbol, _minVocabSymbol, _maxVocabSymbol) {\n    return false;\n  }\n  get transitionType() {\n    return Transition.PREDICATE;\n  }\n  getPredicate() {\n    return new SemanticContext.Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n  }\n  toString() {\n    return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n  }\n};\n\n// src/atn/PrecedencePredicateTransition.ts\nvar PrecedencePredicateTransition = class extends AbstractPredicateTransition {\n  static {\n    __name(this, \"PrecedencePredicateTransition\");\n  }\n  precedence;\n  constructor(target, precedence) {\n    super(target);\n    this.precedence = precedence;\n  }\n  get isEpsilon() {\n    return true;\n  }\n  matches(_symbol, _minVocabSymbol, _maxVocabSymbol) {\n    return false;\n  }\n  getPredicate() {\n    return new SemanticContext.PrecedencePredicate(this.precedence);\n  }\n  get transitionType() {\n    return Transition.PRECEDENCE;\n  }\n  toString() {\n    return this.precedence + \" >= _p\";\n  }\n};\n\n// src/atn/LexerActionType.ts\nvar LexerActionType = {\n  /** The type of a {@link LexerChannelAction} action. */\n  CHANNEL: 0,\n  /** The type of a {@link LexerCustomAction} action */\n  CUSTOM: 1,\n  /** The type of a {@link LexerModeAction} action. */\n  MODE: 2,\n  /** The type of a {@link LexerMoreAction} action. */\n  MORE: 3,\n  /** The type of a {@link LexerPopModeAction} action. */\n  POP_MODE: 4,\n  /** The type of a {@link LexerPushModeAction} action. */\n  PUSH_MODE: 5,\n  /** The type of a {@link LexerSkipAction} action. */\n  SKIP: 6,\n  /** The type of a {@link LexerTypeAction} action. */\n  TYPE: 7\n};\n\n// src/atn/LexerSkipAction.ts\nvar LexerSkipAction = class _LexerSkipAction {\n  static {\n    __name(this, \"LexerSkipAction\");\n  }\n  /** Provides a singleton instance of this parameter-less lexer action. */\n  static instance = new _LexerSkipAction();\n  actionType;\n  isPositionDependent = false;\n  constructor() {\n    this.actionType = LexerActionType.SKIP;\n  }\n  equals(obj) {\n    return obj === this;\n  }\n  hashCode() {\n    return LexerActionType.SKIP;\n  }\n  execute(lexer) {\n    lexer.skip();\n  }\n  toString() {\n    return \"skip\";\n  }\n};\n\n// src/atn/LexerChannelAction.ts\nvar LexerChannelAction = class _LexerChannelAction {\n  static {\n    __name(this, \"LexerChannelAction\");\n  }\n  channel;\n  actionType;\n  isPositionDependent = false;\n  cachedHashCode;\n  constructor(channel) {\n    this.actionType = LexerActionType.CHANNEL;\n    this.channel = channel;\n  }\n  /**\n   * This action is implemented by calling {@link Lexer.setChannel} with the\n   * value provided by {@link getChannel}.\n   */\n  execute(lexer) {\n    lexer.channel = this.channel;\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      hash = MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash.update(hash, this.channel);\n      this.cachedHashCode = MurmurHash.finish(hash, 2);\n    }\n    return this.cachedHashCode;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _LexerChannelAction)) {\n      return false;\n    }\n    return this.channel === other.channel;\n  }\n  toString() {\n    return \"channel(\" + this.channel + \")\";\n  }\n};\n\n// src/atn/LexerCustomAction.ts\nvar LexerCustomAction = class _LexerCustomAction {\n  static {\n    __name(this, \"LexerCustomAction\");\n  }\n  ruleIndex;\n  actionIndex;\n  actionType;\n  isPositionDependent = true;\n  cachedHashCode;\n  /**\n   * Constructs a custom lexer action with the specified rule and action indexes.\n   *\n   * @param ruleIndex The rule index to use for calls to {@link Recognizer.action}.\n   * @param actionIndex The action index to use for calls to {@link Recognizer.action}.\n   */\n  constructor(ruleIndex, actionIndex) {\n    this.actionType = LexerActionType.CUSTOM;\n    this.ruleIndex = ruleIndex;\n    this.actionIndex = actionIndex;\n  }\n  /**\n   * Custom actions are implemented by calling {@link Lexer.action} with the\n   * appropriate rule and action indexes.\n   */\n  execute(lexer) {\n    lexer.action(null, this.ruleIndex, this.actionIndex);\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      hash = MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash.update(hash, this.ruleIndex);\n      hash = MurmurHash.update(hash, this.actionIndex);\n      this.cachedHashCode = MurmurHash.finish(hash, 3);\n    }\n    return this.cachedHashCode;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _LexerCustomAction)) {\n      return false;\n    }\n    return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n  }\n};\n\n// src/atn/LexerMoreAction.ts\nvar LexerMoreAction = class _LexerMoreAction {\n  static {\n    __name(this, \"LexerMoreAction\");\n  }\n  static instance = new _LexerMoreAction();\n  actionType;\n  isPositionDependent = false;\n  constructor() {\n    this.actionType = LexerActionType.MORE;\n  }\n  equals(obj) {\n    return obj === this;\n  }\n  hashCode() {\n    return LexerActionType.MORE;\n  }\n  /**\n   * This action is implemented by calling {@link Lexer.popMode}.\n   */\n  execute(lexer) {\n    lexer.more();\n  }\n  toString() {\n    return \"more\";\n  }\n};\n\n// src/atn/LexerTypeAction.ts\nvar LexerTypeAction = class _LexerTypeAction {\n  static {\n    __name(this, \"LexerTypeAction\");\n  }\n  type;\n  actionType;\n  isPositionDependent = false;\n  cachedHashCode;\n  constructor(type) {\n    this.actionType = LexerActionType.TYPE;\n    this.type = type;\n  }\n  execute(lexer) {\n    lexer.type = this.type;\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      hash = MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash.update(hash, this.type);\n      this.cachedHashCode = MurmurHash.finish(hash, 2);\n    }\n    return this.cachedHashCode;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _LexerTypeAction)) {\n      return false;\n    }\n    return this.type === other.type;\n  }\n  toString() {\n    return \"type(\" + this.type + \")\";\n  }\n};\n\n// src/atn/LexerPushModeAction.ts\nvar LexerPushModeAction = class _LexerPushModeAction {\n  static {\n    __name(this, \"LexerPushModeAction\");\n  }\n  mode;\n  actionType;\n  isPositionDependent = false;\n  cachedHashCode;\n  constructor(mode) {\n    this.actionType = LexerActionType.PUSH_MODE;\n    this.mode = mode;\n  }\n  /**\n   * This action is implemented by calling {@link Lexer.pushMode} with the\n   * value provided by {@link getMode}.\n   */\n  execute(lexer) {\n    lexer.pushMode(this.mode);\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      hash = MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash.update(hash, this.mode);\n      this.cachedHashCode = MurmurHash.finish(hash, 2);\n    }\n    return this.cachedHashCode;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _LexerPushModeAction)) {\n      return false;\n    }\n    return this.mode === other.mode;\n  }\n  toString() {\n    return \"pushMode(\" + this.mode + \")\";\n  }\n};\n\n// src/atn/LexerPopModeAction.ts\nvar LexerPopModeAction = class _LexerPopModeAction {\n  static {\n    __name(this, \"LexerPopModeAction\");\n  }\n  static instance = new _LexerPopModeAction();\n  actionType;\n  isPositionDependent = false;\n  constructor() {\n    this.actionType = LexerActionType.POP_MODE;\n  }\n  equals(obj) {\n    return obj === this;\n  }\n  hashCode() {\n    return LexerActionType.POP_MODE;\n  }\n  /**\n   * This action is implemented by calling {@link Lexer//popMode}.\n   */\n  execute(lexer) {\n    lexer.popMode();\n  }\n  toString() {\n    return \"popMode\";\n  }\n};\n\n// src/atn/LexerModeAction.ts\nvar LexerModeAction = class _LexerModeAction {\n  static {\n    __name(this, \"LexerModeAction\");\n  }\n  mode;\n  actionType;\n  isPositionDependent = false;\n  cachedHashCode;\n  constructor(mode) {\n    this.actionType = LexerActionType.MODE;\n    this.mode = mode;\n  }\n  /**\n   * This action is implemented by calling {@link Lexer.mode} with the\n   * value provided by {@link getMode}.\n   */\n  execute(lexer) {\n    lexer.mode = this.mode;\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      hash = MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash.update(hash, this.mode);\n      this.cachedHashCode = MurmurHash.finish(hash, 2);\n    }\n    return this.cachedHashCode;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _LexerModeAction)) {\n      return false;\n    }\n    return this.mode === other.mode;\n  }\n  toString() {\n    return \"mode(\" + this.mode + \")\";\n  }\n};\n\n// src/atn/ATNDeserializer.ts\nvar ATNDeserializer = class _ATNDeserializer {\n  static {\n    __name(this, \"ATNDeserializer\");\n  }\n  static SERIALIZED_VERSION = 4;\n  static stateTypeMapper = /* @__PURE__ */ new Map([\n    [ATNState.INVALID_TYPE, void 0],\n    [ATNState.BASIC, BasicState],\n    [ATNState.RULE_START, RuleStartState],\n    [ATNState.BLOCK_START, BasicBlockStartState],\n    [ATNState.PLUS_BLOCK_START, PlusBlockStartState],\n    [ATNState.STAR_BLOCK_START, StarBlockStartState],\n    [ATNState.TOKEN_START, TokensStartState],\n    [ATNState.RULE_STOP, RuleStopState],\n    [ATNState.BLOCK_END, BlockEndState],\n    [ATNState.STAR_LOOP_BACK, StarLoopbackState],\n    [ATNState.STAR_LOOP_ENTRY, StarLoopEntryState],\n    [ATNState.PLUS_LOOP_BACK, PlusLoopbackState],\n    [ATNState.LOOP_END, LoopEndState]\n  ]);\n  static lexerActionFactoryMapper = /* @__PURE__ */ new Map([\n    [LexerActionType.CHANNEL, (data1) => {\n      return new LexerChannelAction(data1);\n    }],\n    [LexerActionType.CUSTOM, (data1, data2) => {\n      return new LexerCustomAction(data1, data2);\n    }],\n    [LexerActionType.MODE, (data1) => {\n      return new LexerModeAction(data1);\n    }],\n    [LexerActionType.MORE, () => {\n      return LexerMoreAction.instance;\n    }],\n    [LexerActionType.POP_MODE, () => {\n      return LexerPopModeAction.instance;\n    }],\n    [LexerActionType.PUSH_MODE, (data1) => {\n      return new LexerPushModeAction(data1);\n    }],\n    [LexerActionType.SKIP, () => {\n      return LexerSkipAction.instance;\n    }],\n    [LexerActionType.TYPE, (data1) => {\n      return new LexerTypeAction(data1);\n    }]\n  ]);\n  data = [];\n  pos = 0;\n  deserializationOptions;\n  actionFactories;\n  constructor(options) {\n    if (!options) {\n      options = { readOnly: false, verifyATN: true, generateRuleBypassTransitions: false };\n    }\n    this.deserializationOptions = options;\n  }\n  deserialize(data) {\n    this.data = data;\n    this.checkVersion();\n    const atn = this.readATN();\n    this.readStates(atn);\n    this.readRules(atn);\n    this.readModes(atn);\n    const sets = [];\n    this.readSets(atn, sets);\n    this.readEdges(atn, sets);\n    this.readDecisions(atn);\n    this.readLexerActions(atn);\n    this.markPrecedenceDecisions(atn);\n    this.verifyATN(atn);\n    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATN.PARSER) {\n      this.generateRuleBypassTransitions(atn);\n      this.verifyATN(atn);\n    }\n    return atn;\n  }\n  checkVersion() {\n    const version = this.data[this.pos++];\n    if (version !== _ATNDeserializer.SERIALIZED_VERSION) {\n      throw new Error(\"Could not deserialize ATN with version \" + version + \" (expected \" + _ATNDeserializer.SERIALIZED_VERSION + \").\");\n    }\n  }\n  readATN() {\n    const grammarType = this.data[this.pos++];\n    const maxTokenType = this.data[this.pos++];\n    return new ATN(grammarType, maxTokenType);\n  }\n  readStates(atn) {\n    let j;\n    let stateNumber;\n    const loopBackStateNumbers = [];\n    const endStateNumbers = [];\n    const stateCount = this.data[this.pos++];\n    for (let i = 0; i < stateCount; i++) {\n      const stateType = this.data[this.pos++];\n      if (stateType === ATNState.INVALID_TYPE) {\n        atn.addState(null);\n        continue;\n      }\n      const ruleIndex = this.data[this.pos++];\n      const s = this.stateFactory(stateType, ruleIndex);\n      if (stateType === ATNState.LOOP_END) {\n        const loopBackStateNumber = this.data[this.pos++];\n        loopBackStateNumbers.push([s, loopBackStateNumber]);\n      } else if (s instanceof BlockStartState) {\n        const endStateNumber = this.data[this.pos++];\n        endStateNumbers.push([s, endStateNumber]);\n      }\n      atn.addState(s);\n    }\n    for (j = 0; j < loopBackStateNumbers.length; j++) {\n      const pair = loopBackStateNumbers[j];\n      pair[0].loopBackState = atn.states[pair[1]] ?? void 0;\n    }\n    for (j = 0; j < endStateNumbers.length; j++) {\n      const pair = endStateNumbers[j];\n      pair[0].endState = atn.states[pair[1]];\n    }\n    const numNonGreedyStates = this.data[this.pos++];\n    for (j = 0; j < numNonGreedyStates; j++) {\n      stateNumber = this.data[this.pos++];\n      atn.states[stateNumber].nonGreedy = true;\n    }\n    const numPrecedenceStates = this.data[this.pos++];\n    for (j = 0; j < numPrecedenceStates; j++) {\n      stateNumber = this.data[this.pos++];\n      atn.states[stateNumber].isLeftRecursiveRule = true;\n    }\n  }\n  readRules(atn) {\n    let i;\n    const ruleCount = this.data[this.pos++];\n    if (atn.grammarType === ATN.LEXER) {\n      atn.ruleToTokenType = new Array(ruleCount);\n      atn.ruleToTokenType.fill(0);\n    }\n    atn.ruleToStartState = new Array(ruleCount);\n    atn.ruleToStartState.fill(null);\n    for (i = 0; i < ruleCount; i++) {\n      const s = this.data[this.pos++];\n      atn.ruleToStartState[i] = atn.states[s];\n      if (atn.grammarType === ATN.LEXER) {\n        const tokenType = this.data[this.pos++];\n        atn.ruleToTokenType[i] = tokenType;\n      }\n    }\n    atn.ruleToStopState = new Array(ruleCount);\n    atn.ruleToStopState.fill(null);\n    for (i = 0; i < atn.states.length; i++) {\n      const state = atn.states[i];\n      if (!(state instanceof RuleStopState)) {\n        continue;\n      }\n      atn.ruleToStopState[state.ruleIndex] = state;\n      atn.ruleToStartState[state.ruleIndex].stopState = state;\n    }\n  }\n  readModes(atn) {\n    const modeCount = this.data[this.pos++];\n    for (let i = 0; i < modeCount; i++) {\n      const s = this.data[this.pos++];\n      atn.modeToStartState.push(atn.states[s]);\n    }\n  }\n  readSets(atn, sets) {\n    const m2 = this.data[this.pos++];\n    for (let i = 0; i < m2; i++) {\n      const intervalSet = new IntervalSet();\n      sets.push(intervalSet);\n      const n2 = this.data[this.pos++];\n      const containsEof = this.data[this.pos++];\n      if (containsEof !== 0) {\n        intervalSet.addOne(-1);\n      }\n      for (let j = 0; j < n2; j++) {\n        const i1 = this.data[this.pos++];\n        const i2 = this.data[this.pos++];\n        intervalSet.addRange(i1, i2);\n      }\n    }\n  }\n  readEdges(atn, sets) {\n    let i;\n    let j;\n    let state;\n    let trans;\n    let target;\n    const edgeCount = this.data[this.pos++];\n    for (i = 0; i < edgeCount; i++) {\n      const src = this.data[this.pos++];\n      const trg = this.data[this.pos++];\n      const ttype = this.data[this.pos++];\n      const arg1 = this.data[this.pos++];\n      const arg2 = this.data[this.pos++];\n      const arg3 = this.data[this.pos++];\n      trans = this.edgeFactory(atn, ttype, trg, arg1, arg2, arg3, sets);\n      const srcState = atn.states[src];\n      srcState.addTransition(trans);\n    }\n    for (i = 0; i < atn.states.length; i++) {\n      state = atn.states[i];\n      for (j = 0; j < state.transitions.length; j++) {\n        const t = state.transitions[j];\n        if (!(t instanceof RuleTransition)) {\n          continue;\n        }\n        let outermostPrecedenceReturn = -1;\n        if (atn.ruleToStartState[t.target.ruleIndex].isLeftRecursiveRule) {\n          if (t.precedence === 0) {\n            outermostPrecedenceReturn = t.target.ruleIndex;\n          }\n        }\n        trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n        atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n      }\n    }\n    for (i = 0; i < atn.states.length; i++) {\n      state = atn.states[i];\n      if (state instanceof BlockStartState) {\n        if (!state.endState) {\n          throw new Error(\"IllegalState\");\n        }\n        if (state.endState.startState) {\n          throw new Error(\"IllegalState\");\n        }\n        state.endState.startState = state;\n      }\n      if (state instanceof PlusLoopbackState) {\n        for (j = 0; j < state.transitions.length; j++) {\n          target = state.transitions[j].target;\n          if (target instanceof PlusBlockStartState) {\n            target.loopBackState = state;\n          }\n        }\n      } else if (state instanceof StarLoopbackState) {\n        for (j = 0; j < state.transitions.length; j++) {\n          target = state.transitions[j].target;\n          if (target instanceof StarLoopEntryState) {\n            target.loopBackState = state;\n          }\n        }\n      }\n    }\n  }\n  readDecisions(atn) {\n    const decisionCount = this.data[this.pos++];\n    for (let i = 0; i < decisionCount; i++) {\n      const s = this.data[this.pos++];\n      const decState = atn.states[s];\n      atn.decisionToState.push(decState);\n      decState.decision = i;\n    }\n  }\n  readLexerActions(atn) {\n    if (atn.grammarType === ATN.LEXER) {\n      const count = this.data[this.pos++];\n      atn.lexerActions = [];\n      for (let i = 0; i < count; i++) {\n        const actionType = this.data[this.pos++];\n        const data1 = this.data[this.pos++];\n        const data2 = this.data[this.pos++];\n        atn.lexerActions.push(this.lexerActionFactory(actionType, data1, data2));\n      }\n    }\n  }\n  generateRuleBypassTransitions(atn) {\n    let i;\n    const count = atn.ruleToStartState.length;\n    for (i = 0; i < count; i++) {\n      atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n    }\n    for (i = 0; i < count; i++) {\n      this.generateRuleBypassTransition(atn, i);\n    }\n  }\n  generateRuleBypassTransition(atn, idx) {\n    let i;\n    let state;\n    const bypassStart = new BasicBlockStartState();\n    bypassStart.ruleIndex = idx;\n    atn.addState(bypassStart);\n    const bypassStop = new BlockEndState();\n    bypassStop.ruleIndex = idx;\n    atn.addState(bypassStop);\n    bypassStart.endState = bypassStop;\n    atn.defineDecisionState(bypassStart);\n    bypassStop.startState = bypassStart;\n    let excludeTransition = null;\n    let endState = null;\n    if (atn.ruleToStartState[idx].isLeftRecursiveRule) {\n      endState = null;\n      for (i = 0; i < atn.states.length; i++) {\n        state = atn.states[i];\n        if (this.stateIsEndStateFor(state, idx)) {\n          endState = state;\n          excludeTransition = state.loopBackState.transitions[0];\n          break;\n        }\n      }\n      if (excludeTransition === null) {\n        throw new Error(\"Couldn't identify final state of the precedence rule prefix section.\");\n      }\n    } else {\n      endState = atn.ruleToStopState[idx];\n    }\n    for (i = 0; i < atn.states.length; i++) {\n      state = atn.states[i];\n      for (const transition of state.transitions) {\n        if (transition === excludeTransition) {\n          continue;\n        }\n        if (transition.target === endState) {\n          transition.target = bypassStop;\n        }\n      }\n    }\n    const ruleToStartState = atn.ruleToStartState[idx];\n    while (ruleToStartState.transitions.length > 0) {\n      const transition = ruleToStartState.removeTransition(ruleToStartState.transitions.length - 1);\n      bypassStart.addTransition(transition);\n    }\n    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n    if (endState) {\n      bypassStop.addTransition(new EpsilonTransition(endState));\n    }\n    const matchState = new BasicState();\n    atn.addState(matchState);\n    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n    bypassStart.addTransition(new EpsilonTransition(matchState));\n  }\n  stateIsEndStateFor(state, idx) {\n    if (state.ruleIndex !== idx) {\n      return null;\n    }\n    if (!(state instanceof StarLoopEntryState)) {\n      return null;\n    }\n    const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n    if (!(maybeLoopEndState instanceof LoopEndState)) {\n      return null;\n    }\n    if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n      return state;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n   * the {@link StarLoopEntryState} field to the correct value.\n   *\n   * @param atn The ATN.\n   */\n  markPrecedenceDecisions(atn) {\n    for (const state of atn.states) {\n      if (!(state instanceof StarLoopEntryState)) {\n        continue;\n      }\n      if (atn.ruleToStartState[state.ruleIndex].isLeftRecursiveRule) {\n        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n        if (maybeLoopEndState instanceof LoopEndState) {\n          if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n            state.precedenceRuleDecision = true;\n          }\n        }\n      }\n    }\n  }\n  verifyATN(atn) {\n    if (!this.deserializationOptions.verifyATN) {\n      return;\n    }\n    for (const state of atn.states) {\n      if (state === null) {\n        continue;\n      }\n      this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n      if (state instanceof PlusBlockStartState) {\n        this.checkCondition(state.loopBackState !== null);\n      } else if (state instanceof StarLoopEntryState) {\n        this.checkCondition(state.loopBackState !== null);\n        this.checkCondition(state.transitions.length === 2);\n        if (state.transitions[0].target instanceof StarBlockStartState) {\n          this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n          this.checkCondition(!state.nonGreedy);\n        } else if (state.transitions[0].target instanceof LoopEndState) {\n          this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n          this.checkCondition(state.nonGreedy);\n        } else {\n          throw new Error(\"IllegalState\");\n        }\n      } else if (state instanceof StarLoopbackState) {\n        this.checkCondition(state.transitions.length === 1);\n        this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n      } else if (state instanceof LoopEndState) {\n        this.checkCondition(state.loopBackState !== null);\n      } else if (state instanceof RuleStartState) {\n        this.checkCondition(state.stopState !== null);\n      } else if (state instanceof BlockStartState) {\n        this.checkCondition(state.endState !== null);\n      } else if (state instanceof BlockEndState) {\n        this.checkCondition(state.startState !== null);\n      } else if (state instanceof DecisionState) {\n        this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n      } else {\n        this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);\n      }\n    }\n  }\n  checkCondition(condition, message) {\n    if (!condition) {\n      if (message === void 0 || message === null) {\n        message = \"IllegalState\";\n      }\n      throw message;\n    }\n  }\n  edgeFactory(atn, type, trg, arg1, arg2, arg3, sets) {\n    const target = atn.states[trg];\n    switch (type) {\n      case Transition.EPSILON:\n        return new EpsilonTransition(target);\n      case Transition.RANGE:\n        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n      case Transition.RULE:\n        return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n      case Transition.PREDICATE:\n        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n      case Transition.PRECEDENCE:\n        return new PrecedencePredicateTransition(target, arg1);\n      case Transition.ATOM:\n        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n      case Transition.ACTION:\n        return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n      case Transition.SET:\n        return new SetTransition(target, sets[arg1]);\n      case Transition.NOT_SET:\n        return new NotSetTransition(target, sets[arg1]);\n      case Transition.WILDCARD:\n        return new WildcardTransition(target);\n      default:\n        throw new Error(\"The specified transition type: \" + type + \" is not valid.\");\n    }\n  }\n  stateFactory(type, ruleIndex) {\n    const ctor = _ATNDeserializer.stateTypeMapper.get(type);\n    if (!ctor) {\n      throw new Error(\"The specified state type \" + type + \" is not valid.\");\n    }\n    const s = new ctor();\n    s.ruleIndex = ruleIndex;\n    return s;\n  }\n  lexerActionFactory(type, data1, data2) {\n    const factory = _ATNDeserializer.lexerActionFactoryMapper.get(type);\n    if (!factory) {\n      throw new Error(\"The specified lexer action type \" + type + \" is not valid.\");\n    }\n    return factory(data1, data2);\n  }\n};\n\n// src/misc/OrderedHashMap.ts\nvar OrderedHashMap = class _OrderedHashMap extends HashMap {\n  static {\n    __name(this, \"OrderedHashMap\");\n  }\n  #keys = [];\n  clear() {\n    super.clear();\n    this.#keys = [];\n  }\n  get(key) {\n    return super.get(key);\n  }\n  set(key, value) {\n    const result = super.set(key, value);\n    if (result === void 0) {\n      this.#keys.push(key);\n    }\n    return result;\n  }\n  setIfAbsent(key, value) {\n    const result = super.setIfAbsent(key, value);\n    if (result === void 0) {\n      this.#keys.push(key);\n    }\n    return result;\n  }\n  /**\n   * @returns an iterable of the values in the map, in the order they were inserted.\n   */\n  values() {\n    return {\n      [Symbol.iterator]: () => {\n        let index = 0;\n        return {\n          next: /* @__PURE__ */ __name(() => {\n            if (index < this.#keys.length) {\n              return {\n                done: false,\n                value: super.get(this.#keys[index++])\n              };\n            }\n            return {\n              done: true,\n              value: void 0\n            };\n          }, \"next\")\n        };\n      }\n    };\n  }\n  /**\n   * @returns an iterable of the keys in the map, in the order they were inserted.\n   */\n  keys() {\n    return this.#keys[Symbol.iterator]();\n  }\n  equals(o) {\n    if (!(o instanceof _OrderedHashMap)) {\n      return false;\n    }\n    return super.equals(o);\n  }\n};\n\n// src/atn/ATNSerializer.ts\nvar ATNSerializer = class _ATNSerializer {\n  static {\n    __name(this, \"ATNSerializer\");\n  }\n  atn;\n  data = [];\n  // Note that we use a LinkedHashMap as a set to maintain insertion order while deduplicating entries with the\n  // same key.\n  sets = new OrderedHashMap(ObjectEqualityComparator.instance);\n  nonGreedyStates = [];\n  precedenceStates = [];\n  constructor(atn) {\n    this.atn = atn;\n  }\n  static getSerialized(atn) {\n    return new _ATNSerializer(atn).serialize();\n  }\n  static serializeSets(data, sets) {\n    data.push(sets.length);\n    for (const set of sets) {\n      const containsEof = set.contains(Token.EOF);\n      const intervals = [...set];\n      if (containsEof && intervals[0].stop === Token.EOF) {\n        data.push(intervals.length - 1);\n      } else {\n        data.push(intervals.length);\n      }\n      data.push(containsEof ? 1 : 0);\n      for (const interval of intervals) {\n        if (interval.start === Token.EOF) {\n          if (interval.stop === Token.EOF) {\n            continue;\n          } else {\n            data.push(0);\n          }\n        } else {\n          data.push(interval.start);\n        }\n        data.push(interval.stop);\n      }\n    }\n  }\n  /**\n   * Serialize state descriptors, edge descriptors, and decision -> state map\n   *  into list of ints.  Likely out of date, but keeping as it could be helpful:\n   *\n   *      SERIALIZED_VERSION\n   *      UUID (2 longs)\n   * \t\tgrammar-type, (ANTLRParser.LEXER, ...)\n   *  \tmax token type,\n   *  \tnum states,\n   *  \tstate-0-type ruleIndex, state-1-type ruleIndex, ... state-i-type ruleIndex optional-arg ...\n   *  \tnum rules,\n   *  \trule-1-start-state rule-1-args, rule-2-start-state  rule-2-args, ...\n   *  \t(args are token type,actionIndex in lexer else 0,0)\n   *      num modes,\n   *      mode-0-start-state, mode-1-start-state, ... (parser has 0 modes)\n   *      num unicode-bmp-sets\n   *      bmp-set-0-interval-count intervals, bmp-set-1-interval-count intervals, ...\n   *      num unicode-smp-sets\n   *      smp-set-0-interval-count intervals, smp-set-1-interval-count intervals, ...\n   *\tnum total edges,\n   *      src, trg, edge-type, edge arg1, optional edge arg2 (present always), ...\n   *      num decisions,\n   *      decision-0-start-state, decision-1-start-state, ...\n   *\n   *  Convenient to pack into unsigned shorts to make as Java string.\n   */\n  serialize() {\n    this.addPreamble();\n    const edgeCount = this.addEdges();\n    this.addNonGreedyStates();\n    this.addPrecedenceStates();\n    this.addRuleStatesAndLexerTokenTypes();\n    this.addModeStartStates();\n    const setIndices = this.addSets();\n    this.addEdges(edgeCount, setIndices);\n    this.addDecisionStartStates();\n    this.addLexerActions();\n    return this.data;\n  }\n  addPreamble() {\n    this.data.push(ATNDeserializer.SERIALIZED_VERSION);\n    this.data.push(this.atn.grammarType);\n    this.data.push(this.atn.maxTokenType);\n  }\n  addLexerActions() {\n    if (this.atn.grammarType === ATN.LEXER) {\n      this.data.push(this.atn.lexerActions.length);\n      for (const action of this.atn.lexerActions) {\n        this.data.push(action.actionType);\n        switch (action.actionType) {\n          case LexerActionType.CHANNEL: {\n            const channel = action.channel;\n            this.data.push(channel);\n            this.data.push(0);\n            break;\n          }\n          case LexerActionType.CUSTOM: {\n            const ruleIndex = action.ruleIndex;\n            const actionIndex = action.actionIndex;\n            this.data.push(ruleIndex);\n            this.data.push(actionIndex);\n            break;\n          }\n          case LexerActionType.MODE: {\n            const mode = action.mode;\n            this.data.push(mode);\n            this.data.push(0);\n            break;\n          }\n          case LexerActionType.MORE: {\n            this.data.push(0);\n            this.data.push(0);\n            break;\n          }\n          case LexerActionType.POP_MODE: {\n            this.data.push(0);\n            this.data.push(0);\n            break;\n          }\n          case LexerActionType.PUSH_MODE: {\n            const mode = action.mode;\n            this.data.push(mode);\n            this.data.push(0);\n            break;\n          }\n          case LexerActionType.SKIP: {\n            this.data.push(0);\n            this.data.push(0);\n            break;\n          }\n          case LexerActionType.TYPE: {\n            const type = action.type;\n            this.data.push(type);\n            this.data.push(0);\n            break;\n          }\n          default: {\n            throw new Error(`The specified lexer action type ${action.actionType} is not valid.`);\n          }\n        }\n      }\n    }\n  }\n  addDecisionStartStates() {\n    this.data.push(this.atn.decisionToState.length);\n    for (const decStartState of this.atn.decisionToState) {\n      this.data.push(decStartState.stateNumber);\n    }\n  }\n  addEdges(...args) {\n    switch (args.length) {\n      case 0: {\n        let edgeCount = 0;\n        this.data.push(this.atn.states.length);\n        for (const s of this.atn.states) {\n          if (s === null) {\n            this.data.push(ATNState.INVALID_TYPE);\n            continue;\n          }\n          const stateType = s.constructor.stateType;\n          if (s instanceof DecisionState && s.nonGreedy) {\n            this.nonGreedyStates.push(s.stateNumber);\n          }\n          if (s instanceof RuleStartState && s.isLeftRecursiveRule) {\n            this.precedenceStates.push(s.stateNumber);\n          }\n          this.data.push(stateType);\n          this.data.push(s.ruleIndex);\n          if (s.constructor.stateType === ATNState.LOOP_END) {\n            this.data.push(s.loopBackState.stateNumber);\n          } else {\n            if (s instanceof BlockStartState) {\n              this.data.push(s.endState.stateNumber);\n            }\n          }\n          if (s.constructor.stateType !== ATNState.RULE_STOP) {\n            edgeCount += s.transitions.length;\n          }\n          for (const t of s.transitions) {\n            const edgeType = t.transitionType;\n            if (edgeType === Transition.SET || edgeType === Transition.NOT_SET) {\n              const st = t;\n              this.sets.set(st.set, true);\n            }\n          }\n        }\n        return edgeCount;\n      }\n      case 2: {\n        const [edgeCount, setIndices] = args;\n        this.data.push(edgeCount);\n        for (const s of this.atn.states) {\n          if (s === null) {\n            continue;\n          }\n          if (s.constructor.stateType === ATNState.RULE_STOP) {\n            continue;\n          }\n          for (const t of s.transitions) {\n            if (this.atn.states[t.target.stateNumber] === null) {\n              throw new Error(\"Cannot serialize a transition to a removed state.\");\n            }\n            const src = s.stateNumber;\n            let trg = t.target.stateNumber;\n            const edgeType = t.transitionType;\n            let arg1 = 0;\n            let arg2 = 0;\n            let arg3 = 0;\n            switch (edgeType) {\n              case Transition.RULE: {\n                trg = t.followState.stateNumber;\n                arg1 = t.target.stateNumber;\n                arg2 = t.ruleIndex;\n                arg3 = t.precedence;\n                break;\n              }\n              case Transition.PRECEDENCE: {\n                const ppt = t;\n                arg1 = ppt.precedence;\n                break;\n              }\n              case Transition.PREDICATE: {\n                const pt = t;\n                arg1 = pt.ruleIndex;\n                arg2 = pt.predIndex;\n                arg3 = pt.isCtxDependent ? 1 : 0;\n                break;\n              }\n              case Transition.RANGE: {\n                arg1 = t.start;\n                arg2 = t.stop;\n                if (arg1 === Token.EOF) {\n                  arg1 = 0;\n                  arg3 = 1;\n                }\n                break;\n              }\n              case Transition.ATOM: {\n                arg1 = t.labelValue;\n                if (arg1 === Token.EOF) {\n                  arg1 = 0;\n                  arg3 = 1;\n                }\n                break;\n              }\n              case Transition.ACTION: {\n                const at = t;\n                arg1 = at.ruleIndex;\n                arg2 = at.actionIndex;\n                arg3 = at.isCtxDependent ? 1 : 0;\n                break;\n              }\n              case Transition.SET: {\n                arg1 = setIndices.get(t.set);\n                break;\n              }\n              case Transition.NOT_SET: {\n                arg1 = setIndices.get(t.set);\n                break;\n              }\n              case Transition.WILDCARD: {\n                break;\n              }\n              default:\n            }\n            this.data.push(src);\n            this.data.push(trg);\n            this.data.push(edgeType);\n            this.data.push(arg1);\n            this.data.push(arg2);\n            this.data.push(arg3);\n          }\n        }\n        break;\n      }\n      default: {\n        throw new Error(\"Invalid number of arguments\");\n      }\n    }\n  }\n  addSets() {\n    _ATNSerializer.serializeSets(this.data, [...this.sets.keys()]);\n    const setIndices = new HashMap();\n    let setIndex = 0;\n    for (const s of this.sets.keys()) {\n      setIndices.set(s, setIndex++);\n    }\n    return setIndices;\n  }\n  addModeStartStates() {\n    const modeCount = this.atn.modeToStartState.length;\n    this.data.push(modeCount);\n    if (modeCount > 0) {\n      for (const modeStartState of this.atn.modeToStartState) {\n        this.data.push(modeStartState.stateNumber);\n      }\n    }\n  }\n  addRuleStatesAndLexerTokenTypes() {\n    const ruleCount = this.atn.ruleToStartState.length;\n    this.data.push(ruleCount);\n    for (let r = 0; r < ruleCount; r++) {\n      const ruleStartState = this.atn.ruleToStartState[r];\n      this.data.push(ruleStartState.stateNumber);\n      if (this.atn.grammarType === ATN.LEXER) {\n        this.data.push(this.atn.ruleToTokenType[r]);\n      }\n    }\n  }\n  addPrecedenceStates() {\n    this.data.push(this.precedenceStates.length);\n    for (const state of this.precedenceStates) {\n      this.data.push(state);\n    }\n  }\n  addNonGreedyStates() {\n    this.data.push(this.nonGreedyStates.length);\n    for (const state of this.nonGreedyStates) {\n      this.data.push(state);\n    }\n  }\n};\n\n// src/dfa/DFAState.ts\nvar DFAState = class _DFAState {\n  static {\n    __name(this, \"DFAState\");\n  }\n  stateNumber = -1;\n  configs;\n  /**\n   * `edges[symbol]` points to target of symbol. Shift up by 1 so (-1) {@link Token.EOF} maps to `edges[0]`.\n   */\n  edges = [];\n  isAcceptState = false;\n  /**\n   * If accept state, what ttype do we match or alt do we predict? This is set to {@link ATN.INVALID_ALT_NUMBER}\n   * when {@link predicates} `!= null` or {@link requiresFullContext}.\n   */\n  prediction = -1;\n  lexerActionExecutor = null;\n  /**\n   * Indicates that this state was created during SLL prediction that discovered a conflict between the configurations\n   * in the state. Future {@link ParserATNSimulator.execATN} invocations immediately jumped doing\n   * full context prediction if this field is true.\n   */\n  requiresFullContext = false;\n  /**\n   * During SLL parsing, this is a list of predicates associated with the ATN configurations of the DFA state.\n   * When we have predicates, {@link requiresFullContext} is `false` since full context prediction evaluates\n   * predicates on-the-fly. If this is not null, then {@link prediction} is `ATN.INVALID_ALT_NUMBER`.\n   *\n   * We only use these for non-{@link #requiresFullContext} but conflicting states. That\n   * means we know from the context (it's $ or we don't dip into outer\n   * context) that it's an ambiguity not a conflict.\n   *\n   * This list is computed by {@link ParserATNSimulator#predicateDFAState}.\n   */\n  predicates = null;\n  constructor(configs) {\n    if (configs) {\n      this.configs = configs;\n    }\n  }\n  static fromState(stateNumber) {\n    const result = new _DFAState();\n    result.stateNumber = stateNumber;\n    return result;\n  }\n  static fromConfigs(configs) {\n    return new _DFAState(configs);\n  }\n  static hashCode(state) {\n    return state.configs.hashCode();\n  }\n  /**\n   * Two {@link DFAState} instances are equal if their ATN configuration sets\n   * are the same. This method is used to see if a state already exists.\n   *\n   * Because the number of alternatives and number of ATN configurations are\n   * finite, there is a finite number of DFA states that can be processed.\n   * This is necessary to show that the algorithm terminates.\n   *\n   * Cannot test the DFA state numbers here because in\n   * {@link ParserATNSimulator#addDFAState} we need to know if any other state\n   * exists that has this exact set of ATN configurations. The\n   * {@link #stateNumber} is irrelevant.\n   *\n   * @param a The first {@link DFAState}.\n   * @param b The second {@link DFAState}.\n   *\n   * @returns `true` if the two states are equal, otherwise `false`.\n   */\n  static equals(a, b) {\n    return a.configs.equals(b.configs);\n  }\n  /**\n   * @returns the set of all alts mentioned by all ATN configurations in this DFA state.\n   */\n  getAltSet() {\n    const alts = /* @__PURE__ */ new Set();\n    for (const config of this.configs) {\n      alts.add(config.alt);\n    }\n    if (alts.size === 0) {\n      return null;\n    }\n    return alts;\n  }\n  toString() {\n    let buf = \"\";\n    buf += this.stateNumber;\n    buf += \":\";\n    buf += this.configs ? this.configs.toString() : \"\";\n    if (this.isAcceptState) {\n      buf += \"=>\";\n      if (this.predicates) {\n        buf += arrayToString(this.predicates);\n      } else {\n        buf += this.prediction;\n      }\n    }\n    return buf.toString();\n  }\n};\n\n// src/atn/ATNSimulator.ts\nvar ATNSimulator = class {\n  static {\n    __name(this, \"ATNSimulator\");\n  }\n  /** Must distinguish between missing edge and edge we know leads nowhere */\n  static ERROR = DFAState.fromState(2147483647);\n  atn;\n  /**\n   * The context cache maps all PredictionContext objects that are ==\n   * to a single cached copy. This cache is shared across all contexts\n   * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n   * to use only cached nodes/graphs in addDFAState(). We don't want to\n   * fill this during closure() since there are lots of contexts that\n   * pop up but are not used ever again. It also greatly slows down closure().\n   *\n   * This cache makes a huge difference in memory and a little bit in speed.\n   * For the Java grammar on java.*, it dropped the memory requirements\n   * at the end from 25M to 16M. We don't store any of the full context\n   * graphs in the DFA because they are limited to local context only,\n   * but apparently there's a lot of repetition there as well. We optimize\n   * the config contexts before storing the config set in the DFA states\n   * by literally rebuilding them with cached subgraphs only.\n   *\n   * I tried a cache for use during closure operations, that was\n   * whacked after each adaptivePredict(). It cost a little bit\n   * more time I think and doesn't save on the overall footprint\n   * so it's not worth the complexity.\n   */\n  sharedContextCache;\n  constructor(atn, sharedContextCache) {\n    this.atn = atn;\n    this.sharedContextCache = sharedContextCache;\n    return this;\n  }\n  getCachedContext(context) {\n    if (!this.sharedContextCache) {\n      return context;\n    }\n    const visited = new HashMap(ObjectEqualityComparator.instance);\n    return getCachedPredictionContext(context, this.sharedContextCache, visited);\n  }\n};\n\n// src/atn/CodePointTransitions.ts\nvar CodePointTransitions = class _CodePointTransitions {\n  static {\n    __name(this, \"CodePointTransitions\");\n  }\n  /** @returns new {@link AtomTransition}     */\n  static createWithCodePoint(target, codePoint) {\n    return _CodePointTransitions.createWithCodePointRange(target, codePoint, codePoint);\n  }\n  /** @returns new {@link AtomTransition} if range represents one atom else {@link SetTransition}. */\n  static createWithCodePointRange(target, codePointFrom, codePointTo) {\n    return codePointFrom === codePointTo ? new AtomTransition(target, codePointFrom) : new RangeTransition(target, codePointFrom, codePointTo);\n  }\n};\n\n// src/atn/DecisionInfo.ts\nvar DecisionInfo = class {\n  static {\n    __name(this, \"DecisionInfo\");\n  }\n  /**\n   * The decision number, which is an index into {@link ATN.decisionToState}.\n   */\n  decision = 0;\n  /**\n   * The total number of times {@link ParserATNSimulator.adaptivePredict} was\n   * invoked for this decision.\n   */\n  invocations = 0;\n  /**\n   * The total time spent in {@link ParserATNSimulator.adaptivePredict} for\n   * this decision, in nanoseconds.\n   *\n   * The value of this field contains the sum of differential results obtained\n   * by {@link process.hrtime()}, and is not adjusted to compensate for JIT\n   * and/or garbage collection overhead. For best accuracy, use a modern Node.js\n   * version that provides precise results from {@link process.hrtime()}, and\n   * perform profiling in a separate process which is warmed up by parsing the\n   * input prior to profiling.\n   */\n  timeInPrediction = 0;\n  /**\n   * The sum of the lookahead required for SLL prediction for this decision.\n   * Note that SLL prediction is used before LL prediction for performance\n   * reasons even when {@link PredictionMode.LL} or\n   * {@link PredictionMode.LL_EXACT_AMBIG_DETECTION} is used.\n   */\n  sllTotalLook = 0;\n  /**\n   * Gets the minimum lookahead required for any single SLL prediction to\n   * complete for this decision, by reaching a unique prediction, reaching an\n   * SLL conflict state, or encountering a syntax error.\n   */\n  sllMinLook = 0;\n  /**\n   * Gets the maximum lookahead required for any single SLL prediction to\n   * complete for this decision, by reaching a unique prediction, reaching an\n   * SLL conflict state, or encountering a syntax error.\n   */\n  sllMaxLook = 0;\n  /**\n   * Gets the {@link LookaheadEventInfo} associated with the event where the\n   * {@link sllMaxLook} value was set.\n   */\n  sllMaxLookEvent;\n  /**\n   * The sum of the lookahead required for LL prediction for this decision.\n   * Note that LL prediction is only used when SLL prediction reaches a\n   * conflict state.\n   */\n  llTotalLook = 0;\n  /**\n   * Gets the minimum lookahead required for any single LL prediction to\n   * complete for this decision. An LL prediction completes when the algorithm\n   * reaches a unique prediction, a conflict state (for\n   * {@link PredictionMode.LL}, an ambiguity state (for\n   * {@link PredictionMode.LL_EXACT_AMBIG_DETECTION}, or a syntax error.\n   */\n  llMinLook = 0;\n  /**\n   * Gets the maximum lookahead required for any single LL prediction to\n   * complete for this decision. An LL prediction completes when the algorithm\n   * reaches a unique prediction, a conflict state (for\n   * {@link PredictionMode.LL}, an ambiguity state (for\n   * {@link PredictionMode.LL_EXACT_AMBIG_DETECTION}, or a syntax error.\n   */\n  llMaxLook = 0;\n  /**\n   * Gets the {@link LookaheadEventInfo} associated with the event where the\n   * {@link llMaxLook} value was set.\n   */\n  llMaxLookEvent;\n  /**\n   * A collection of {@link ContextSensitivityInfo} instances describing the\n   * context sensitivities encountered during LL prediction for this decision.\n   */\n  contextSensitivities;\n  /**\n   * A collection of {@link DecisionEventInfo} instances describing the parse errors\n   * identified during calls to {@link ParserATNSimulator.adaptivePredict} for\n   * this decision.\n   */\n  errors;\n  /**\n   * A collection of {@link AmbiguityInfo} instances describing the\n   * ambiguities encountered during LL prediction for this decision.\n   */\n  ambiguities;\n  /**\n   * A collection of {@link PredicateEvalInfo} instances describing the\n   * results of evaluating individual predicates during prediction for this\n   * decision.\n   */\n  predicateEvals;\n  /**\n   * The total number of ATN transitions required during SLL prediction for\n   * this decision. An ATN transition is determined by the number of times the\n   * DFA does not contain an edge that is required for prediction, resulting\n   * in on-the-fly computation of that edge.\n  /**\n   * If DFA caching of SLL transitions is employed by the implementation, ATN\n   * computation may cache the computed edge for efficient lookup during\n   * future parsing of this decision. Otherwise, the SLL parsing algorithm\n   * will use ATN transitions exclusively.\n   *\n   * @see sllDFATransitions\n   * @see ParserATNSimulator.computeTargetState\n   * @see LexerATNSimulator.computeTargetState\n   */\n  sllATNTransitions = 0;\n  /**\n   * The total number of DFA transitions required during SLL prediction for\n   * this decision.\n   *\n   * If the ATN simulator implementation does not use DFA caching for SLL\n   * transitions, this value will be 0.\n   *\n   * @see ParserATNSimulator.getExistingTargetState\n   * @see LexerATNSimulator.getExistingTargetState\n   */\n  sllDFATransitions = 0;\n  /**\n   * Gets the total number of times SLL prediction completed in a conflict\n   * state, resulting in fallback to LL prediction.\n   *\n   * Note that this value is not related to whether or not\n   * {@link PredictionMode.SLL} may be used successfully with a particular\n   * grammar. If the ambiguity resolution algorithm applied to the SLL\n   * conflicts for this decision produce the same result as LL prediction for\n   * this decision, {@link PredictionMode.SLL} would produce the same overall\n   * parsing result as {@link PredictionMode.LL}.\n   */\n  llFallback = 0;\n  /**\n   * The total number of ATN transitions required during LL prediction for\n   * this decision. An ATN transition is determined by the number of times the\n   * DFA does not contain an edge that is required for prediction, resulting\n   * in on-the-fly computation of that edge.\n   *\n   * If DFA caching of LL transitions is employed by the implementation, ATN\n   * computation may cache the computed edge for efficient lookup during\n   * future parsing of this decision. Otherwise, the LL parsing algorithm will\n   * use ATN transitions exclusively.\n   *\n   * @see llDFATransitions\n   * @see ParserATNSimulator.computeTargetState\n   * @see LexerATNSimulator.computeTargetState\n   */\n  llATNTransitions = 0;\n  /**\n   * The total number of DFA transitions required during LL prediction for\n   * this decision.\n   *\n   * If the ATN simulator implementation does not use DFA caching for LL\n   * transitions, this value will be 0.\n   *\n   * @see ParserATNSimulator.getExistingTargetState\n   * @see LexerATNSimulator.getExistingTargetState\n   */\n  llDFATransitions = 0;\n  /**\n   * Constructs a new instance of the {@link DecisionInfo} class to contain\n   * statistics for a particular decision.\n   *\n   * @param decision The decision number\n   */\n  constructor(decision) {\n    this.decision = decision;\n    this.contextSensitivities = [];\n    this.errors = [];\n    this.ambiguities = [];\n    this.predicateEvals = [];\n  }\n  toString() {\n    return \"{decision=\" + this.decision + \", contextSensitivities=\" + this.contextSensitivities.length + \", errors=\" + this.errors.length + \", ambiguities=\" + this.ambiguities.length + \", sllLookahead=\" + this.sllTotalLook + \", sllATNTransitions=\" + this.sllATNTransitions + \", sllDFATransitions=\" + this.sllDFATransitions + \", llFallback=\" + this.llFallback + \", llLookahead=\" + this.llTotalLook + \", llATNTransitions=\" + this.llATNTransitions + \"}\";\n  }\n};\n\n// src/atn/LexerATNConfig.ts\nvar LexerATNConfig = class _LexerATNConfig extends ATNConfig {\n  static {\n    __name(this, \"LexerATNConfig\");\n  }\n  /**\n   * This is the backing field for {@link #getLexerActionExecutor}.\n   */\n  lexerActionExecutor;\n  passedThroughNonGreedyDecision;\n  constructor(config, state, context, lexerActionExecutor) {\n    super(config, state, context ?? config.context, context ? SemanticContext.NONE : config.semanticContext);\n    this.lexerActionExecutor = context ? lexerActionExecutor : config.lexerActionExecutor ?? null;\n    this.passedThroughNonGreedyDecision = _LexerATNConfig.checkNonGreedyDecision(config, this.state);\n    return this;\n  }\n  static createWithExecutor(config, state, lexerActionExecutor) {\n    return new _LexerATNConfig(config, state, config.context, lexerActionExecutor);\n  }\n  static createWithConfig(state, config, context) {\n    return new _LexerATNConfig(config, state, context ?? null, config.lexerActionExecutor);\n  }\n  static createWithContext(state, alt, context) {\n    return new _LexerATNConfig({ alt }, state, context, null);\n  }\n  static checkNonGreedyDecision(source, target) {\n    return source.passedThroughNonGreedyDecision || \"nonGreedy\" in target && target.nonGreedy;\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hashCode = MurmurHash.initialize(7);\n      hashCode = MurmurHash.update(hashCode, this.state.stateNumber);\n      hashCode = MurmurHash.update(hashCode, this.alt);\n      hashCode = MurmurHash.updateFromComparable(hashCode, this.context);\n      hashCode = MurmurHash.updateFromComparable(hashCode, this.semanticContext);\n      hashCode = MurmurHash.update(hashCode, this.passedThroughNonGreedyDecision ? 1 : 0);\n      hashCode = MurmurHash.updateFromComparable(hashCode, this.lexerActionExecutor);\n      hashCode = MurmurHash.finish(hashCode, 6);\n      this.cachedHashCode = hashCode;\n    }\n    return this.cachedHashCode;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    return this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision && (this.lexerActionExecutor && other.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && super.equals(other);\n  }\n};\n\n// src/BaseErrorListener.ts\nvar BaseErrorListener = class {\n  static {\n    __name(this, \"BaseErrorListener\");\n  }\n  syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n  }\n  reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n  }\n  reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n  }\n  reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n  }\n};\n\n// src/ConsoleErrorListener.ts\nvar ConsoleErrorListener = class _ConsoleErrorListener extends BaseErrorListener {\n  static {\n    __name(this, \"ConsoleErrorListener\");\n  }\n  /**\n   * Provides a default instance of {@link ConsoleErrorListener}.\n   */\n  static instance = new _ConsoleErrorListener();\n  syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, _e) {\n    console.error(\"line \" + line + \":\" + charPositionInLine + \" \" + msg);\n  }\n};\n\n// src/ProxyErrorListener.ts\nvar ProxyErrorListener = class extends BaseErrorListener {\n  constructor(delegates) {\n    super();\n    this.delegates = delegates;\n    return this;\n  }\n  static {\n    __name(this, \"ProxyErrorListener\");\n  }\n  syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    this.delegates.forEach((d) => {\n      d.syntaxError(recognizer, offendingSymbol, line, column, msg, e);\n    });\n  }\n  reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    this.delegates.forEach((d) => {\n      d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n    });\n  }\n  reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    this.delegates.forEach((d) => {\n      d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs);\n    });\n  }\n  reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    this.delegates.forEach((d) => {\n      d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs);\n    });\n  }\n};\n\n// src/Recognizer.ts\nvar Recognizer = class _Recognizer {\n  static {\n    __name(this, \"Recognizer\");\n  }\n  static EOF = -1;\n  static tokenTypeMapCache = /* @__PURE__ */ new Map();\n  static ruleIndexMapCache = /* @__PURE__ */ new Map();\n  interpreter;\n  listeners = [ConsoleErrorListener.instance];\n  stateNumber = -1;\n  checkVersion(toolVersion) {\n    const runtimeVersion = \"4.13.1\";\n    if (runtimeVersion !== toolVersion) {\n      console.error(\"ANTLR runtime and generated code versions disagree: \" + runtimeVersion + \"!=\" + toolVersion);\n    }\n  }\n  addErrorListener(listener) {\n    this.listeners.push(listener);\n  }\n  removeErrorListeners() {\n    this.listeners = [];\n  }\n  removeErrorListener(listener) {\n    for (let i = 0; i < this.listeners.length; i++) {\n      if (this.listeners[i] === listener) {\n        this.listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n  getErrorListeners() {\n    return this.listeners;\n  }\n  getTokenTypeMap() {\n    const vocabulary = this.vocabulary;\n    let result = _Recognizer.tokenTypeMapCache.get(vocabulary);\n    if (!result) {\n      result = /* @__PURE__ */ new Map();\n      for (let i = 0; i <= this.atn.maxTokenType; i++) {\n        const literalName = vocabulary.getLiteralName(i);\n        if (literalName) {\n          result.set(literalName, i);\n        }\n        const symbolicName = vocabulary.getSymbolicName(i);\n        if (symbolicName) {\n          result.set(symbolicName, i);\n        }\n      }\n      result.set(\"EOF\", Token.EOF);\n      _Recognizer.tokenTypeMapCache.set(vocabulary, result);\n    }\n    return result;\n  }\n  /**\n   * Get a map from rule names to rule indexes.\n   * Used for XPath and tree pattern compilation.\n   */\n  getRuleIndexMap() {\n    const ruleNames = this.ruleNames;\n    let result = _Recognizer.ruleIndexMapCache.get(ruleNames);\n    if (!result) {\n      result = /* @__PURE__ */ new Map();\n      ruleNames.forEach((ruleName, idx) => {\n        return result.set(ruleName, idx);\n      });\n      _Recognizer.ruleIndexMapCache.set(ruleNames, result);\n    }\n    return result;\n  }\n  getTokenType(tokenName) {\n    const ttype = this.getTokenTypeMap().get(tokenName);\n    if (ttype) {\n      return ttype;\n    }\n    return Token.INVALID_TYPE;\n  }\n  /** What is the error header, normally line/character position information? */\n  getErrorHeader(e) {\n    const line = e.offendingToken?.line;\n    const column = e.offendingToken?.column;\n    return \"line \" + line + \":\" + column;\n  }\n  get errorListenerDispatch() {\n    return new ProxyErrorListener(this.listeners);\n  }\n  /**\n   * subclass needs to override these if there are semantic predicates or actions\n   * that the ATN interp needs to execute\n   */\n  sempred(_localctx, _ruleIndex, _actionIndex) {\n    return true;\n  }\n  // TODO: make localCtx an optional parameter, not optional null.\n  precpred(_localctx, _precedence) {\n    return true;\n  }\n  action(_localctx, _ruleIndex, _actionIndex) {\n  }\n  get atn() {\n    return this.interpreter.atn;\n  }\n  get state() {\n    return this.stateNumber;\n  }\n  set state(state) {\n    this.stateNumber = state;\n  }\n  getParseInfo() {\n    return void 0;\n  }\n};\n\n// src/CommonTokenFactory.ts\nvar CommonTokenFactory = class _CommonTokenFactory {\n  static {\n    __name(this, \"CommonTokenFactory\");\n  }\n  /**\n   * The default {@link CommonTokenFactory} instance.\n   *\n   *\n   * This token factory does not explicitly copy token text when constructing\n   * tokens.\n   */\n  static DEFAULT = new _CommonTokenFactory();\n  /**\n   * Indicates whether {@link CommonToken.setText} should be called after\n   * constructing tokens to explicitly set the text. This is useful for cases\n   * where the input stream might not be able to provide arbitrary substrings\n   * of text from the input after the lexer creates a token (e.g. the\n   * implementation of {@link CharStream.getText} in\n   * {@link UnbufferedCharStream} throws an\n   * {@link UnsupportedOperationException}). Explicitly setting the token text\n   * allows {@link Token.getText} to be called at any time regardless of the\n   * input stream implementation.\n   *\n   *\n   * The default value is `false` to avoid the performance and memory\n   * overhead of copying text for every token unless explicitly requested.\n   */\n  copyText = false;\n  constructor(copyText) {\n    this.copyText = copyText ?? false;\n  }\n  create(source, type, text, channel, start, stop, line, column) {\n    const t = CommonToken.fromSource(source, type, channel, start, stop);\n    t.line = line;\n    t.column = column;\n    if (text) {\n      t.text = text;\n    } else if (this.copyText && source[1] !== null) {\n      t.text = source[1].getTextFromRange(start, stop);\n    }\n    return t;\n  }\n};\n\n// src/RecognitionException.ts\nvar RecognitionException = class _RecognitionException extends Error {\n  static {\n    __name(this, \"RecognitionException\");\n  }\n  ctx;\n  /**\n   * The current {@link Token} when an error occurred. Since not all streams\n   * support accessing symbols by index, we have to track the {@link Token}\n   * instance itself\n   */\n  offendingToken = null;\n  /**\n   * Get the ATN state number the parser was in at the time the error\n   * occurred. For {@link NoViableAltException} and\n   * {@link LexerNoViableAltException} exceptions, this is the\n   * {@link DecisionState} number. For others, it is the state whose outgoing\n   * edge we couldn't match.\n   */\n  offendingState = -1;\n  recognizer;\n  input;\n  constructor(params) {\n    super(params.message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, _RecognitionException);\n    }\n    this.message = params.message;\n    this.recognizer = params.recognizer;\n    this.input = params.input;\n    this.ctx = params.ctx;\n    if (this.recognizer !== null) {\n      this.offendingState = this.recognizer.state;\n    }\n  }\n  /**\n   * Gets the set of input symbols which could potentially follow the\n   * previously matched symbol at the time this exception was thrown.\n   *\n   * If the set of expected tokens is not known and could not be computed,\n   * this method returns `null`.\n   *\n   * @returns The set of token types that could potentially follow the current\n   * state in the ATN, or `null` if the information is not available.\n   */\n  getExpectedTokens() {\n    if (this.recognizer !== null && this.ctx !== null) {\n      return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n    } else {\n      return null;\n    }\n  }\n  // If the state number is not known, this method returns -1.\n  toString() {\n    return this.message;\n  }\n};\n\n// src/LexerNoViableAltException.ts\nvar LexerNoViableAltException = class extends RecognitionException {\n  static {\n    __name(this, \"LexerNoViableAltException\");\n  }\n  startIndex;\n  deadEndConfigs;\n  constructor(lexer, input, startIndex, deadEndConfigs) {\n    super({ message: \"\", recognizer: lexer, input, ctx: null });\n    this.startIndex = startIndex;\n    this.deadEndConfigs = deadEndConfigs;\n  }\n  toString() {\n    let symbol = \"\";\n    if (this.input && this.startIndex >= 0 && this.startIndex < this.input.size) {\n      symbol = this.input.getTextFromRange(this.startIndex, this.startIndex);\n    }\n    return `LexerNoViableAltException(${symbol})`;\n  }\n};\n\n// src/Lexer.ts\nvar Lexer = class _Lexer extends Recognizer {\n  static {\n    __name(this, \"Lexer\");\n  }\n  static DEFAULT_MODE = 0;\n  static MORE = -2;\n  static SKIP = -3;\n  static DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\n  static HIDDEN = Token.HIDDEN_CHANNEL;\n  options = {\n    minDFAEdge: 0,\n    maxDFAEdge: 256,\n    minCodePoint: 0,\n    maxCodePoint: 1114111\n  };\n  /**\n   * What character index in the stream did the current token start at?\n   *  Needed, for example, to get the text for current token.  Set at\n   *  the start of nextToken.\n   */\n  tokenStartCharIndex = -1;\n  /** The channel number for the current token */\n  channel = 0;\n  /** The token type for the current token */\n  type = 0;\n  mode = _Lexer.DEFAULT_MODE;\n  /** The start column of the current token (the one that was last read by `nextToken`). */\n  currentTokenColumn = 0;\n  /**\n   * The line on which the first character of the current token (the one that was last read by `nextToken`) resides.\n   */\n  currentTokenStartLine = 0;\n  input;\n  /**\n   * The goal of all lexer rules/methods is to create a token object.\n   *  This is an instance variable as multiple rules may collaborate to\n   *  create a single token.  nextToken will return this object after\n   *  matching lexer rule(s).  If you subclass to allow multiple token\n   *  emissions, then set this to the last token to be matched or\n   *  something non-null so that the auto token emit mechanism will not\n   *  emit another token.\n   */\n  token = null;\n  /**\n   * Once we see EOF on char stream, next token will be EOF.\n   * If you have DONE : EOF ; then you see DONE EOF.\n   */\n  hitEOF = false;\n  factory;\n  #modeStack = [];\n  /**\n   * The text to be used for the next token. If this is not null, then the text\n   * for the next token is fixed and is not subject to change in the normal\n   * workflow of the lexer.\n   */\n  #text;\n  constructor(input, options) {\n    super();\n    this.options = { ...this.options, ...options };\n    this.input = input;\n    this.factory = CommonTokenFactory.DEFAULT;\n  }\n  reset(seekBack = true) {\n    if (seekBack) {\n      this.input.seek(0);\n    }\n    this.token = null;\n    this.type = Token.INVALID_TYPE;\n    this.channel = Token.DEFAULT_CHANNEL;\n    this.tokenStartCharIndex = -1;\n    this.currentTokenColumn = -1;\n    this.currentTokenStartLine = -1;\n    this.#text = void 0;\n    this.hitEOF = false;\n    this.mode = _Lexer.DEFAULT_MODE;\n    this.#modeStack = [];\n    this.interpreter.reset();\n  }\n  /** @returns a token from this source; i.e., match a token on the char stream. */\n  nextToken() {\n    if (this.input === null) {\n      throw new Error(\"nextToken requires a non-null input stream.\");\n    }\n    const tokenStartMarker = this.input.mark();\n    try {\n      while (true) {\n        if (this.hitEOF) {\n          this.emitEOF();\n          return this.token;\n        }\n        this.token = null;\n        this.channel = Token.DEFAULT_CHANNEL;\n        this.tokenStartCharIndex = this.input.index;\n        this.currentTokenColumn = this.interpreter.column;\n        this.currentTokenStartLine = this.interpreter.line;\n        this.#text = void 0;\n        let continueOuter = false;\n        while (true) {\n          this.type = Token.INVALID_TYPE;\n          let ttype = _Lexer.SKIP;\n          try {\n            ttype = this.interpreter.match(this.input, this.mode);\n          } catch (e) {\n            if (e instanceof LexerNoViableAltException) {\n              this.notifyListeners(e);\n              this.recover(e);\n            } else {\n              throw e;\n            }\n          }\n          if (this.input.LA(1) === Token.EOF) {\n            this.hitEOF = true;\n          }\n          if (this.type === Token.INVALID_TYPE) {\n            this.type = ttype;\n          }\n          if (this.type === _Lexer.SKIP) {\n            continueOuter = true;\n            break;\n          }\n          if (this.type !== _Lexer.MORE) {\n            break;\n          }\n        }\n        if (continueOuter) {\n          continue;\n        }\n        if (this.token === null) {\n          this.emit();\n        }\n        return this.token;\n      }\n    } finally {\n      this.input.release(tokenStartMarker);\n    }\n  }\n  /**\n   * Instruct the lexer to skip creating a token for current lexer rule\n   * and look for another token. nextToken() knows to keep looking when\n   * a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n   * if token==null at end of any token rule, it creates one for you\n   * and emits it.\n   */\n  skip() {\n    this.type = _Lexer.SKIP;\n  }\n  more() {\n    this.type = _Lexer.MORE;\n  }\n  pushMode(m2) {\n    if (LexerATNSimulator.debug) {\n      console.log(\"pushMode \" + m2);\n    }\n    this.#modeStack.push(this.mode);\n    this.mode = m2;\n  }\n  popMode() {\n    if (this.#modeStack.length === 0) {\n      throw new Error(\"Empty Stack\");\n    }\n    if (LexerATNSimulator.debug) {\n      console.log(\"popMode back to \" + this.#modeStack.slice(0, -1));\n    }\n    this.mode = this.#modeStack.pop();\n    return this.mode;\n  }\n  get modeStack() {\n    return this.#modeStack;\n  }\n  /**\n   * By default does not support multiple emits per nextToken invocation\n   * for efficiency reasons. Subclass and override this method, nextToken,\n   * and getToken (to push tokens into a list and pull from that list\n   * rather than a single variable as this implementation does).\n   */\n  emitToken(token) {\n    this.token = token;\n  }\n  /**\n   * The standard method called to automatically emit a token at the\n   * outermost lexical rule. The token object should point into the\n   * char buffer start..stop. If there is a text override in 'text',\n   * use that to set the token's text. Override this method to emit\n   * custom Token objects or provide a new factory.\n   */\n  emit() {\n    const t = this.factory.create(\n      [this, this.input],\n      this.type,\n      this.#text,\n      this.channel,\n      this.tokenStartCharIndex,\n      this.getCharIndex() - 1,\n      this.currentTokenStartLine,\n      this.currentTokenColumn\n    );\n    this.emitToken(t);\n    return t;\n  }\n  emitEOF() {\n    const eof = this.factory.create(\n      [this, this.input],\n      Token.EOF,\n      void 0,\n      Token.DEFAULT_CHANNEL,\n      this.input.index,\n      this.input.index - 1,\n      this.line,\n      this.column\n    );\n    this.emitToken(eof);\n    return eof;\n  }\n  /** What is the index of the current character of lookahead? */\n  getCharIndex() {\n    return this.input.index;\n  }\n  /**\n   * Return a list of all Token objects in input char stream.\n   * Forces load of all tokens. Does not include EOF token.\n   */\n  getAllTokens() {\n    const tokens = [];\n    let t = this.nextToken();\n    while (t.type !== Token.EOF) {\n      tokens.push(t);\n      t = this.nextToken();\n    }\n    return tokens;\n  }\n  notifyListeners(e) {\n    const start = this.tokenStartCharIndex;\n    const stop = this.input.index;\n    const text = this.input.getTextFromRange(start, stop);\n    const msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n    this.errorListenerDispatch.syntaxError(this, null, this.currentTokenStartLine, this.currentTokenColumn, msg, e);\n  }\n  getErrorDisplay(s) {\n    return s;\n  }\n  getErrorDisplayForChar(c) {\n    if (c.charCodeAt(0) === Token.EOF) {\n      return \"<EOF>\";\n    }\n    if (c === \"\\n\") {\n      return \"\\\\n\";\n    }\n    if (c === \"\t\") {\n      return \"\\\\t\";\n    }\n    if (c === \"\\r\") {\n      return \"\\\\r\";\n    }\n    return c;\n  }\n  getCharErrorDisplay(c) {\n    return \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n  }\n  /**\n   * Lexers can normally match any char in it's vocabulary after matching\n   * a token, so do the easy thing and just kill a character and hope\n   * it all works out. You can instead use the rule invocation stack\n   * to do sophisticated error recovery if you are in a fragment rule.\n   */\n  recover(re) {\n    if (this.input.LA(1) !== Token.EOF) {\n      if (re instanceof LexerNoViableAltException) {\n        this.interpreter.consume(this.input);\n      } else {\n        this.input.consume();\n      }\n    }\n  }\n  get inputStream() {\n    return this.input;\n  }\n  set inputStream(input) {\n    this.reset(false);\n    this.input = input;\n  }\n  set tokenFactory(factory) {\n    this.factory = factory;\n  }\n  get tokenFactory() {\n    return this.factory;\n  }\n  get sourceName() {\n    return this.input.getSourceName();\n  }\n  get line() {\n    return this.interpreter.line;\n  }\n  set line(line) {\n    this.interpreter.line = line;\n  }\n  get column() {\n    return this.interpreter.column;\n  }\n  set column(column) {\n    this.interpreter.column = column;\n  }\n  get text() {\n    if (this.#text) {\n      return this.#text;\n    } else {\n      return this.interpreter.getText(this.input);\n    }\n  }\n  set text(text) {\n    this.#text = text;\n  }\n};\n\n// src/dfa/DFASerializer.ts\nvar DFASerializer = class {\n  static {\n    __name(this, \"DFASerializer\");\n  }\n  dfa;\n  vocabulary;\n  constructor(dfa, vocabulary) {\n    this.dfa = dfa;\n    this.vocabulary = vocabulary;\n  }\n  toString() {\n    if (!this.dfa.s0) {\n      return \"\";\n    }\n    let buf = \"\";\n    const states = this.dfa.getStates();\n    for (const s of states) {\n      let n2 = 0;\n      n2 = s.edges.length;\n      for (let i = 0; i < n2; i++) {\n        const t = s.edges[i];\n        if (t && t.stateNumber !== 2147483647) {\n          buf += this.getStateString(s);\n          const label = this.getEdgeLabel(i);\n          buf += \"-\";\n          buf += label;\n          buf += \"->\";\n          buf += this.getStateString(t);\n          buf += \"\\n\";\n        }\n      }\n    }\n    return buf;\n  }\n  getEdgeLabel(i) {\n    const name = this.vocabulary.getDisplayName(i - 1);\n    return `${name}`;\n  }\n  getStateString(s) {\n    const n2 = s.stateNumber;\n    const baseStateStr = (s.isAcceptState ? \":\" : \"\") + \"s\" + n2 + (s.requiresFullContext ? \"^\" : \"\");\n    if (s.isAcceptState) {\n      if (s.predicates !== null) {\n        return `${baseStateStr}=>${s.predicates.toString()}`;\n      }\n      return `${baseStateStr}=>${s.prediction}`;\n    } else {\n      return `${baseStateStr}`;\n    }\n  }\n};\n\n// src/dfa/LexerDFASerializer.ts\nvar LexerDFASerializer = class extends DFASerializer {\n  static {\n    __name(this, \"LexerDFASerializer\");\n  }\n  constructor(dfa) {\n    super(dfa, Vocabulary.EMPTY_VOCABULARY);\n  }\n  getEdgeLabel = /* @__PURE__ */ __name((i) => {\n    return \"'\" + String.fromCharCode(i) + \"'\";\n  }, \"getEdgeLabel\");\n};\n\n// src/dfa/DFA.ts\nvar DFA = class {\n  static {\n    __name(this, \"DFA\");\n  }\n  s0;\n  decision;\n  /** From which ATN state did we create this DFA? */\n  atnStartState;\n  /**\n   * Gets whether this DFA is a precedence DFA. Precedence DFAs use a special\n   * start state {@link #s0} which is not stored in {@link #states}. The\n   * {@link DFAState#edges} array for this start state contains outgoing edges\n   * supplying individual start states corresponding to specific precedence\n   * values.\n   *\n   * @returns `true` if this is a precedence DFA; otherwise, `false`.\n   */\n  isPrecedenceDfa;\n  /**\n   * A mapping from an ATNConfigSet hash to a DFAState.\n   * Used to quick look up the DFA state for a particular configuration set.\n   */\n  states = /* @__PURE__ */ new Map();\n  constructor(atnStartState, decision) {\n    this.atnStartState = atnStartState;\n    this.decision = decision ?? 0;\n    let precedenceDfa = false;\n    if (atnStartState instanceof StarLoopEntryState) {\n      if (atnStartState.precedenceRuleDecision) {\n        precedenceDfa = true;\n        this.s0 = DFAState.fromState(-1);\n      }\n    }\n    this.isPrecedenceDfa = precedenceDfa;\n  }\n  [Symbol.iterator] = () => {\n    return this.states.values()[Symbol.iterator]();\n  };\n  /**\n   * Get the start state for a specific precedence value.\n   *\n   * @param precedence The current precedence.\n    @returns The start state corresponding to the specified precedence, or\n   * `null` if no start state exists for the specified precedence.\n   *\n   * @throws IllegalStateException if this is not a precedence DFA.\n   * @see #isPrecedenceDfa\n   */\n  getPrecedenceStartState = /* @__PURE__ */ __name((precedence) => {\n    if (!this.isPrecedenceDfa) {\n      throw new Error(`Only precedence DFAs may contain a precedence start state.`);\n    }\n    if (!this.s0 || !this.s0.edges || precedence < 0 || precedence >= this.s0.edges.length) {\n      return void 0;\n    }\n    return this.s0.edges[precedence];\n  }, \"getPrecedenceStartState\");\n  /**\n   * Set the start state for a specific precedence value.\n   *\n   * @param precedence The current precedence.\n   * @param startState The start state corresponding to the specified precedence.\n   */\n  setPrecedenceStartState = /* @__PURE__ */ __name((precedence, startState) => {\n    if (!this.isPrecedenceDfa) {\n      throw new Error(`Only precedence DFAs may contain a precedence start state.`);\n    }\n    if (precedence < 0 || !this.s0) {\n      return;\n    }\n    this.s0.edges[precedence] = startState;\n  }, \"setPrecedenceStartState\");\n  /**\n   * @returns a list of all states in this DFA, ordered by state number.\n   */\n  getStates() {\n    const result = [...this.states.values()];\n    result.sort((o1, o2) => {\n      return o1.stateNumber - o2.stateNumber;\n    });\n    return result;\n  }\n  getState(state) {\n    return this.states.get(state.configs.hashCode()) ?? null;\n  }\n  getStateForConfigs(configs) {\n    return this.states.get(configs.hashCode()) ?? null;\n  }\n  addState(state) {\n    const hash = state.configs.hashCode();\n    if (this.states.has(hash)) {\n      return;\n    }\n    this.states.set(hash, state);\n    state.stateNumber = this.states.size - 1;\n  }\n  toString(vocabulary) {\n    if (!vocabulary) {\n      return this.toString(Vocabulary.EMPTY_VOCABULARY);\n    }\n    if (!this.s0) {\n      return \"\";\n    }\n    const serializer = new DFASerializer(this, vocabulary);\n    return serializer.toString() ?? \"\";\n  }\n  toLexerString() {\n    if (!this.s0) {\n      return \"\";\n    }\n    const serializer = new LexerDFASerializer(this);\n    return serializer.toString() ?? \"\";\n  }\n  get length() {\n    return this.states.size;\n  }\n};\n\n// src/atn/LexerIndexedCustomAction.ts\nvar LexerIndexedCustomAction = class _LexerIndexedCustomAction {\n  static {\n    __name(this, \"LexerIndexedCustomAction\");\n  }\n  offset;\n  action;\n  actionType;\n  isPositionDependent = true;\n  cachedHashCode;\n  constructor(offset, action) {\n    this.actionType = action.actionType;\n    this.offset = offset;\n    this.action = action;\n  }\n  /**\n   * This method calls {@link execute} on the result of {@link getAction}\n   * using the provided `lexer`.\n   */\n  execute(lexer) {\n    this.action.execute(lexer);\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hash = MurmurHash.initialize();\n      hash = MurmurHash.update(hash, this.offset);\n      hash = MurmurHash.updateFromComparable(hash, this.action);\n      this.cachedHashCode = MurmurHash.finish(hash, 2);\n    }\n    return this.cachedHashCode;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof _LexerIndexedCustomAction)) {\n      return false;\n    }\n    return this.offset === other.offset && this.action === other.action;\n  }\n};\n\n// src/atn/LexerActionExecutor.ts\nvar LexerActionExecutor = class _LexerActionExecutor {\n  static {\n    __name(this, \"LexerActionExecutor\");\n  }\n  lexerActions;\n  actionType;\n  isPositionDependent = false;\n  cachedHashCode;\n  /**\n   * Represents an executor for a sequence of lexer actions which traversed during\n   * the matching operation of a lexer rule (token).\n   *\n   * The executor tracks position information for position-dependent lexer actions\n   * efficiently, ensuring that actions appearing only at the end of the rule do\n   * not cause bloating of the {@link DFA} created for the lexer.\n   */\n  constructor(lexerActions) {\n    this.actionType = -1;\n    this.lexerActions = lexerActions ?? [];\n    return this;\n  }\n  /**\n   * Creates a {@link LexerActionExecutor} which executes the actions for\n   * the input `lexerActionExecutor` followed by a specified\n   * `lexerAction`.\n   *\n   * @param lexerActionExecutor The executor for actions already traversed by\n   * the lexer while matching a token within a particular\n   * {@link LexerATNConfig}. If this is `null`, the method behaves as\n   * though it were an empty executor.\n   * @param lexerAction The lexer action to execute after the actions\n   * specified in `lexerActionExecutor`.\n   *\n   * @returns {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions\n   * of `lexerActionExecutor` and `lexerAction`.\n   */\n  static append(lexerActionExecutor, lexerAction) {\n    if (lexerActionExecutor === null) {\n      return new _LexerActionExecutor([lexerAction]);\n    }\n    const lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);\n    return new _LexerActionExecutor(lexerActions);\n  }\n  /**\n   * Creates a {@link LexerActionExecutor} which encodes the current offset\n   * for position-dependent lexer actions.\n   *\n   * Normally, when the executor encounters lexer actions where\n   * {@link LexerAction//isPositionDependent} returns `true`, it calls\n   * {@link IntStream.seek} on the input {@link CharStream} to set the input\n   * position to the *end* of the current token. This behavior provides\n   * for efficient DFA representation of lexer actions which appear at the end\n   * of a lexer rule, even when the lexer rule matches a variable number of\n   * characters.\n   *\n   * Prior to traversing a match transition in the ATN, the current offset\n   * from the token start index is assigned to all position-dependent lexer\n   * actions which have not already been assigned a fixed offset. By storing\n   * the offsets relative to the token start index, the DFA representation of\n   * lexer actions which appear in the middle of tokens remains efficient due\n   * to sharing among tokens of the same length, regardless of their absolute\n   * position in the input stream.\n   *\n   * If the current executor already has offsets assigned to all\n   * position-dependent lexer actions, the method returns `this`.\n   *\n   * @param offset The current offset to assign to all position-dependent\n   * lexer actions which do not already have offsets assigned.\n   *\n   * @returns {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets\n   * for all position-dependent lexer actions.\n   */\n  fixOffsetBeforeMatch(offset) {\n    let updatedLexerActions = null;\n    for (let i = 0; i < this.lexerActions.length; i++) {\n      if (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n        if (updatedLexerActions === null) {\n          updatedLexerActions = this.lexerActions.concat([]);\n        }\n        updatedLexerActions[i] = new LexerIndexedCustomAction(\n          offset,\n          this.lexerActions[i]\n        );\n      }\n    }\n    if (updatedLexerActions === null) {\n      return this;\n    } else {\n      return new _LexerActionExecutor(updatedLexerActions);\n    }\n  }\n  /**\n   * Execute the actions encapsulated by this executor within the context of a\n   * particular {@link Lexer}.\n   *\n   * This method calls {@link IntStream.seek} to set the position of the\n   * `input` {@link CharStream} prior to calling\n   * {@link LexerAction.execute} on a position-dependent action. Before the\n   * method returns, the input position will be restored to the same position\n   * it was in when the method was invoked.\n   *\n   * @param lexer The lexer instance.\n   * @param input The input stream which is the source for the current token.\n   * When this method is called, the current {@link IntStream.index} for\n   * `input` should be the start of the following token, i.e. 1\n   * character past the end of the current token.\n   * @param startIndex The token start index. This value may be passed to\n   * {@link IntStream.seek} to set the `input` position to the beginning\n   * of the token.\n   */\n  execute(lexer, input, startIndex) {\n    if (input === void 0 || startIndex === void 0) {\n      return;\n    }\n    let requiresSeek = false;\n    const stopIndex = input.index;\n    try {\n      for (const lexerAction of this.lexerActions) {\n        let action = lexerAction;\n        if (lexerAction instanceof LexerIndexedCustomAction) {\n          const offset = lexerAction.offset;\n          input.seek(startIndex + offset);\n          action = lexerAction.action;\n          requiresSeek = startIndex + offset !== stopIndex;\n        } else if (lexerAction.isPositionDependent) {\n          input.seek(stopIndex);\n          requiresSeek = false;\n        }\n        action.execute(lexer);\n      }\n    } finally {\n      if (requiresSeek) {\n        input.seek(stopIndex);\n      }\n    }\n  }\n  hashCode() {\n    if (this.cachedHashCode === void 0) {\n      let hashCode = MurmurHash.initialize(7);\n      for (const lexerAction of this.lexerActions) {\n        hashCode = MurmurHash.update(hashCode, lexerAction.hashCode());\n      }\n      this.cachedHashCode = MurmurHash.finish(hashCode, this.lexerActions.length);\n    }\n    return this.cachedHashCode;\n  }\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (this.cachedHashCode !== other.cachedHashCode) {\n      return false;\n    }\n    if (this.lexerActions.length !== other.lexerActions.length) {\n      return false;\n    }\n    return this.lexerActions.every((action, index) => {\n      return action.equals(other.lexerActions[index]);\n    });\n  }\n};\n\n// src/misc/OrderedHashSet.ts\nvar OrderedHashSet = class _OrderedHashSet extends HashSet {\n  static {\n    __name(this, \"OrderedHashSet\");\n  }\n  elements = [];\n  getOrAdd(o) {\n    const oldSize = this.size;\n    const result = super.getOrAdd(o);\n    if (this.size > oldSize) {\n      this.elements.push(o);\n    }\n    return result;\n  }\n  equals(o) {\n    if (!(o instanceof _OrderedHashSet)) {\n      return false;\n    }\n    return super.equals(o);\n  }\n  clear() {\n    super.clear();\n    this.elements = [];\n  }\n  *[Symbol.iterator]() {\n    yield* this.elements;\n  }\n  toArray() {\n    return this.elements.slice(0);\n  }\n};\n\n// src/atn/OrderedATNConfigSet.ts\nvar OrderedATNConfigSet = class extends ATNConfigSet {\n  static {\n    __name(this, \"OrderedATNConfigSet\");\n  }\n  constructor() {\n    super();\n    this.configLookup = new OrderedHashSet();\n  }\n};\n\n// src/atn/LexerATNSimulator.ts\nvar LexerATNSimulator = class _LexerATNSimulator extends ATNSimulator {\n  static {\n    __name(this, \"LexerATNSimulator\");\n  }\n  static debug = false;\n  decisionToDFA;\n  recognizer = null;\n  /**\n   * The current token's starting index into the character stream.\n   *  Shared across DFA to ATN simulation in case the ATN fails and the\n   *  DFA did not have a previous accept state. In this case, we use the\n   *  ATN-generated exception object.\n   */\n  startIndex = -1;\n  /** line number 1..n within the input */\n  line = 1;\n  /** The index of the character relative to the beginning of the line 0..n-1 */\n  column = 0;\n  mode = Lexer.DEFAULT_MODE;\n  /** Used during DFA/ATN exec to record the most recent accept configuration info */\n  prevAccept;\n  options;\n  /** Lookup table for lexer ATN config creation. */\n  lexerATNConfigFactory;\n  /**\n   * When we hit an accept state in either the DFA or the ATN, we\n   * have to notify the character stream to start buffering characters\n   * via {@link IntStream//mark} and record the current state. The current sim state\n   * includes the current index into the input, the current line,\n   * and current character position in that line. Note that the Lexer is\n   * tracking the starting line and characterization of the token. These\n   * variables track the \"state\" of the simulator when it hits an accept state.\n   *\n   * We track these variables separately for the DFA and ATN simulation\n   * because the DFA simulation often has to fail over to the ATN\n   * simulation. If the ATN simulation fails, we need the DFA to fall\n   * back to its previously accepted state, if any. If the ATN succeeds,\n   * then the ATN does the accept and the DFA simulator that invoked it\n   * can simply return the predicted token type.\n   */\n  constructor(recog, atn, decisionToDFA, sharedContextCache) {\n    super(atn, sharedContextCache);\n    this.decisionToDFA = decisionToDFA;\n    this.recognizer = recog;\n    if (recog) {\n      this.options = recog.options;\n    } else {\n      this.options = {\n        minDFAEdge: 0,\n        maxDFAEdge: 256,\n        minCodePoint: 0,\n        maxCodePoint: 1114111\n      };\n    }\n  }\n  match(input, mode) {\n    this.mode = mode;\n    const mark = input.mark();\n    try {\n      this.startIndex = input.index;\n      this.prevAccept = void 0;\n      const dfa = this.decisionToDFA[mode];\n      if (!dfa.s0) {\n        return this.matchATN(input);\n      }\n      return this.execATN(input, dfa.s0);\n    } finally {\n      input.release(mark);\n    }\n  }\n  reset() {\n    this.prevAccept = void 0;\n    this.startIndex = -1;\n    this.line = 1;\n    this.column = 0;\n    this.mode = Lexer.DEFAULT_MODE;\n  }\n  clearDFA() {\n    for (let d = 0; d < this.decisionToDFA.length; d++) {\n      this.decisionToDFA[d] = new DFA(this.atn.getDecisionState(d), d);\n    }\n  }\n  getDFA(mode) {\n    return this.decisionToDFA[mode];\n  }\n  /** @returns the text matched so far for the current token. */\n  getText(input) {\n    return input.getTextFromRange(this.startIndex, input.index - 1);\n  }\n  consume(input) {\n    const curChar = input.LA(1);\n    if (curChar === \"\\n\".charCodeAt(0)) {\n      this.line += 1;\n      this.column = 0;\n    } else {\n      this.column += 1;\n    }\n    input.consume();\n  }\n  getTokenName(tt) {\n    if (tt === Token.EOF) {\n      return \"EOF\";\n    } else {\n      return \"'\" + String.fromCharCode(tt) + \"'\";\n    }\n  }\n  matchATN(input) {\n    const startState = this.atn.modeToStartState[this.mode];\n    if (_LexerATNSimulator.debug) {\n      console.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n    }\n    const oldMode = this.mode;\n    const s0Closure = this.computeStartState(input, startState);\n    const suppressEdge = s0Closure.hasSemanticContext;\n    s0Closure.hasSemanticContext = false;\n    const next = this.addDFAState(s0Closure);\n    if (!suppressEdge) {\n      this.decisionToDFA[this.mode].s0 = next;\n    }\n    const predict = this.execATN(input, next);\n    if (_LexerATNSimulator.debug) {\n      console.log(\"DFA after matchATN: \" + this.decisionToDFA[oldMode].toLexerString());\n    }\n    return predict;\n  }\n  execATN(input, state) {\n    if (_LexerATNSimulator.debug) {\n      console.log(\"start state closure=\" + state.configs);\n    }\n    if (state.isAcceptState) {\n      this.captureSimState(input, state);\n    }\n    let t = input.LA(1);\n    while (true) {\n      if (_LexerATNSimulator.debug) {\n        console.log(\"execATN loop starting closure: \" + state.configs);\n      }\n      let target = this.getExistingTargetState(state, t);\n      if (!target) {\n        target = this.computeTargetState(input, state, t);\n      }\n      if (target === ATNSimulator.ERROR) {\n        break;\n      }\n      if (t !== Token.EOF) {\n        this.consume(input);\n      }\n      if (target.isAcceptState) {\n        this.captureSimState(input, target);\n        if (t === Token.EOF) {\n          break;\n        }\n      }\n      t = input.LA(1);\n      state = target;\n    }\n    return this.failOrAccept(input, state.configs, t);\n  }\n  /**\n   * Get an existing target state for an edge in the DFA. If the target state\n   * for the edge has not yet been computed or is otherwise not available,\n   * this method returns `null`.\n   *\n   * @param s The current DFA state.\n   * @param t The next input symbol.\n   *\n   * @returns The existing target DFA state for the given input symbol\n   * `t`, or `null` if the target state for this edge is not already cached\n   */\n  getExistingTargetState(s, t) {\n    if (t >= this.options.minDFAEdge && t <= this.options.maxDFAEdge) {\n      const target = s.edges[t - this.options.minDFAEdge];\n      if (_LexerATNSimulator.debug && target) {\n        console.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n      }\n      return target;\n    }\n    return void 0;\n  }\n  /**\n   * Compute a target state for an edge in the DFA, and attempt to add the computed state and corresponding\n   * edge to the DFA.\n   *\n   * @param input The input stream\n   * @param s The current DFA state\n   * @param t The next input symbol\n   *\n   * @returns The computed target DFA state for the given input symbol `t`.\n   *          If `t` does not lead to a valid DFA state, this method returns `ERROR`.\n   */\n  computeTargetState(input, s, t) {\n    const reach = new OrderedATNConfigSet();\n    this.getReachableConfigSet(input, s.configs, reach, t);\n    if (reach.length === 0) {\n      if (!reach.hasSemanticContext) {\n        this.addDFAEdge(s, t, ATNSimulator.ERROR);\n      }\n      return ATNSimulator.ERROR;\n    }\n    return this.addDFAEdge(s, t, null, reach);\n  }\n  failOrAccept(input, reach, t) {\n    if (this.prevAccept?.dfaState) {\n      const { dfaState, index, line, column } = this.prevAccept;\n      this.accept(input, dfaState.lexerActionExecutor, this.startIndex, index, line, column);\n      return dfaState.prediction;\n    }\n    if (t === Token.EOF && input.index === this.startIndex) {\n      return Token.EOF;\n    }\n    throw new LexerNoViableAltException(this.recognizer, input, this.startIndex, reach);\n  }\n  /**\n   * Given a starting configuration set, figure out all ATN configurations we can reach upon input `t`.\n   * Parameter `reach` is a return parameter.\n   */\n  getReachableConfigSet(input, closure, reach, t) {\n    let skipAlt = ATN.INVALID_ALT_NUMBER;\n    for (const cfg of closure) {\n      const currentAltReachedAcceptState = cfg.alt === skipAlt;\n      if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n        continue;\n      }\n      if (_LexerATNSimulator.debug) {\n        console.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg.toString(this.recognizer, true));\n      }\n      for (const trans of cfg.state.transitions) {\n        const target = this.getReachableTarget(trans, t);\n        if (target) {\n          let lexerActionExecutor = cfg.lexerActionExecutor;\n          if (lexerActionExecutor) {\n            lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n          }\n          const treatEofAsEpsilon = t === Token.EOF;\n          const config = LexerATNConfig.createWithExecutor(\n            cfg,\n            target,\n            lexerActionExecutor\n          );\n          if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n            skipAlt = cfg.alt;\n          }\n        }\n      }\n    }\n  }\n  accept(input, lexerActionExecutor, startIndex, index, line, charPos) {\n    if (_LexerATNSimulator.debug) {\n      console.log(\"ACTION %s\\n\", lexerActionExecutor);\n    }\n    input.seek(index);\n    this.line = line;\n    this.column = charPos;\n    if (lexerActionExecutor && this.recognizer) {\n      lexerActionExecutor.execute(this.recognizer, input, startIndex);\n    }\n  }\n  getReachableTarget(trans, t) {\n    if (trans.matches(t, this.options.minCodePoint, this.options.maxCodePoint)) {\n      return trans.target;\n    } else {\n      return void 0;\n    }\n  }\n  computeStartState(input, p) {\n    const initialContext = EmptyPredictionContext.instance;\n    const configs = new OrderedATNConfigSet();\n    for (let i = 0; i < p.transitions.length; i++) {\n      const target = p.transitions[i].target;\n      const cfg = LexerATNConfig.createWithContext(target, i + 1, initialContext);\n      this.closure(input, cfg, configs, false, false, false);\n    }\n    return configs;\n  }\n  /**\n   * Since the alternatives within any lexer decision are ordered by\n   * preference, this method stops pursuing the closure as soon as an accept\n   * state is reached. After the first accept state is reached by depth-first\n   * search from `config`, all other (potentially reachable) states for\n   * this rule would have a lower priority.\n   *\n   * @returns {boolean} `true` if an accept state is reached, otherwise `false`.\n   */\n  closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n    let cfg = null;\n    if (_LexerATNSimulator.debug) {\n      console.log(\"closure(\" + config.toString(this.recognizer, true) + \")\");\n    }\n    if (config.state.constructor.stateType === ATNState.RULE_STOP) {\n      if (_LexerATNSimulator.debug) {\n        if (this.recognizer !== null) {\n          console.log(\n            \"closure at %s rule stop %s\\n\",\n            this.recognizer.ruleNames[config.state.ruleIndex],\n            config\n          );\n        } else {\n          console.log(\"closure at rule stop %s\\n\", config);\n        }\n      }\n      if (!config.context || config.context.hasEmptyPath()) {\n        if (!config.context || config.context.isEmpty()) {\n          configs.add(config);\n          return true;\n        } else {\n          configs.add(LexerATNConfig.createWithConfig(config.state, config, EmptyPredictionContext.instance));\n          currentAltReachedAcceptState = true;\n        }\n      }\n      if (config.context && !config.context.isEmpty()) {\n        for (let i = 0; i < config.context.length; i++) {\n          if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n            const newContext = config.context.getParent(i);\n            const returnState = this.atn.states[config.context.getReturnState(i)];\n            cfg = LexerATNConfig.createWithConfig(returnState, config, newContext);\n            currentAltReachedAcceptState = this.closure(\n              input,\n              cfg,\n              configs,\n              currentAltReachedAcceptState,\n              speculative,\n              treatEofAsEpsilon\n            );\n          }\n        }\n      }\n      return currentAltReachedAcceptState;\n    }\n    if (!config.state.epsilonOnlyTransitions) {\n      if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n        configs.add(config);\n      }\n    }\n    for (const trans of config.state.transitions) {\n      cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n      if (cfg) {\n        currentAltReachedAcceptState = this.closure(\n          input,\n          cfg,\n          configs,\n          currentAltReachedAcceptState,\n          speculative,\n          treatEofAsEpsilon\n        );\n      }\n    }\n    return currentAltReachedAcceptState;\n  }\n  // side-effect: can alter configs.hasSemanticContext\n  getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon) {\n    if (!this.lexerATNConfigFactory) {\n      this.setupATNFactoryLookup();\n    }\n    const factory = this.lexerATNConfigFactory[trans.transitionType];\n    if (!factory) {\n      return null;\n    }\n    return factory(input, config, trans, configs, speculative, treatEofAsEpsilon);\n  }\n  /**\n   * Fills the lookup table for creating lexer ATN configs. This helps to avoid frequent checks of the transition\n   * type, which determines the configuration of the created config.\n   */\n  setupATNFactoryLookup() {\n    this.lexerATNConfigFactory = [];\n    this.lexerATNConfigFactory[Transition.RULE] = (input, config, trans) => {\n      const newContext = createSingletonPredictionContext(\n        config.context ?? void 0,\n        trans.followState.stateNumber\n      );\n      return LexerATNConfig.createWithConfig(trans.target, config, newContext);\n    };\n    this.lexerATNConfigFactory[Transition.PRECEDENCE] = () => {\n      throw new Error(\"Precedence predicates are not supported in lexers.\");\n    };\n    this.lexerATNConfigFactory[Transition.PREDICATE] = (input, config, trans, configs, speculative) => {\n      const pt = trans;\n      if (_LexerATNSimulator.debug) {\n        console.log(\"EVAL rule \" + pt.ruleIndex + \":\" + pt.predIndex);\n      }\n      configs.hasSemanticContext = true;\n      if (this.evaluatePredicate(input, pt.ruleIndex, pt.predIndex, speculative)) {\n        return LexerATNConfig.createWithConfig(trans.target, config);\n      }\n      return null;\n    };\n    this.lexerATNConfigFactory[Transition.ACTION] = (input, config, trans) => {\n      if (config.context === null || config.context.hasEmptyPath()) {\n        const lexerActionExecutor = LexerActionExecutor.append(\n          config.lexerActionExecutor,\n          this.atn.lexerActions[trans.actionIndex]\n        );\n        return LexerATNConfig.createWithExecutor(config, trans.target, lexerActionExecutor);\n      } else {\n        return LexerATNConfig.createWithConfig(trans.target, config);\n      }\n    };\n    this.lexerATNConfigFactory[Transition.EPSILON] = (input, config, trans) => {\n      return LexerATNConfig.createWithConfig(trans.target, config);\n    };\n    const simple = /* @__PURE__ */ __name((input, config, trans, configs, speculative, treatEofAsEpsilon) => {\n      if (treatEofAsEpsilon) {\n        if (trans.matches(Token.EOF, this.options.minCodePoint, this.options.maxCodePoint)) {\n          return LexerATNConfig.createWithConfig(trans.target, config);\n        }\n      }\n      return null;\n    }, \"simple\");\n    this.lexerATNConfigFactory[Transition.ATOM] = simple;\n    this.lexerATNConfigFactory[Transition.RANGE] = simple;\n    this.lexerATNConfigFactory[Transition.SET] = simple;\n  }\n  /**\n   * Evaluate a predicate specified in the lexer.\n   *\n   * If `speculative` is `true`, this method was called before\n   * {@link consume} for the matched character. This method should call\n   * {@link consume} before evaluating the predicate to ensure position\n   * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n   * and {@link Lexer}, properly reflect the current\n   * lexer state. This method should restore `input` and the simulator\n   * to the original state before returning (i.e. undo the actions made by the\n   * call to {@link consume}.\n   *\n   * @param input The input stream.\n   * @param ruleIndex The rule containing the predicate.\n   * @param predIndex The index of the predicate within the rule.\n   * @param speculative `true` if the current index in `input` is\n   * one character before the predicate's location.\n   *\n   * @returns `true` if the specified predicate evaluates to\n   * `true`.\n   */\n  evaluatePredicate(input, ruleIndex, predIndex, speculative) {\n    if (!this.recognizer) {\n      return true;\n    }\n    if (!speculative) {\n      return this.recognizer.sempred(null, ruleIndex, predIndex);\n    }\n    const savedColumn = this.column;\n    const savedLine = this.line;\n    const index = input.index;\n    const marker = input.mark();\n    try {\n      this.consume(input);\n      return this.recognizer.sempred(null, ruleIndex, predIndex);\n    } finally {\n      this.column = savedColumn;\n      this.line = savedLine;\n      input.seek(index);\n      input.release(marker);\n    }\n  }\n  captureSimState(input, dfaState) {\n    this.prevAccept = {\n      index: input.index,\n      line: this.line,\n      column: this.column,\n      dfaState\n    };\n  }\n  addDFAEdge(from, tk, to, configs) {\n    if (!to && configs) {\n      const suppressEdge = configs.hasSemanticContext;\n      configs.hasSemanticContext = false;\n      to = this.addDFAState(configs);\n      if (suppressEdge) {\n        return to;\n      }\n    }\n    if (tk < this.options.minDFAEdge || tk > this.options.maxDFAEdge) {\n      return to;\n    }\n    if (_LexerATNSimulator.debug) {\n      console.log(\"EDGE \" + from + \" -> \" + to + \" upon \" + tk);\n    }\n    from.edges[tk - this.options.minDFAEdge] = to;\n    return to;\n  }\n  /**\n   * Add a new DFA state if there isn't one with this set of configurations already. This method also detects\n   * the first configuration containing an ATN rule stop state. Later, when traversing the DFA, we will know\n   * which rule to accept.\n   */\n  addDFAState(configs) {\n    const dfa = this.decisionToDFA[this.mode];\n    const existing = dfa.getStateForConfigs(configs);\n    if (existing) {\n      return existing;\n    }\n    const proposed = DFAState.fromConfigs(configs);\n    const firstConfigWithRuleStopState = configs.firstStopState;\n    if (firstConfigWithRuleStopState) {\n      proposed.isAcceptState = true;\n      proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n      proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n    }\n    configs.setReadonly(true);\n    dfa.addState(proposed);\n    return proposed;\n  }\n};\n\n// src/atn/ParseInfo.ts\nvar ParseInfo = class {\n  static {\n    __name(this, \"ParseInfo\");\n  }\n  atnSimulator;\n  constructor(atnSimulator) {\n    this.atnSimulator = atnSimulator;\n  }\n  /**\n   * Gets an array of {@link DecisionInfo} instances containing the profiling\n   * information gathered for each decision in the ATN.\n   *\n   * @returns An array of {@link DecisionInfo} instances, indexed by decision\n   * number.\n   */\n  getDecisionInfo() {\n    return this.atnSimulator.getDecisionInfo();\n  }\n  /**\n   * Gets the decision numbers for decisions that required one or more\n   * full-context predictions during parsing. These are decisions for which\n   * {@link DecisionInfo#llFallback} is non-zero.\n   *\n   * @returns A list of decision numbers which required one or more\n   * full-context predictions during parsing.\n   */\n  getLLDecisions() {\n    const decisions = this.atnSimulator.getDecisionInfo();\n    const result = new Array();\n    for (let i = 0; i < decisions.length; i++) {\n      const fallBack = decisions[i].llFallback;\n      if (fallBack > 0) {\n        result.push(i);\n      }\n    }\n    return result;\n  }\n  /**\n   * Gets the total time spent during prediction across all decisions made\n   * during parsing. This value is the sum of\n   * {@link DecisionInfo#timeInPrediction} for all decisions.\n   */\n  getTotalTimeInPrediction() {\n    const decisions = this.atnSimulator.getDecisionInfo();\n    let t = 0;\n    for (const decision of decisions) {\n      t += decision.timeInPrediction;\n    }\n    return t;\n  }\n  /**\n   * Gets the total number of SLL lookahead operations across all decisions\n   * made during parsing. This value is the sum of\n   * {@link DecisionInfo#sllTotalLook} for all decisions.\n   */\n  getTotalSLLLookaheadOps() {\n    const decisions = this.atnSimulator.getDecisionInfo();\n    let k = 0;\n    for (const decision of decisions) {\n      k += decision.sllTotalLook;\n    }\n    return k;\n  }\n  /**\n   * Gets the total number of LL lookahead operations across all decisions\n   * made during parsing. This value is the sum of\n   * {@link DecisionInfo#llTotalLook} for all decisions.\n   */\n  getTotalLLLookaheadOps() {\n    const decisions = this.atnSimulator.getDecisionInfo();\n    let k = 0;\n    for (const decision of decisions) {\n      k += decision.llTotalLook;\n    }\n    return k;\n  }\n  /**\n   * Gets the total number of ATN lookahead operations for SLL prediction\n   * across all decisions made during parsing.\n   */\n  getTotalSLLATNLookaheadOps() {\n    const decisions = this.atnSimulator.getDecisionInfo();\n    let k = 0;\n    for (const decision of decisions) {\n      k += decision.sllATNTransitions;\n    }\n    return k;\n  }\n  /**\n   * Gets the total number of ATN lookahead operations for LL prediction\n   * across all decisions made during parsing.\n   */\n  getTotalLLATNLookaheadOps() {\n    const decisions = this.atnSimulator.getDecisionInfo();\n    let k = 0;\n    for (const decision of decisions) {\n      k += decision.llATNTransitions;\n    }\n    return k;\n  }\n  /**\n   * Gets the total number of ATN lookahead operations for SLL and LL\n   * prediction across all decisions made during parsing.\n   *\n   *\n   * This value is the sum of {@link #getTotalSLLATNLookaheadOps} and\n   * {@link #getTotalLLATNLookaheadOps}.\n   */\n  getTotalATNLookaheadOps() {\n    const decisions = this.atnSimulator.getDecisionInfo();\n    let k = 0;\n    for (const decision of decisions) {\n      k += decision.sllATNTransitions;\n      k += decision.llATNTransitions;\n    }\n    return k;\n  }\n  getDFASize(decision) {\n    if (decision === void 0) {\n      let n2 = 0;\n      const decisionToDFA = this.atnSimulator.decisionToDFA;\n      for (let i = 0; i < decisionToDFA.length; i++) {\n        n2 += this.getDFASize(i);\n      }\n      return n2;\n    } else {\n      const decisionToDFA = this.atnSimulator.decisionToDFA[decision];\n      return decisionToDFA.length;\n    }\n  }\n};\n\n// src/NoViableAltException.ts\nvar NoViableAltException = class extends RecognitionException {\n  static {\n    __name(this, \"NoViableAltException\");\n  }\n  /** Which configurations did we try at input.index() that couldn't match input.LT(1)? */\n  deadEndConfigs = null;\n  /**\n   * The token object at the start index; the input stream might\n   * \tnot be buffering tokens so get a reference to it. (At the\n   *  time the error occurred, of course the stream needs to keep a\n   *  buffer all of the tokens but later we might not have access to those.)\n   */\n  startToken;\n  constructor(recognizer, input = null, startToken = null, offendingToken = null, deadEndConfigs = null, ctx = null) {\n    ctx = ctx ?? recognizer.context;\n    offendingToken = offendingToken ?? recognizer.getCurrentToken();\n    startToken = startToken ?? recognizer.getCurrentToken();\n    input = input ?? recognizer.inputStream;\n    super({ message: \"\", recognizer, input, ctx });\n    this.deadEndConfigs = deadEndConfigs;\n    this.startToken = startToken;\n    this.offendingToken = offendingToken;\n  }\n};\n\n// src/utils/DoubleDict.ts\nvar DoubleDict = class {\n  static {\n    __name(this, \"DoubleDict\");\n  }\n  cacheMap;\n  constructor() {\n    this.cacheMap = new HashMap();\n  }\n  get(a, b) {\n    const d = this.cacheMap.get(a) ?? null;\n    return d === null ? null : d.get(b) ?? null;\n  }\n  set(a, b, o) {\n    let d = this.cacheMap.get(a);\n    if (!d) {\n      d = new HashMap();\n      this.cacheMap.set(a, d);\n    }\n    d.set(b, o);\n  }\n};\n\n// src/atn/PredictionMode.ts\nvar SubsetEqualityComparer = class _SubsetEqualityComparer {\n  static {\n    __name(this, \"SubsetEqualityComparer\");\n  }\n  static instance = new _SubsetEqualityComparer();\n  hashCode(config) {\n    let hashCode = MurmurHash.initialize(7);\n    hashCode = MurmurHash.update(hashCode, config.state.stateNumber);\n    hashCode = MurmurHash.updateFromComparable(hashCode, config.context);\n    hashCode = MurmurHash.finish(hashCode, 2);\n    return hashCode;\n  }\n  equals(a, b) {\n    return a.state.stateNumber === b.state.stateNumber && (a.context?.equals(b.context) ?? true);\n  }\n};\nvar PredictionMode = class _PredictionMode {\n  static {\n    __name(this, \"PredictionMode\");\n  }\n  /**\n   * The SLL(*) prediction mode. This prediction mode ignores the current\n   * parser context when making predictions. This is the fastest prediction\n   * mode, and provides correct results for many grammars. This prediction\n   * mode is more powerful than the prediction mode provided by ANTLR 3, but\n   * may result in syntax errors for grammar and input combinations which are\n   * not SLL.\n   *\n   *\n   * When using this prediction mode, the parser will either return a correct\n   * parse tree (i.e. the same parse tree that would be returned with the\n   * {@link LL} prediction mode), or it will report a syntax error. If a\n   * syntax error is encountered when using the {@link SLL} prediction mode,\n   * it may be due to either an actual syntax error in the input or indicate\n   * that the particular combination of grammar and input requires the more\n   * powerful {@link LL} prediction abilities to complete successfully.\n   *\n   *\n   * This prediction mode does not provide any guarantees for prediction\n   * behavior for syntactically-incorrect inputs.\n   */\n  static SLL = 0;\n  /**\n   * The LL(*) prediction mode. This prediction mode allows the current parser\n   * context to be used for resolving SLL conflicts that occur during\n   * prediction. This is the fastest prediction mode that guarantees correct\n   * parse results for all combinations of grammars with syntactically correct\n   * inputs.\n   *\n   *\n   * When using this prediction mode, the parser will make correct decisions\n   * for all syntactically-correct grammar and input combinations. However, in\n   * cases where the grammar is truly ambiguous this prediction mode might not\n   * report a precise answer for *exactly which* alternatives are\n   * ambiguous.\n   *\n   *\n   * This prediction mode does not provide any guarantees for prediction\n   * behavior for syntactically-incorrect inputs.\n   */\n  static LL = 1;\n  /**\n   *\n   * The LL(*) prediction mode with exact ambiguity detection. In addition to\n   * the correctness guarantees provided by the {@link LL} prediction mode,\n   * this prediction mode instructs the prediction algorithm to determine the\n   * complete and exact set of ambiguous alternatives for every ambiguous\n   * decision encountered while parsing.\n   *\n   *\n   * This prediction mode may be used for diagnosing ambiguities during\n   * grammar development. Due to the performance overhead of calculating sets\n   * of ambiguous alternatives, this prediction mode should be avoided when\n   * the exact results are not necessary.\n   *\n   *\n   * This prediction mode does not provide any guarantees for prediction\n   * behavior for syntactically-incorrect inputs.\n   */\n  static LL_EXACT_AMBIG_DETECTION = 2;\n  /**\n   *\n   *Computes the SLL prediction termination condition.\n   *\n   *\n   *This method computes the SLL prediction termination condition for both of\n   *the following cases.\n   *\n   * - The usual SLL+LL fallback upon SLL conflict\n   * - Pure SLL without LL fallback\n   *\n   ***COMBINED SLL+LL PARSING**\n   *\n   *When LL-fallback is enabled upon SLL conflict, correct predictions are\n   *ensured regardless of how the termination condition is computed by this\n   *method. Due to the substantially higher cost of LL prediction, the\n   *prediction should only fall back to LL when the additional lookahead\n   *cannot lead to a unique SLL prediction.\n   *\n   *Assuming combined SLL+LL parsing, an SLL configuration set with only\n   *conflicting subsets should fall back to full LL, even if the\n   *configuration sets don't resolve to the same alternative (e.g.\n   *`{1,2`} and `{3,4`}. If there is at least one non-conflicting\n   *configuration, SLL could continue with the hopes that more lookahead will\n   *resolve via one of those non-conflicting configurations.\n   *\n   *Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n   *stops when it sees only conflicting configuration subsets. In contrast,\n   *full LL keeps going when there is uncertainty.\n   *\n   ***HEURISTIC**\n   *\n   *As a heuristic, we stop prediction when we see any conflicting subset\n   *unless we see a state that only has one alternative associated with it.\n   *The single-alt-state thing lets prediction continue upon rules like\n   *(otherwise, it would admit defeat too soon):\n   *\n   *`[12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;`\n   *\n   *When the ATN simulation reaches the state before `';'`, it has a\n   *DFA state that looks like: `[12|1|[], 6|2|[], 12|2|[]]`. Naturally\n   *`12|1|[]` and `12|2|[]` conflict, but we cannot stop\n   *processing this node because alternative to has another way to continue,\n   *via `[6|2|[]]`.\n   *\n   *It also let's us continue for this rule:\n   *\n   *`[1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;`\n   *\n   *After matching input A, we reach the stop state for rule A, state 1.\n   *State 8 is the state right before B. Clearly alternatives 1 and 2\n   *conflict and no amount of further lookahead will separate the two.\n   *However, alternative 3 will be able to continue and so we do not stop\n   *working on this state. In the previous example, we're concerned with\n   *states associated with the conflicting alternatives. Here alt 3 is not\n   *associated with the conflicting configs, but since we can continue\n   *looking for input reasonably, don't declare the state done.\n   *\n   ***PURE SLL PARSING**\n   *\n   *To handle pure SLL parsing, all we have to do is make sure that we\n   *combine stack contexts for configurations that differ only by semantic\n   *predicate. From there, we can do the usual SLL termination heuristic.\n   *\n   ***PREDICATES IN SLL+LL PARSING**\n   *\n   *SLL decisions don't evaluate predicates until after they reach DFA stop\n   *states because they need to create the DFA cache that works in all\n   *semantic situations. In contrast, full LL evaluates predicates collected\n   *during start state computation so it can ignore predicates thereafter.\n   *This means that SLL termination detection can totally ignore semantic\n   *predicates.\n   *\n   *Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n   *semantic predicate contexts so we might see two configurations like the\n   *following.\n   *\n   *`(s, 1, x, {`), (s, 1, x', {p})}\n   *\n   *Before testing these configurations against others, we have to merge\n   *`x` and `x'` (without modifying the existing configurations).\n   *For example, we test `(x+x')==x''` when looking for conflicts in\n   *the following configurations.\n   *\n   *`(s, 1, x, {`), (s, 1, x', {p}), (s, 2, x'', {})}\n   *\n   *If the configuration set has predicates (as indicated by\n   *{@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n   *the configurations to strip out all of the predicates so that a standard\n   *{@link ATNConfigSet} will merge everything ignoring predicates.\n   */\n  static hasSLLConflictTerminatingPrediction(mode, configs) {\n    if (_PredictionMode.allConfigsInRuleStopStates(configs)) {\n      return true;\n    }\n    if (mode === _PredictionMode.SLL) {\n      if (configs.hasSemanticContext) {\n        const dup = new ATNConfigSet();\n        for (let c of configs) {\n          c = ATNConfig.duplicate(c, SemanticContext.NONE);\n          dup.add(c);\n        }\n        configs = dup;\n      }\n    }\n    const altSets = _PredictionMode.getConflictingAltSubsets(configs);\n    return _PredictionMode.hasConflictingAltSet(altSets) && !_PredictionMode.hasStateAssociatedWithOneAlt(configs);\n  }\n  /**\n   * Checks if any configuration in `configs` is in a\n   * {@link RuleStopState}. Configurations meeting this condition have reached\n   * the end of the decision rule (local context) or end of start rule (full\n   * context).\n   *\n   * @param configs the configuration set to test\n   * @returns `true` if any configuration in `configs` is in a\n   * {@link RuleStopState}, otherwise `false`\n   */\n  static hasConfigInRuleStopState(configs) {\n    for (const c of configs) {\n      if (c.state instanceof RuleStopState) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks if all configurations in `configs` are in a\n   * {@link RuleStopState}. Configurations meeting this condition have reached\n   * the end of the decision rule (local context) or end of start rule (full\n   * context).\n   *\n   * @param configs the configuration set to test\n   * @returns `true` if all configurations in `configs` are in a\n   * {@link RuleStopState}, otherwise `false`\n   */\n  static allConfigsInRuleStopStates(configs) {\n    for (const c of configs) {\n      if (!(c.state instanceof RuleStopState)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   *\n   * Full LL prediction termination.\n   *\n   * Can we stop looking ahead during ATN simulation or is there some\n   * uncertainty as to which alternative we will ultimately pick, after\n   * consuming more input? Even if there are partial conflicts, we might know\n   * that everything is going to resolve to the same minimum alternative. That\n   * means we can stop since no more lookahead will change that fact. On the\n   * other hand, there might be multiple conflicts that resolve to different\n   * minimums. That means we need more look ahead to decide which of those\n   * alternatives we should predict.\n   *\n   * The basic idea is to split the set of configurations `C`, into\n   * conflicting subsets `(s, _, ctx, _)` and singleton subsets with\n   * non-conflicting configurations. Two configurations conflict if they have\n   * identical {@link ATNConfig.state} and {@link ATNConfig.context} values\n   * but different {@link ATNConfig.alt} value, e.g. `(s, i, ctx, _)`\n   * and `(s, j, ctx, _)` for `i!=j`.\n   *\n   * Reduce these configuration subsets to the set of possible alternatives.\n   * You can compute the alternative subsets in one pass as follows:\n   *\n   * `A_s,ctx = {i | (s, i, ctx, _)`} for each configuration in\n   * `C` holding `s` and `ctx` fixed.\n   *\n   * Or in pseudo-code, for each configuration `c` in `C`:\n   *\n   * ```\n   * map[c] U= c.{@link ATNConfig.alt alt} // map hash/equals uses s and x, not\n   * alt and not pred\n   * ```\n   *\n   * The values in `map` are the set of `A_s,ctx` sets.\n   *\n   * If `|A_s,ctx|=1` then there is no conflict associated with\n   * `s` and `ctx`.\n   *\n   * Reduce the subsets to singletons by choosing a minimum of each subset. If\n   * the union of these alternative subsets is a singleton, then no amount of\n   * more lookahead will help us. We will always pick that alternative. If,\n   * however, there is more than one alternative, then we are uncertain which\n   * alternative to predict and must continue looking for resolution. We may\n   * or may not discover an ambiguity in the future, even if there are no\n   * conflicting subsets this round.\n   *\n   * The biggest sin is to terminate early because it means we've made a\n   * decision but were uncertain as to the eventual outcome. We haven't used\n   * enough lookahead. On the other hand, announcing a conflict too late is no\n   * big deal; you will still have the conflict. It's just inefficient. It\n   * might even look until the end of file.\n   *\n   * No special consideration for semantic predicates is required because\n   * predicates are evaluated on-the-fly for full LL prediction, ensuring that\n   * no configuration contains a semantic context during the termination\n   * check.\n   *\n   * **CONFLICTING CONFIGS**\n   *\n   * Two configurations `(s, i, x)` and `(s, j, x')`, conflict when `i!=j` but `x=x'`. Because we merge all\n   * `(s, i, _)` configurations together, that means that there are at most `n` configurations associated with state\n   * `s` for `n` possible alternatives in the decision. The merged stacks complicate the comparison of configuration\n   * contexts `x` and `x'`. Sam checks to see if one is a subset of the other by calling merge and checking to see\n   * if the merged result is either `x` or `x'`. If the `x` associated with lowest alternative `i` is the superset,\n   * then `i` is the only possible prediction since the others resolve to `min(i)` as well. However, if `x` is\n   * associated with `j>i` then at least one stack configuration for `j` is not in conflict with alternative `i`.\n   * The algorithm should keep going, looking for more lookahead due to the uncertainty.\n   *\n   * For simplicity, I'm doing a equality check between `x` and `x'` that lets the algorithm continue to consume\n   * lookahead longer than necessary. The reason I like the equality is of course the simplicity but also because\n   * that is the test you need to detect the alternatives that are actually in conflict.\n   *\n   * **CONTINUE/STOP RULE**\n   *\n   * Continue if union of resolved alternative sets from non-conflicting and conflicting alternative subsets has more\n   * than one alternative. We are uncertain about which alternative to predict.\n   *\n   * The complete set of alternatives, `[i for (_,i,_)]`, tells us which alternatives are still in the running for\n   * the amount of input we've consumed at this point. The conflicting sets let us to strip away configurations that\n   * won't lead to more states because we resolve conflicts to the configuration with a minimum alternate for the\n   * conflicting set.\n   *\n   * **CASES**\n   *\n   * - no conflicts and more than 1 alternative in set => continue\n   * -  `(s, 1, x)`, `(s, 2, x)`, `(s, 3, z)`, `(s', 1, y)`, `(s', 2, y)` yields non-conflicting set `{3`} U\n   *   conflicting sets `min({1,2`)} U `min({1,2`)} = `{1,3`} => continue\n   * - `(s, 1, x)`, `(s, 2, x)`, `(s', 1, y)`, `(s', 2, y)`, `(s'', 1, z)` yields non-conflicting set `{1`} U\n   *   conflicting sets `min({1,2`)} U `min({1,2`)} = `{1`} => stop and predict 1\n   * - `(s, 1, x)`, `(s, 2, x)`, `(s', 1, y)`, `(s', 2, y)` yields conflicting, reduced sets `{1`} U\n   *   `{1`} = `{1`} => stop and predict 1, can announce ambiguity `{1,2`}\n   * - `(s, 1, x)`, `(s, 2, x)`, `(s', 2, y)`, `(s', 3, y)` yields conflicting, reduced sets `{1`} U\n   *   `{2`} = `{1,2`} => continue\n   * - `(s, 1, x)`, `(s, 2, x)`, `(s', 3, y)`, `(s', 4, y)` yields conflicting, reduced sets `{1`} U\n   *   `{3`} = `{1,3`} => continue\n   *\n   * **EXACT AMBIGUITY DETECTION**\n   *\n   *If all states report the same conflicting set of alternatives, then we\n   *know we have the exact ambiguity set.\n   *\n   * `|A_*i*|>1` and `A_*i* = A_*j*` for all *i*, *j*.\n   *\n   * In other words, we continue examining lookahead until all `A_i` have more than one alternative and all `A_i`\n   * are the same. If `A={{1,2`, {1,3}}}, then regular LL prediction would terminate because the resolved set\n   * is `{1`}. To determine what the real ambiguity is, we have to know whether the ambiguity is between one and\n   * two or one and three so we keep going. We can only stop prediction when we need exact ambiguity detection when\n   * the sets look like `A={{1,2`}} or `{{1,2`,{1,2}}}, etc...\n   */\n  static resolvesToJustOneViableAlt(altSets) {\n    return _PredictionMode.getSingleViableAlt(altSets);\n  }\n  /**\n   * Determines if every alternative subset in `altSets` contains more\n   * than one alternative.\n   *\n   * @param altSets a collection of alternative subsets\n   * @returns `true` if every {@link BitSet} in `altSets` has\n   * {@link BitSet//cardinality cardinality} > 1, otherwise `false`\n   */\n  static allSubsetsConflict(altSets) {\n    return !_PredictionMode.hasNonConflictingAltSet(altSets);\n  }\n  /**\n   * Determines if any single alternative subset in `altSets` contains\n   * exactly one alternative.\n   *\n   * @param altSets a collection of alternative subsets\n   * @returns `true` if `altSets` contains a {@link BitSet} with\n   * {@link BitSet//cardinality cardinality} 1, otherwise `false`\n   */\n  static hasNonConflictingAltSet(altSets) {\n    for (const alts of altSets) {\n      if (alts.length === 1) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Determines if any single alternative subset in `altSets` contains\n   * more than one alternative.\n   *\n   * @param altSets a collection of alternative subsets\n   * @returns `true` if `altSets` contains a {@link BitSet} with\n   * {@link BitSet//cardinality cardinality} > 1, otherwise `false`\n   */\n  static hasConflictingAltSet(altSets) {\n    for (const alts of altSets) {\n      if (alts.length > 1) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Determines if every alternative subset in `altSets` is equivalent.\n   *\n   * @param altSets a collection of alternative subsets\n   * @returns `true` if every member of `altSets` is equal to the\n   * others, otherwise `false`\n   */\n  static allSubsetsEqual(altSets) {\n    let first = null;\n    for (const alts of altSets) {\n      if (first === null) {\n        first = alts;\n      } else if (alts !== first) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Returns the unique alternative predicted by all alternative subsets in\n   * `altSets`. If no such alternative exists, this method returns\n   * {@link ATN.INVALID_ALT_NUMBER}.\n   *\n   * @param altSets a collection of alternative subsets\n   */\n  static getUniqueAlt(altSets) {\n    const all = _PredictionMode.getAlts(altSets);\n    if (all.length === 1) {\n      return all.nextSetBit(0);\n    } else {\n      return ATN.INVALID_ALT_NUMBER;\n    }\n  }\n  /**\n   * Gets the complete set of represented alternatives for a collection of\n   * alternative subsets. This method returns the union of each {@link BitSet}\n   * in `altSets`.\n   *\n   * @param altSets a collection of alternative subsets\n   * @returns the set of represented alternatives in `altSets`\n   */\n  static getAlts(altSets) {\n    const all = new BitSet();\n    altSets.forEach((alts) => {\n      all.or(alts);\n    });\n    return all;\n  }\n  /**\n   * This function gets the conflicting alt subsets from a configuration set.\n   * For each configuration `c` in `configs`:\n   *\n   * ```\n   * map[c] U= c.{@link ATNConfig.alt alt} // map hash/equals uses s and x, not\n   * alt and not pred\n   * ```\n   */\n  static getConflictingAltSubsets(configs) {\n    const configToAlts = new HashMap(SubsetEqualityComparer.instance);\n    for (const cfg of configs) {\n      let alts = configToAlts.get(cfg);\n      if (!alts) {\n        alts = new BitSet();\n        configToAlts.set(cfg, alts);\n      }\n      alts.set(cfg.alt);\n    }\n    return Array.from(configToAlts.values());\n  }\n  /**\n   * Get a map from state to alt subset from a configuration set. For each configuration `c` in `configs`:\n   *\n   * ```\n   * map[c.state] = c.alt\n   * ```\n   */\n  static getStateToAltMap(configs) {\n    const m2 = new HashMap(ObjectEqualityComparator.instance);\n    for (const c of configs) {\n      let alts = m2.get(c.state);\n      if (!alts) {\n        alts = new BitSet();\n        m2.set(c.state, alts);\n      }\n      alts.set(c.alt);\n    }\n    return m2;\n  }\n  static hasStateAssociatedWithOneAlt(configs) {\n    const counts = {};\n    for (const c of configs) {\n      const stateNumber = c.state.stateNumber;\n      if (!counts[stateNumber]) {\n        counts[stateNumber] = 0;\n      }\n      counts[stateNumber]++;\n    }\n    return Object.values(counts).some((count) => {\n      return count === 1;\n    });\n  }\n  static getSingleViableAlt(altSets) {\n    let result = null;\n    for (const alts of altSets) {\n      const minAlt = alts.nextSetBit(0);\n      if (result === null) {\n        result = minAlt;\n      } else if (result !== minAlt) {\n        return ATN.INVALID_ALT_NUMBER;\n      }\n    }\n    return result ?? 0;\n  }\n};\n\n// src/atn/ParserATNSimulator.ts\nvar ParserATNSimulator = class _ParserATNSimulator extends ATNSimulator {\n  static {\n    __name(this, \"ParserATNSimulator\");\n  }\n  static traceATNSimulator = false;\n  static debug;\n  static debugAdd = false;\n  static debugClosure = false;\n  static dfaDebug = false;\n  static retryDebug = false;\n  /** SLL, LL, or LL + exact ambig detection? */\n  predictionMode;\n  decisionToDFA;\n  parser;\n  /**\n   * Each prediction operation uses a cache for merge of prediction contexts.\n   * Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n   * isn't synchronized but we're ok since two threads shouldn't reuse same\n   * parser/atn sim object because it can only handle one input at a time.\n   * This maps graphs a and b to merged result c. (a,b)->c. We can avoid\n   * the merge if we ever see a and b again.  Note that (b,a)->c should\n   * also be examined during cache lookup.\n   */\n  mergeCache = new DoubleDict();\n  // Used also in the profiling ATN simulator.\n  predictionState;\n  constructor(recog, atn, decisionToDFA, sharedContextCache) {\n    super(atn, sharedContextCache);\n    this.parser = recog;\n    this.decisionToDFA = decisionToDFA;\n  }\n  static getUniqueAlt(configs) {\n    let alt = ATN.INVALID_ALT_NUMBER;\n    for (const c of configs) {\n      if (alt === ATN.INVALID_ALT_NUMBER) {\n        alt = c.alt;\n      } else if (c.alt !== alt) {\n        return ATN.INVALID_ALT_NUMBER;\n      }\n    }\n    return alt;\n  }\n  reset() {\n  }\n  clearDFA() {\n    for (let d = 0; d < this.decisionToDFA.length; d++) {\n      this.decisionToDFA[d] = new DFA(this.atn.getDecisionState(d), d);\n    }\n  }\n  // TODO: make outerContext an optional parameter, not optional null.\n  adaptivePredict(input, decision, outerContext) {\n    if (_ParserATNSimulator.debug || _ParserATNSimulator.traceATNSimulator) {\n      console.log(\"adaptivePredict decision \" + decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n    }\n    const dfa = this.decisionToDFA[decision];\n    this.predictionState = {\n      input,\n      startIndex: input.index,\n      outerContext: outerContext ?? void 0,\n      dfa\n    };\n    const m2 = input.mark();\n    const index = input.index;\n    try {\n      let s0;\n      if (dfa.isPrecedenceDfa) {\n        s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n      } else {\n        s0 = dfa.s0;\n      }\n      if (!s0) {\n        if (!outerContext) {\n          outerContext = ParserRuleContext.empty;\n        }\n        if (_ParserATNSimulator.debug) {\n          console.log(\"predictATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n        }\n        const fullCtx = false;\n        let s0_closure = this.computeStartState(dfa.atnStartState, ParserRuleContext.empty, fullCtx);\n        if (dfa.isPrecedenceDfa) {\n          s0_closure = this.applyPrecedenceFilter(s0_closure);\n          s0 = this.addDFAState(dfa, DFAState.fromConfigs(s0_closure));\n          dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n        } else {\n          s0 = this.addDFAState(dfa, DFAState.fromConfigs(s0_closure));\n          dfa.s0 = s0;\n        }\n      }\n      const alt = this.execATN(dfa, s0, input, index, outerContext);\n      if (_ParserATNSimulator.debug) {\n        console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.vocabulary));\n      }\n      return alt;\n    } finally {\n      this.predictionState.dfa = void 0;\n      this.mergeCache = new DoubleDict();\n      input.seek(index);\n      input.release(m2);\n    }\n  }\n  /**\n   * Performs ATN simulation to compute a predicted alternative based\n   *  upon the remaining input, but also updates the DFA cache to avoid\n   *  having to traverse the ATN again for the same input sequence.\n   *\n   * There are some key conditions we're looking for after computing a new\n   * set of ATN configs (proposed DFA state):\n   *       if the set is empty, there is no viable alternative for current symbol\n   *       does the state uniquely predict an alternative?\n   *       does the state have a conflict that would prevent us from\n   *         putting it on the work list?\n   *\n   * We also have some key operations to do:\n   *       add an edge from previous DFA state to potentially new DFA state, D,\n   *         upon current symbol but only if adding to work list, which means in all\n   *         cases except no viable alternative (and possibly non-greedy decisions?)\n   *       collecting predicates and adding semantic context to DFA accept states\n   *       adding rule context to context-sensitive DFA accept states\n   *       consuming an input symbol\n   *       reporting a conflict\n   *       reporting an ambiguity\n   *       reporting a context sensitivity\n   *       reporting insufficient predicates\n   *\n   * cover these cases:\n   *    dead end\n   *    single alt\n   *    single alt + preds\n   *    conflict\n   *    conflict + preds\n   */\n  execATN(dfa, s0, input, startIndex, outerContext) {\n    if (_ParserATNSimulator.debug || _ParserATNSimulator.traceATNSimulator) {\n      console.log(\"execATN decision \" + dfa.decision + \", DFA state \" + s0 + \", LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n    }\n    let alt;\n    let previousState = s0;\n    let t = input.LA(1);\n    while (true) {\n      let nextState = this.getExistingTargetState(previousState, t);\n      if (!nextState) {\n        nextState = this.computeTargetState(dfa, previousState, t);\n      }\n      if (nextState === ATNSimulator.ERROR) {\n        const e = this.noViableAlt(input, outerContext, previousState.configs, startIndex);\n        input.seek(startIndex);\n        alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousState.configs, outerContext);\n        if (alt !== ATN.INVALID_ALT_NUMBER) {\n          return alt;\n        } else {\n          throw e;\n        }\n      }\n      if (nextState.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n        let conflictingAlts = null;\n        if (nextState.predicates !== null) {\n          if (_ParserATNSimulator.debug) {\n            console.log(\"DFA state has preds in DFA sim LL failover\");\n          }\n          const conflictIndex = input.index;\n          if (conflictIndex !== startIndex) {\n            input.seek(startIndex);\n          }\n          conflictingAlts = this.evalSemanticContext(nextState.predicates, outerContext, true);\n          if (conflictingAlts.length === 1) {\n            if (_ParserATNSimulator.debug) {\n              console.log(\"Full LL avoided\");\n            }\n            return conflictingAlts.nextSetBit(0);\n          }\n          if (conflictIndex !== startIndex) {\n            input.seek(conflictIndex);\n          }\n        }\n        if (_ParserATNSimulator.dfaDebug) {\n          console.log(\"ctx sensitive state \" + outerContext + \" in \" + nextState);\n        }\n        const fullCtx = true;\n        const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n        this.reportAttemptingFullContext(dfa, conflictingAlts, nextState.configs, startIndex, input.index);\n        alt = this.execATNWithFullContext(dfa, nextState, s0_closure, input, startIndex, outerContext);\n        return alt;\n      }\n      if (nextState.isAcceptState) {\n        if (nextState.predicates === null) {\n          return nextState.prediction;\n        }\n        const stopIndex = input.index;\n        input.seek(startIndex);\n        const alts = this.evalSemanticContext(nextState.predicates, outerContext, true);\n        if (alts.length === 0) {\n          throw this.noViableAlt(input, outerContext, nextState.configs, startIndex);\n        }\n        if (alts.length === 1) {\n          return alts.nextSetBit(0);\n        }\n        this.reportAmbiguity(dfa, nextState, startIndex, stopIndex, false, alts, nextState.configs);\n        return alts.nextSetBit(0);\n      }\n      previousState = nextState;\n      if (t !== Token.EOF) {\n        input.consume();\n        t = input.LA(1);\n      }\n    }\n  }\n  /**\n   * Get an existing target state for an edge in the DFA. If the target state\n   * for the edge has not yet been computed or is otherwise not available,\n   * this method returns `null`.\n   *\n   * @param previousD The current DFA state\n   * @param t The next input symbol\n   * @returns The existing target DFA state for the given input symbol\n   * `t`, or `null` if the target state for this edge is not\n   * already cached\n   */\n  getExistingTargetState(previousD, t) {\n    return previousD.edges[t + 1];\n  }\n  /**\n   * Compute a target state for an edge in the DFA, and attempt to add the\n   * computed state and corresponding edge to the DFA.\n   *\n   * @param dfa The DFA\n   * @param previousD The current DFA state\n   * @param t The next input symbol\n   *\n   * @returns The computed target DFA state for the given input symbol\n   * `t`. If `t` does not lead to a valid DFA state, this method\n   * returns {@link ERROR\n   */\n  computeTargetState(dfa, previousD, t) {\n    const reach = this.computeReachSet(previousD.configs, t, false);\n    if (reach === null) {\n      this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n      return ATNSimulator.ERROR;\n    }\n    let D = DFAState.fromConfigs(reach);\n    const predictedAlt = _ParserATNSimulator.getUniqueAlt(reach);\n    if (_ParserATNSimulator.debug) {\n      const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n      console.log(\"SLL altSubSets=\" + arrayToString(altSubSets) + /*\", previous=\" + previousD.configs + */\n      \", configs=\" + reach + \", predict=\" + predictedAlt + \", allSubsetsConflict=\" + PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" + this.getConflictingAlts(reach));\n    }\n    if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n      D.isAcceptState = true;\n      D.configs.uniqueAlt = predictedAlt;\n      D.prediction = predictedAlt;\n    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n      D.configs.conflictingAlts = this.getConflictingAlts(reach);\n      D.requiresFullContext = true;\n      D.isAcceptState = true;\n      D.prediction = D.configs.conflictingAlts.nextSetBit(0);\n    }\n    if (D.isAcceptState && D.configs.hasSemanticContext) {\n      this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n      if (D.predicates !== null) {\n        D.prediction = ATN.INVALID_ALT_NUMBER;\n      }\n    }\n    D = this.addDFAEdge(dfa, previousD, t, D);\n    return D;\n  }\n  getRuleName(index) {\n    if (this.parser !== null && index >= 0) {\n      return this.parser.ruleNames[index];\n    } else {\n      return \"<rule \" + index + \">\";\n    }\n  }\n  getTokenName(t) {\n    if (t === Token.EOF) {\n      return \"EOF\";\n    }\n    const vocabulary = this.parser?.vocabulary ?? Vocabulary.EMPTY_VOCABULARY;\n    const displayName = vocabulary.getDisplayName(t);\n    if (displayName === t.toString()) {\n      return displayName;\n    }\n    return displayName + \"<\" + t + \">\";\n  }\n  getLookaheadName(input) {\n    return this.getTokenName(input.LA(1));\n  }\n  /**\n   * Used for debugging in adaptivePredict around execATN but I cut\n   * it out for clarity now that alg. works well. We can leave this\n   * \"dead\" code for a bit\n   */\n  dumpDeadEndConfigs(e) {\n    console.log(\"dead end configs: \");\n    const decs = e.deadEndConfigs;\n    for (const c of decs) {\n      let trans = \"no edges\";\n      if (c.state.transitions.length > 0) {\n        const t = c.state.transitions[0];\n        if (t instanceof AtomTransition) {\n          trans = \"Atom \" + this.getTokenName(t.labelValue);\n        } else if (t instanceof SetTransition) {\n          const neg = t instanceof NotSetTransition;\n          trans = (neg ? \"~\" : \"\") + \"Set \" + t.label;\n        }\n      }\n      console.error(c.toString(this.parser, true) + \":\" + trans);\n    }\n  }\n  predicateDFAState(dfaState, decisionState) {\n    const altCount = decisionState.transitions.length;\n    const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n    const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, altCount);\n    if (altToPred !== null) {\n      dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n      dfaState.prediction = ATN.INVALID_ALT_NUMBER;\n    } else {\n      dfaState.prediction = altsToCollectPredsFrom.nextSetBit(0);\n    }\n  }\n  // comes back with reach.uniqueAlt set to a valid alt\n  execATNWithFullContext(dfa, D, s0, input, startIndex, outerContext) {\n    if (_ParserATNSimulator.debug || _ParserATNSimulator.traceATNSimulator) {\n      console.log(\"execATNWithFullContext \" + s0);\n    }\n    const fullCtx = true;\n    let foundExactAmbig = false;\n    let reach;\n    let previous = s0;\n    input.seek(startIndex);\n    let t = input.LA(1);\n    let predictedAlt = -1;\n    for (; ; ) {\n      reach = this.computeReachSet(previous, t, fullCtx);\n      if (reach === null) {\n        const e = this.noViableAlt(input, outerContext, previous, startIndex);\n        input.seek(startIndex);\n        const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n        if (alt !== ATN.INVALID_ALT_NUMBER) {\n          return alt;\n        } else {\n          throw e;\n        }\n      }\n      const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n      if (_ParserATNSimulator.debug) {\n        console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" + PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" + PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n      }\n      reach.uniqueAlt = _ParserATNSimulator.getUniqueAlt(reach);\n      if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n        predictedAlt = reach.uniqueAlt;\n        break;\n      } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n        predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n        if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n          break;\n        }\n      } else {\n        if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n          foundExactAmbig = true;\n          predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n          break;\n        }\n      }\n      previous = reach;\n      if (t !== Token.EOF) {\n        input.consume();\n        t = input.LA(1);\n      }\n    }\n    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n      this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n      return predictedAlt;\n    }\n    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, reach.getAlts(), reach);\n    return predictedAlt;\n  }\n  computeReachSet(closure, t, fullCtx) {\n    if (_ParserATNSimulator.debug) {\n      console.log(\"in computeReachSet, starting closure: \" + closure);\n    }\n    const intermediate = new ATNConfigSet(fullCtx);\n    let skippedStopStates = null;\n    for (const c of closure) {\n      if (_ParserATNSimulator.debug) {\n        console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n      }\n      if (c.state instanceof RuleStopState) {\n        if (fullCtx || t === Token.EOF) {\n          if (skippedStopStates === null) {\n            skippedStopStates = [];\n          }\n          skippedStopStates.push(c);\n        }\n        continue;\n      }\n      for (const trans of c.state.transitions) {\n        const target = this.getReachableTarget(trans, t);\n        if (target !== null) {\n          const cfg = ATNConfig.createWithConfig(target, c);\n          intermediate.add(cfg, this.mergeCache);\n          if (_ParserATNSimulator.debugAdd) {\n            console.log(\"added \" + cfg + \" to intermediate\");\n          }\n        }\n      }\n    }\n    let reach = null;\n    if (skippedStopStates === null && t !== Token.EOF) {\n      if (intermediate.length === 1) {\n        reach = intermediate;\n      } else if (_ParserATNSimulator.getUniqueAlt(intermediate) !== ATN.INVALID_ALT_NUMBER) {\n        reach = intermediate;\n      }\n    }\n    if (reach === null) {\n      reach = new ATNConfigSet(fullCtx);\n      const closureBusy = new HashSet();\n      const treatEofAsEpsilon = t === Token.EOF;\n      for (const config of intermediate) {\n        this.closure(config, reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n      }\n    }\n    if (t === Token.EOF) {\n      reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n    }\n    if (skippedStopStates !== null && (!fullCtx || !PredictionMode.hasConfigInRuleStopState(reach))) {\n      for (const config of skippedStopStates) {\n        reach.add(config, this.mergeCache);\n      }\n    }\n    if (_ParserATNSimulator.traceATNSimulator) {\n      console.log(\"computeReachSet \" + closure + \" -> \" + reach);\n    }\n    if (reach.length === 0) {\n      return null;\n    } else {\n      return reach;\n    }\n  }\n  /**\n   * Return a configuration set containing only the configurations from\n   * `configs` which are in a {@link RuleStopState}. If all\n   * configurations in `configs` are already in a rule stop state, this\n   * method simply returns `configs`.\n   *\n   * When `lookToEndOfRule` is true, this method uses\n   * {@link ATN.nextTokens} for each configuration in `configs` which is\n   * not already in a rule stop state to see if a rule stop state is reachable\n   * from the configuration via epsilon-only transitions.\n   *\n   * @param configs the configuration set to update\n   * @param lookToEndOfRule when true, this method checks for rule stop states\n   * reachable by epsilon-only transitions from each configuration in\n   * `configs`.\n   *\n   * @returns `configs` if all configurations in `configs` are in a\n   * rule stop state, otherwise return a new configuration set containing only\n   * the configurations from `configs` which are in a rule stop state\n   */\n  removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {\n    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n      return configs;\n    }\n    const result = new ATNConfigSet(configs.fullCtx);\n    for (const config of configs) {\n      if (config.state instanceof RuleStopState) {\n        result.add(config, this.mergeCache);\n        continue;\n      }\n      if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n        const nextTokens = this.atn.nextTokens(config.state);\n        if (nextTokens.contains(Token.EPSILON)) {\n          const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n          result.add(ATNConfig.createWithConfig(endOfRuleState, config), this.mergeCache);\n        }\n      }\n    }\n    return result;\n  }\n  computeStartState(p, ctx, fullCtx) {\n    const initialContext = predictionContextFromRuleContext(this.atn, ctx);\n    const configs = new ATNConfigSet(fullCtx);\n    if (_ParserATNSimulator.traceATNSimulator) {\n      console.log(\"computeStartState from ATN state \" + p + \" initialContext=\" + initialContext.toString(this.parser));\n    }\n    for (let i = 0; i < p.transitions.length; i++) {\n      const target = p.transitions[i].target;\n      const c = ATNConfig.createWithContext(target, i + 1, initialContext);\n      const closureBusy = new HashSet();\n      this.closure(c, configs, closureBusy, true, fullCtx, false);\n    }\n    return configs;\n  }\n  /**\n   * This method transforms the start state computed by\n   * {@link computeStartState} to the special start state used by a\n   * precedence DFA for a particular precedence value. The transformation\n   * process applies the following changes to the start state's configuration\n   * set.\n   *\n   * 1. Evaluate the precedence predicates for each configuration using\n   * {@link SemanticContext//evalPrecedence}.\n   * 2. Remove all configurations which predict an alternative greater than\n   * 1, for which another configuration that predicts alternative 1 is in the\n   * same ATN state with the same prediction context. This transformation is\n   * valid for the following reasons:\n   * 3. The closure block cannot contain any epsilon transitions which bypass\n   * the body of the closure, so all states reachable via alternative 1 are\n   * part of the precedence alternatives of the transformed left-recursive\n   * rule.\n   * 4. The \"primary\" portion of a left recursive rule cannot contain an\n   * epsilon transition, so the only way an alternative other than 1 can exist\n   * in a state that is also reachable via alternative 1 is by nesting calls\n   * to the left-recursive rule, with the outer calls not being at the\n   * preferred precedence level.\n   *\n   *\n   * The prediction context must be considered by this filter to address\n   * situations like the following.\n   *\n   * `\n   * ```\n   * grammar TA;\n   * prog: statement* EOF;\n   * statement: letterA | statement letterA 'b' ;\n   * letterA: 'a';\n   * ```\n   * `\n   *\n   * If the above grammar, the ATN state immediately before the token\n   * reference `'a'` in `letterA` is reachable from the left edge\n   * of both the primary and closure blocks of the left-recursive rule\n   * `statement`. The prediction context associated with each of these\n   * configurations distinguishes between them, and prevents the alternative\n   * which stepped out to `prog` (and then back in to `statement`\n   * from being eliminated by the filter.\n   *\n   * @param configs The configuration set computed by\n   * {@link computeStartState} as the start state for the DFA.\n   * @returns The transformed configuration set representing the start state\n   * for a precedence DFA at a particular precedence level (determined by\n   * calling {@link Parser//getPrecedence})\n   */\n  applyPrecedenceFilter(configs) {\n    const statesFromAlt1 = [];\n    const configSet = new ATNConfigSet(configs.fullCtx);\n    for (const config of configs) {\n      if (config.alt !== 1) {\n        continue;\n      }\n      const updatedContext = config.semanticContext.evalPrecedence(\n        this.parser,\n        this.predictionState.outerContext\n      );\n      if (updatedContext === null) {\n        continue;\n      }\n      statesFromAlt1[config.state.stateNumber] = config.context;\n      if (updatedContext !== config.semanticContext) {\n        configSet.add(ATNConfig.duplicate(config, updatedContext), this.mergeCache);\n      } else {\n        configSet.add(config, this.mergeCache);\n      }\n    }\n    for (const config of configs) {\n      if (config.alt === 1) {\n        continue;\n      }\n      if (!config.precedenceFilterSuppressed) {\n        const context = statesFromAlt1[config.state.stateNumber] || null;\n        if (context !== null && context.equals(config.context)) {\n          continue;\n        }\n      }\n      configSet.add(config, this.mergeCache);\n    }\n    return configSet;\n  }\n  getReachableTarget(trans, ttype) {\n    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n      return trans.target;\n    } else {\n      return null;\n    }\n  }\n  getPredsForAmbigAlts(ambigAlts, configs, altCount) {\n    let altToPred = [];\n    for (const c of configs) {\n      if (ambigAlts.get(c.alt)) {\n        altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] ?? null, c.semanticContext);\n      }\n    }\n    let nPredAlts = 0;\n    for (let i = 1; i < altCount + 1; i++) {\n      const pred = altToPred[i] ?? null;\n      if (pred === null) {\n        altToPred[i] = SemanticContext.NONE;\n      } else if (pred !== SemanticContext.NONE) {\n        nPredAlts += 1;\n      }\n    }\n    if (nPredAlts === 0) {\n      altToPred = null;\n    }\n    if (_ParserATNSimulator.debug) {\n      console.log(\"getPredsForAmbigAlts result \" + arrayToString(altToPred));\n    }\n    return altToPred;\n  }\n  getPredicatePredictions(ambigAlts, altToPred) {\n    const pairs = [];\n    let containsPredicate = false;\n    for (let i = 1; i < altToPred.length; i++) {\n      const pred = altToPred[i];\n      if (ambigAlts.get(i)) {\n        pairs.push({ pred, alt: i });\n      }\n      if (pred !== SemanticContext.NONE) {\n        containsPredicate = true;\n      }\n    }\n    if (!containsPredicate) {\n      return null;\n    }\n    return pairs;\n  }\n  /**\n   * This method is used to improve the localization of error messages by\n   * choosing an alternative rather than throwing a\n   * {@link NoViableAltException} in particular prediction scenarios where the\n   * {@link ERROR} state was reached during ATN simulation.\n   *\n   *\n   * The default implementation of this method uses the following\n   * algorithm to identify an ATN configuration which successfully parsed the\n   * decision entry rule. Choosing such an alternative ensures that the\n   * {@link ParserRuleContext} returned by the calling rule will be complete\n   * and valid, and the syntax error will be reported later at a more\n   * localized location.\n   *\n   * - If a syntactically valid path or paths reach the end of the decision rule and\n   * they are semantically valid if predicated, return the min associated alt.\n   * - Else, if a semantically invalid but syntactically valid path exist\n   * or paths exist, return the minimum associated alt.\n   *\n   * - Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.\n   *\n   *\n   * In some scenarios, the algorithm described above could predict an\n   * alternative which will result in a {@link FailedPredicateException} in\n   * the parser. Specifically, this could occur if the *only* configuration\n   * capable of successfully parsing to the end of the decision rule is\n   * blocked by a semantic predicate. By choosing this alternative within\n   * {@link adaptivePredict} instead of throwing a\n   * {@link NoViableAltException}, the resulting\n   * {@link FailedPredicateException} in the parser will identify the specific\n   * predicate which is preventing the parser from successfully parsing the\n   * decision rule, which helps developers identify and correct logic errors\n   * in semantic predicates.\n   *\n   * @param configs The ATN configurations which were valid immediately before\n   * the {@link ERROR} state was reached\n   * @param outerContext The is the \\gamma_0 initial parser context from the paper\n   * or the parser stack at the instant before prediction commences.\n   *\n   * @returns The value to return from {@link adaptivePredict}, or\n   * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n   * identified and {@link adaptivePredict} should report an error instead\n   */\n  getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {\n    const splitConfigs = this.splitAccordingToSemanticValidity(configs, outerContext);\n    const semValidConfigs = splitConfigs[0];\n    const semInvalidConfigs = splitConfigs[1];\n    let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n    if (alt !== ATN.INVALID_ALT_NUMBER) {\n      return alt;\n    }\n    if (semInvalidConfigs.length > 0) {\n      alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n      if (alt !== ATN.INVALID_ALT_NUMBER) {\n        return alt;\n      }\n    }\n    return ATN.INVALID_ALT_NUMBER;\n  }\n  getAltThatFinishedDecisionEntryRule(configs) {\n    const alts = [];\n    for (const c of configs) {\n      if (c.reachesIntoOuterContext || c.state instanceof RuleStopState && c.context.hasEmptyPath()) {\n        if (alts.indexOf(c.alt) < 0) {\n          alts.push(c.alt);\n        }\n      }\n    }\n    if (alts.length === 0) {\n      return ATN.INVALID_ALT_NUMBER;\n    } else {\n      return Math.min(...alts);\n    }\n  }\n  /**\n   * Walk the list of configurations and split them according to\n   * those that have preds evaluating to true/false.  If no pred, assume\n   * true pred and include in succeeded set.  Returns Pair of sets.\n   *\n   * Create a new set so as not to alter the incoming parameter.\n   *\n   * Assumption: the input stream has been restored to the starting point\n   * prediction, which is where predicates need to evaluate.\n   */\n  splitAccordingToSemanticValidity(configs, outerContext) {\n    const succeeded = new ATNConfigSet(configs.fullCtx);\n    const failed = new ATNConfigSet(configs.fullCtx);\n    for (const c of configs) {\n      if (c.semanticContext !== SemanticContext.NONE) {\n        const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n        if (predicateEvaluationResult) {\n          succeeded.add(c);\n        } else {\n          failed.add(c);\n        }\n      } else {\n        succeeded.add(c);\n      }\n    }\n    return [succeeded, failed];\n  }\n  /**\n   * Look through a list of predicate/alt pairs, returning alts for the\n   * pairs that win. A `NONE` predicate indicates an alt containing an\n   * unpredicated config which behaves as \"always true.\" If !complete\n   * then we stop at the first predicate that evaluates to true. This\n   * includes pairs with null predicates.\n   */\n  evalSemanticContext(predPredictions, outerContext, complete) {\n    const predictions = new BitSet();\n    for (const pair of predPredictions) {\n      if (pair.pred === SemanticContext.NONE) {\n        predictions.set(pair.alt);\n        if (!complete) {\n          break;\n        }\n        continue;\n      }\n      const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n      if (_ParserATNSimulator.debug || _ParserATNSimulator.dfaDebug) {\n        console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n      }\n      if (predicateEvaluationResult) {\n        predictions.set(pair.alt);\n        if (!complete) {\n          break;\n        }\n      }\n    }\n    return predictions;\n  }\n  // TODO: If we are doing predicates, there is no point in pursuing\n  //     closure operations if we reach a DFA state that uniquely predicts\n  //     alternative. We will not be caching that DFA state and it is a\n  //     waste to pursue the closure. Might have to advance when we do\n  //     ambig detection thought :(\n  //\n  closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n    const initialDepth = 0;\n    this.closureCheckingStopState(\n      config,\n      configs,\n      closureBusy,\n      collectPredicates,\n      fullCtx,\n      initialDepth,\n      treatEofAsEpsilon\n    );\n  }\n  closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n    if (_ParserATNSimulator.traceATNSimulator || _ParserATNSimulator.debugClosure) {\n      console.log(\"closure(\" + config.toString(this.parser, true) + \")\");\n    }\n    if (config.state instanceof RuleStopState) {\n      if (config.context && !config.context.isEmpty()) {\n        for (let i = 0; i < config.context.length; i++) {\n          if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n            if (fullCtx) {\n              configs.add(\n                ATNConfig.createWithConfig(\n                  config.state,\n                  config,\n                  EmptyPredictionContext.instance\n                ),\n                this.mergeCache\n              );\n              continue;\n            } else {\n              if (_ParserATNSimulator.debug) {\n                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n              }\n              this.closure_(\n                config,\n                configs,\n                closureBusy,\n                collectPredicates,\n                fullCtx,\n                depth,\n                treatEofAsEpsilon\n              );\n            }\n            continue;\n          }\n          const returnState = this.atn.states[config.context.getReturnState(i)];\n          const newContext = config.context.getParent(i);\n          const c = ATNConfig.createWithContext(returnState, config.alt, newContext, config.semanticContext);\n          c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n          this.closureCheckingStopState(\n            c,\n            configs,\n            closureBusy,\n            collectPredicates,\n            fullCtx,\n            depth - 1,\n            treatEofAsEpsilon\n          );\n        }\n        return;\n      } else if (fullCtx) {\n        configs.add(config, this.mergeCache);\n        return;\n      } else {\n        if (_ParserATNSimulator.debug) {\n          console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n        }\n      }\n    }\n    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n  }\n  // Do the actual work of walking epsilon edges//\n  closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n    const p = config.state;\n    if (!p.epsilonOnlyTransitions) {\n      configs.add(config, this.mergeCache);\n    }\n    for (let i = 0; i < p.transitions.length; i++) {\n      if (i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config)) {\n        continue;\n      }\n      const t = p.transitions[i];\n      const continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n      const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n      if (c) {\n        let newDepth = depth;\n        if (config.state.constructor.stateType === ATNState.RULE_STOP) {\n          if (this.predictionState.dfa && this.predictionState?.dfa.isPrecedenceDfa) {\n            const outermostPrecedenceReturn = t.outermostPrecedenceReturn;\n            if (outermostPrecedenceReturn === this.predictionState?.dfa.atnStartState?.ruleIndex) {\n              c.precedenceFilterSuppressed = true;\n            }\n          }\n          c.reachesIntoOuterContext = true;\n          if (closureBusy.getOrAdd(c) !== c) {\n            continue;\n          }\n          configs.dipsIntoOuterContext = true;\n          newDepth -= 1;\n          if (_ParserATNSimulator.debug) {\n            console.log(\"dips into outer ctx: \" + c);\n          }\n        } else {\n          if (!t.isEpsilon && closureBusy.getOrAdd(c) !== c) {\n            continue;\n          }\n          if (t instanceof RuleTransition) {\n            if (newDepth >= 0) {\n              newDepth += 1;\n            }\n          }\n        }\n        this.closureCheckingStopState(\n          c,\n          configs,\n          closureBusy,\n          continueCollecting,\n          fullCtx,\n          newDepth,\n          treatEofAsEpsilon\n        );\n      }\n    }\n  }\n  canDropLoopEntryEdgeInLeftRecursiveRule(config) {\n    const p = config.state;\n    if (p.constructor.stateType !== ATNState.STAR_LOOP_ENTRY || !config.context) {\n      return false;\n    }\n    if (!p.precedenceRuleDecision || config.context.isEmpty() || config.context.hasEmptyPath()) {\n      return false;\n    }\n    const numCtxs = config.context.length;\n    for (let i = 0; i < numCtxs; i++) {\n      const returnState = this.atn.states[config.context.getReturnState(i)];\n      if (returnState.ruleIndex !== p.ruleIndex) {\n        return false;\n      }\n    }\n    const decisionStartState = p.transitions[0].target;\n    const blockEndStateNum = decisionStartState.endState.stateNumber;\n    const blockEndState = this.atn.states[blockEndStateNum];\n    for (let i = 0; i < numCtxs; i++) {\n      const returnStateNumber = config.context.getReturnState(i);\n      const returnState = this.atn.states[returnStateNumber];\n      if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon) {\n        return false;\n      }\n      const returnStateTarget = returnState.transitions[0].target;\n      if (returnState.constructor.stateType === ATNState.BLOCK_END && returnStateTarget === p) {\n        continue;\n      }\n      if (returnState === blockEndState) {\n        continue;\n      }\n      if (returnStateTarget === blockEndState) {\n        continue;\n      }\n      if (returnStateTarget.constructor.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n    switch (t.transitionType) {\n      case Transition.RULE: {\n        return this.ruleTransition(config, t);\n      }\n      case Transition.PRECEDENCE: {\n        return this.precedenceTransition(\n          config,\n          t,\n          collectPredicates,\n          inContext,\n          fullCtx\n        );\n      }\n      case Transition.PREDICATE: {\n        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n      }\n      case Transition.ACTION: {\n        if (_ParserATNSimulator.debug) {\n          const at = t;\n          const index = at.actionIndex === -1 ? 65535 : at.actionIndex;\n          console.log(\"ACTION edge \" + at.ruleIndex + \":\" + index);\n        }\n        return ATNConfig.createWithConfig(t.target, config);\n      }\n      case Transition.EPSILON: {\n        return ATNConfig.createWithConfig(t.target, config);\n      }\n      case Transition.ATOM:\n      case Transition.RANGE:\n      case Transition.SET: {\n        if (treatEofAsEpsilon) {\n          if (t.matches(Token.EOF, 0, 1)) {\n            return ATNConfig.createWithConfig(t.target, config);\n          }\n        }\n        return null;\n      }\n      default:\n        return null;\n    }\n  }\n  precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {\n    if (_ParserATNSimulator.debug) {\n      console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.precedence + \">=_p, ctx dependent=true\");\n      if (this.parser !== null) {\n        console.log(\"context surrounding pred is \" + arrayToString(this.parser.getRuleInvocationStack()));\n      }\n    }\n    let c = null;\n    if (collectPredicates && inContext) {\n      if (fullCtx && this.predictionState?.input) {\n        const currentPosition = this.predictionState.input.index;\n        this.predictionState.input.seek(this.predictionState.startIndex);\n        const predSucceeds = pt.getPredicate().evaluate(this.parser, this.predictionState.outerContext);\n        this.predictionState.input.seek(currentPosition);\n        if (predSucceeds) {\n          c = ATNConfig.createWithConfig(pt.target, config);\n        }\n      } else {\n        const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n        c = ATNConfig.createWithSemanticContext(pt.target, config, newSemCtx);\n      }\n    } else {\n      c = ATNConfig.createWithConfig(pt.target, config);\n    }\n    if (_ParserATNSimulator.debug) {\n      console.log(\"config from pred transition=\" + c);\n    }\n    return c;\n  }\n  predTransition(config, pt, collectPredicates, inContext, fullCtx) {\n    if (_ParserATNSimulator.debug) {\n      console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex + \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n      if (this.parser !== null) {\n        console.log(\"context surrounding pred is \" + arrayToString(this.parser.getRuleInvocationStack()));\n      }\n    }\n    let c = null;\n    if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {\n      if (fullCtx && this.predictionState?.input) {\n        const currentPosition = this.predictionState.input.index;\n        this.predictionState.input.seek(this.predictionState.startIndex);\n        const predSucceeds = pt.getPredicate().evaluate(this.parser, this.predictionState.outerContext);\n        this.predictionState.input.seek(currentPosition);\n        if (predSucceeds) {\n          c = ATNConfig.createWithConfig(pt.target, config);\n        }\n      } else {\n        const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n        c = ATNConfig.createWithSemanticContext(pt.target, config, newSemCtx);\n      }\n    } else {\n      c = ATNConfig.createWithConfig(pt.target, config);\n    }\n    if (_ParserATNSimulator.debug) {\n      console.log(\"config from pred transition=\" + c);\n    }\n    return c;\n  }\n  ruleTransition(config, t) {\n    if (_ParserATNSimulator.debug) {\n      console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n    }\n    const returnState = t.followState;\n    const newContext = createSingletonPredictionContext(config.context ?? void 0, returnState.stateNumber);\n    return ATNConfig.createWithConfig(t.target, config, newContext);\n  }\n  getConflictingAlts(configs) {\n    const altSets = PredictionMode.getConflictingAltSubsets(configs);\n    return PredictionMode.getAlts(altSets);\n  }\n  /**\n   * Sam pointed out a problem with the previous definition, v3, of\n   * ambiguous states. If we have another state associated with conflicting\n   * alternatives, we should keep going. For example, the following grammar\n   *\n   * s : (ID | ID ID?) ';' ;\n   *\n   * When the ATN simulation reaches the state before ';', it has a DFA\n   * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n   * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n   * because alternative to has another way to continue, via [6|2|[]].\n   * The key is that we have a single state that has config's only associated\n   * with a single alternative, 2, and crucially the state transitions\n   * among the configurations are all non-epsilon transitions. That means\n   * we don't consider any conflicts that include alternative 2. So, we\n   * ignore the conflict between alts 1 and 2. We ignore a set of\n   * conflicting alts when there is an intersection with an alternative\n   * associated with a single alt state in the state -> config-list map.\n   *\n   * It's also the case that we might have two conflicting configurations but\n   * also a 3rd nonconflicting configuration for a different alternative:\n   * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n   *\n   * a : A | A | A B ;\n   *\n   * After matching input A, we reach the stop state for rule A, state 1.\n   * State 8 is the state right before B. Clearly alternatives 1 and 2\n   * conflict and no amount of further lookahead will separate the two.\n   * However, alternative 3 will be able to continue and so we do not\n   * stop working on this state. In the previous example, we're concerned\n   * with states associated with the conflicting alternatives. Here alt\n   * 3 is not associated with the conflicting configs, but since we can continue\n   * looking for input reasonably, I don't declare the state done. We\n   * ignore a set of conflicting alts when we have an alternative\n   * that we still need to pursue\n   */\n  getConflictingAltsOrUniqueAlt(configs) {\n    let conflictingAlts;\n    if (configs.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n      conflictingAlts = new BitSet();\n      conflictingAlts.set(configs.uniqueAlt);\n    } else {\n      conflictingAlts = configs.conflictingAlts;\n    }\n    return conflictingAlts;\n  }\n  noViableAlt(input, outerContext, configs, startIndex) {\n    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n  }\n  /**\n   * Add an edge to the DFA, if possible. This method calls\n   * {@link addDFAState} to ensure the `to` state is present in the\n   * DFA. If `from` is `null`, or if `t` is outside the\n   * range of edges that can be represented in the DFA tables, this method\n   * returns without adding the edge to the DFA.\n   *\n   * If `to` is `null`, this method returns `null`.\n   * Otherwise, this method returns the {@link DFAState} returned by calling\n   * {@link addDFAState} for the `to` state.\n   *\n   * @param dfa The DFA\n   * @param from The source state for the edge\n   * @param t The input symbol\n   * @param to The target state for the edge\n   *\n   * @returns If `to` is `null`, this method returns `null`;\n   * otherwise this method returns the result of calling {@link addDFAState}\n   * on `to`\n   */\n  addDFAEdge(dfa, from, t, to) {\n    if (_ParserATNSimulator.debug) {\n      console.log(\"EDGE \" + from + \" -> \" + to + \" upon \" + this.getTokenName(t));\n    }\n    to = this.addDFAState(dfa, to);\n    if (t < -1 || t > this.atn.maxTokenType) {\n      return to;\n    }\n    if (_ParserATNSimulator.debug) {\n      console.log(\"DFA=\\n\" + dfa.toString(this.parser != null ? this.parser.vocabulary : Vocabulary.EMPTY_VOCABULARY));\n    }\n    from.edges[t + 1] = to;\n    return to;\n  }\n  /**\n   * Add state `D` to the DFA if it is not already present, and return\n   * the actual instance stored in the DFA. If a state equivalent to `D`\n   * is already in the DFA, the existing state is returned. Otherwise this\n   * method returns `D` after adding it to the DFA.\n   *\n   * If `D` is {@link ERROR}, this method returns {@link ERROR} and\n   * does not change the DFA.\n   *\n   * @param dfa The dfa.\n   * @param newState The DFA state to add.\n   *\n   * @returns The state stored in the DFA. This will be either the existing state if `newState` is already in\n   *          the DFA, or `newState` itself if the state was not already present.\n   */\n  addDFAState(dfa, newState) {\n    if (newState === ATNSimulator.ERROR) {\n      return newState;\n    }\n    const existing = dfa.getState(newState);\n    if (existing !== null) {\n      return existing;\n    }\n    if (!newState.configs.readOnly) {\n      newState.configs.optimizeConfigs(this);\n      newState.configs.setReadonly(true);\n    }\n    if (_ParserATNSimulator.traceATNSimulator) {\n      console.log(\"addDFAState new \" + newState);\n    }\n    dfa.addState(newState);\n    return newState;\n  }\n  reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n    if (_ParserATNSimulator.debug || _ParserATNSimulator.retryDebug) {\n      const interval = new Interval(startIndex, stopIndex + 1);\n      console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.tokenStream.getTextFromInterval(interval));\n    }\n    this.parser.errorListenerDispatch.reportAttemptingFullContext(\n      this.parser,\n      dfa,\n      startIndex,\n      stopIndex,\n      conflictingAlts,\n      configs\n    );\n  }\n  reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {\n    if (_ParserATNSimulator.debug || _ParserATNSimulator.retryDebug) {\n      const interval = new Interval(startIndex, stopIndex + 1);\n      console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.tokenStream.getTextFromInterval(interval));\n    }\n    this.parser.errorListenerDispatch.reportContextSensitivity(\n      this.parser,\n      dfa,\n      startIndex,\n      stopIndex,\n      prediction,\n      configs\n    );\n  }\n  // If context sensitive parsing, we know it's ambiguity not conflict.\n  reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {\n    if (_ParserATNSimulator.debug || _ParserATNSimulator.retryDebug) {\n      const interval = new Interval(startIndex, stopIndex + 1);\n      console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs + \", input=\" + this.parser.tokenStream.getTextFromInterval(interval));\n    }\n    this.parser.errorListenerDispatch.reportAmbiguity(\n      this.parser,\n      dfa,\n      startIndex,\n      stopIndex,\n      exact,\n      ambigAlts,\n      configs\n    );\n  }\n};\n\n// src/atn/PredictionContextCache.ts\nvar PredictionContextCache = class {\n  static {\n    __name(this, \"PredictionContextCache\");\n  }\n  cache = new HashMap(ObjectEqualityComparator.instance);\n  /**\n   * Add a context to the cache and return it. If the context already exists,\n   * return that one instead and do not add a new context to the cache.\n   * Protect shared cache from unsafe thread access.\n   *\n   * @param ctx tbd\n   * @returns tbd\n   */\n  add(ctx) {\n    if (ctx === EmptyPredictionContext.instance) {\n      return ctx;\n    }\n    const existing = this.cache.get(ctx);\n    if (existing) {\n      return existing;\n    }\n    this.cache.set(ctx, ctx);\n    return ctx;\n  }\n  get(ctx) {\n    return this.cache.get(ctx);\n  }\n  get length() {\n    return this.cache.size;\n  }\n};\n\n// src/atn/ProfilingATNSimulator.ts\nvar ProfilingATNSimulator = class extends ParserATNSimulator {\n  static {\n    __name(this, \"ProfilingATNSimulator\");\n  }\n  decisions;\n  numDecisions = 0;\n  currentDecision = 0;\n  currentState;\n  /**\n   * At the point of LL failover, we record how SLL would resolve the conflict so that\n   *  we can determine whether or not a decision / input pair is context-sensitive.\n   *  If LL gives a different result than SLL's predicted alternative, we have a\n   *  context sensitivity for sure. The converse is not necessarily true, however.\n   *  It's possible that after conflict resolution chooses minimum alternatives,\n   *  SLL could get the same answer as LL. Regardless of whether or not the result indicates\n   *  an ambiguity, it is not treated as a context sensitivity because LL prediction\n   *  was not required in order to produce a correct prediction for this decision and input sequence.\n   *  It may in fact still be a context sensitivity but we don't know by looking at the\n   *  minimum alternatives for the current input.\n   */\n  conflictingAltResolvedBySLL;\n  sllStopIndex = 0;\n  llStopIndex = 0;\n  constructor(parser) {\n    const sharedContextCache = parser.interpreter.sharedContextCache;\n    super(parser, parser.interpreter.atn, parser.interpreter.decisionToDFA, sharedContextCache);\n    if (sharedContextCache) {\n      this.numDecisions = this.atn.decisionToState.length;\n      this.decisions = new Array(this.numDecisions);\n      for (let i = 0; i < this.numDecisions; i++) {\n        this.decisions[i] = new DecisionInfo(i);\n      }\n    }\n  }\n  adaptivePredict(input, decision, outerContext) {\n    try {\n      this.sllStopIndex = -1;\n      this.llStopIndex = -1;\n      this.currentDecision = decision;\n      const start = performance.now();\n      const alt = super.adaptivePredict(input, decision, outerContext);\n      const stop = performance.now();\n      this.decisions[decision].timeInPrediction += stop - start;\n      this.decisions[decision].invocations++;\n      const sllLook = this.sllStopIndex - this.predictionState.startIndex + 1;\n      this.decisions[decision].sllTotalLook += sllLook;\n      this.decisions[decision].sllMinLook = this.decisions[decision].sllMinLook === 0 ? sllLook : Math.min(this.decisions[decision].sllMinLook, sllLook);\n      if (sllLook > this.decisions[decision].sllMaxLook) {\n        this.decisions[decision].sllMaxLook = sllLook;\n        this.decisions[decision].sllMaxLookEvent = {\n          decision,\n          configs: null,\n          predictedAlt: alt,\n          input,\n          startIndex: this.predictionState.startIndex,\n          stopIndex: this.sllStopIndex,\n          fullCtx: false\n        };\n      }\n      if (this.llStopIndex >= 0) {\n        const llLook = this.llStopIndex - this.predictionState.startIndex + 1;\n        this.decisions[decision].llTotalLook += llLook;\n        this.decisions[decision].llMinLook = this.decisions[decision].llMinLook === 0 ? llLook : Math.min(this.decisions[decision].llMinLook, llLook);\n        if (llLook > this.decisions[decision].llMaxLook) {\n          this.decisions[decision].llMaxLook = llLook;\n          this.decisions[decision].llMaxLookEvent = {\n            decision,\n            configs: null,\n            predictedAlt: alt,\n            input,\n            startIndex: this.predictionState.startIndex,\n            stopIndex: this.llStopIndex,\n            fullCtx: true\n          };\n        }\n      }\n      return alt;\n    } finally {\n      this.currentDecision = -1;\n    }\n  }\n  getExistingTargetState(previousD, t) {\n    this.sllStopIndex = this.predictionState.input.index;\n    const existingTargetState = super.getExistingTargetState(previousD, t);\n    if (existingTargetState !== void 0) {\n      this.decisions[this.currentDecision].sllDFATransitions++;\n      if (existingTargetState === ATNSimulator.ERROR) {\n        this.decisions[this.currentDecision].errors.push({\n          decision: this.currentDecision,\n          configs: previousD.configs,\n          input: this.predictionState.input,\n          startIndex: this.predictionState.startIndex,\n          stopIndex: this.sllStopIndex,\n          fullCtx: false\n        });\n      }\n    }\n    this.currentState = existingTargetState;\n    return existingTargetState;\n  }\n  computeTargetState(dfa, previousD, t) {\n    const state = super.computeTargetState(dfa, previousD, t);\n    this.currentState = state;\n    return state;\n  }\n  computeReachSet(closure, t, fullCtx) {\n    if (fullCtx && this.predictionState?.input) {\n      this.llStopIndex = this.predictionState.input.index;\n    }\n    const reachConfigs = super.computeReachSet(closure, t, fullCtx);\n    if (this.predictionState?.input) {\n      if (fullCtx) {\n        this.decisions[this.currentDecision].llATNTransitions++;\n        if (reachConfigs === null) {\n          this.decisions[this.currentDecision].errors.push({\n            decision: this.currentDecision,\n            configs: closure,\n            input: this.predictionState.input,\n            startIndex: this.predictionState.startIndex,\n            stopIndex: this.sllStopIndex,\n            fullCtx: true\n          });\n        }\n      } else {\n        this.decisions[this.currentDecision].sllATNTransitions++;\n        if (reachConfigs === null) {\n          this.decisions[this.currentDecision].errors.push({\n            decision: this.currentDecision,\n            configs: closure,\n            input: this.predictionState.input,\n            startIndex: this.predictionState.startIndex,\n            stopIndex: this.sllStopIndex,\n            fullCtx: false\n          });\n        }\n      }\n    }\n    return reachConfigs;\n  }\n  reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n    if (conflictingAlts !== null) {\n      this.conflictingAltResolvedBySLL = conflictingAlts.nextSetBit(0);\n    } else {\n      this.conflictingAltResolvedBySLL = configs.getAlts().nextSetBit(0);\n    }\n    this.decisions[this.currentDecision].llFallback++;\n    if (conflictingAlts) {\n      super.reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex);\n    }\n  }\n  reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {\n    if (prediction !== this.conflictingAltResolvedBySLL && this.predictionState.input) {\n      this.decisions[this.currentDecision].contextSensitivities.push({\n        decision: this.currentDecision,\n        configs,\n        input: this.predictionState.input,\n        startIndex,\n        stopIndex,\n        fullCtx: true\n      });\n    }\n    super.reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex);\n  }\n  reportAmbiguity(dfa, state, startIndex, stopIndex, exact, ambigAlts, configs) {\n    let prediction;\n    if (ambigAlts) {\n      prediction = ambigAlts.nextSetBit(0);\n    } else {\n      prediction = configs.getAlts().nextSetBit(0);\n    }\n    if (this.predictionState?.input) {\n      if (configs.fullCtx && prediction !== this.conflictingAltResolvedBySLL) {\n        this.decisions[this.currentDecision].contextSensitivities.push({\n          decision: this.currentDecision,\n          configs,\n          input: this.predictionState.input,\n          startIndex,\n          stopIndex,\n          fullCtx: true\n        });\n      }\n      this.decisions[this.currentDecision].ambiguities.push({\n        ambigAlts,\n        decision: this.currentDecision,\n        configs,\n        input: this.predictionState.input,\n        startIndex,\n        stopIndex,\n        fullCtx: configs.fullCtx\n      });\n    }\n    super.reportAmbiguity(dfa, state, startIndex, stopIndex, exact, ambigAlts, configs);\n  }\n  getDecisionInfo() {\n    return this.decisions;\n  }\n  getCurrentState() {\n    return this.currentState;\n  }\n};\n\n// src/dfa/PredPrediction.ts\nvar PredPrediction;\n((PredPrediction2) => {\n  PredPrediction2.toString = /* @__PURE__ */ __name((prediction) => {\n    return `(${prediction.pred}, ${prediction.alt})`;\n  }, \"toString\");\n})(PredPrediction || (PredPrediction = {}));\n\n// src/misc/ParseCancellationException.ts\nvar ParseCancellationException = class extends Error {\n  static {\n    __name(this, \"ParseCancellationException\");\n  }\n  constructor(e) {\n    super();\n    this.cause = e;\n  }\n};\n\n// src/misc/InterpreterDataReader.ts\nvar InterpreterDataReader = class {\n  static {\n    __name(this, \"InterpreterDataReader\");\n  }\n  /**\n   * The structure of the data file is very simple. Everything is line based with empty lines\n   * separating the different parts. For lexers the layout is:\n   * token literal names:\n   * ...\n   *\n   * token symbolic names:\n   * ...\n   *\n   * rule names:\n   * ...\n   *\n   * channel names:\n   * ...\n   *\n   * mode names:\n   * ...\n   *\n   * atn:\n   * a single line with comma separated int values, enclosed in a pair of squared brackets.\n   *\n   * Data for a parser does not contain channel and mode names.\n   */\n  static parseInterpreterData(source) {\n    const ruleNames = [];\n    const channels = [];\n    const modes = [];\n    const literalNames = [];\n    const symbolicNames = [];\n    const lines = source.split(\"\\n\");\n    let index = 0;\n    let line = lines[index++];\n    if (line !== \"token literal names:\") {\n      throw new Error(\"Unexpected data entry\");\n    }\n    do {\n      line = lines[index++];\n      if (line.length === 0) {\n        break;\n      }\n      literalNames.push(line === \"null\" ? null : line);\n    } while (true);\n    line = lines[index++];\n    if (line !== \"token symbolic names:\") {\n      throw new Error(\"Unexpected data entry\");\n    }\n    do {\n      line = lines[index++];\n      if (line.length === 0) {\n        break;\n      }\n      symbolicNames.push(line === \"null\" ? null : line);\n    } while (true);\n    line = lines[index++];\n    if (line !== \"rule names:\") {\n      throw new Error(\"Unexpected data entry\");\n    }\n    do {\n      line = lines[index++];\n      if (line.length === 0) {\n        break;\n      }\n      ruleNames.push(line);\n    } while (true);\n    line = lines[index++];\n    if (line === \"channel names:\") {\n      do {\n        line = lines[index++];\n        if (line.length === 0) {\n          break;\n        }\n        channels.push(line);\n      } while (true);\n      line = lines[index++];\n      if (line !== \"mode names:\") {\n        throw new Error(\"Unexpected data entry\");\n      }\n      do {\n        line = lines[index++];\n        if (line.length === 0) {\n          break;\n        }\n        modes.push(line);\n      } while (true);\n    }\n    line = lines[index++];\n    if (line !== \"atn:\") {\n      throw new Error(\"Unexpected data entry\");\n    }\n    line = lines[index++];\n    const elements = line.split(\",\");\n    let value;\n    const serializedATN = [];\n    for (let i = 0; i < elements.length; ++i) {\n      const element = elements[i];\n      if (element.startsWith(\"[\")) {\n        value = Number(element.substring(1).trim());\n      } else if (element.endsWith(\"]\")) {\n        value = Number(element.substring(0, element.length - 1).trim());\n      } else {\n        value = Number(element.trim());\n      }\n      serializedATN[i] = value;\n    }\n    const deserializer = new ATNDeserializer();\n    return {\n      atn: deserializer.deserialize(serializedATN),\n      vocabulary: new Vocabulary(literalNames, symbolicNames, []),\n      ruleNames,\n      channels: channels.length > 0 ? channels : void 0,\n      modes: modes.length > 0 ? modes : void 0\n    };\n  }\n};\n\n// src/tree/AbstractParseTreeVisitor.ts\nvar AbstractParseTreeVisitor = class {\n  static {\n    __name(this, \"AbstractParseTreeVisitor\");\n  }\n  visit(tree) {\n    return tree.accept(this);\n  }\n  visitChildren(node) {\n    let result = this.defaultResult();\n    const n2 = node.getChildCount();\n    for (let i = 0; i < n2; i++) {\n      if (!this.shouldVisitNextChild(node, result)) {\n        break;\n      }\n      const c = node.getChild(i);\n      if (c) {\n        const childResult = c.accept(this);\n        result = this.aggregateResult(result, childResult);\n      }\n    }\n    return result;\n  }\n  visitTerminal(_node) {\n    return this.defaultResult();\n  }\n  visitErrorNode(_node) {\n    return this.defaultResult();\n  }\n  defaultResult() {\n    return null;\n  }\n  shouldVisitNextChild(_node, _currentResult) {\n    return true;\n  }\n  aggregateResult(aggregate, nextResult) {\n    return nextResult;\n  }\n};\n\n// src/tree/ParseTreeWalker.ts\nvar ParseTreeWalker = class _ParseTreeWalker {\n  static {\n    __name(this, \"ParseTreeWalker\");\n  }\n  static DEFAULT = new _ParseTreeWalker();\n  /**\n   * Performs a walk on the given parse tree starting at the root and going down recursively\n   * with depth-first search. On each node, {@link ParseTreeWalker.enterRule} is called before\n   * recursively walking down into child nodes, then\n   * {@link ParseTreeWalker.exitRule} is called after the recursive call to wind up.\n   *\n   * @param listener The listener used by the walker to process grammar rules\n   * @param t The parse tree to be walked on\n   */\n  walk(listener, t) {\n    const errorNode = t instanceof ErrorNode;\n    if (errorNode) {\n      listener.visitErrorNode(t);\n    } else if (t instanceof TerminalNode) {\n      listener.visitTerminal(t);\n    } else {\n      const r = t;\n      this.enterRule(listener, r);\n      for (let i = 0; i < t.getChildCount(); i++) {\n        this.walk(listener, t.getChild(i));\n      }\n      this.exitRule(listener, r);\n    }\n  }\n  /**\n   * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener.enterEveryRule}\n   * then by triggering the event specific to the given parse tree node\n   *\n   * @param listener The listener responding to the trigger events\n   * @param r The grammar rule containing the rule context\n   */\n  enterRule(listener, r) {\n    const ctx = r.ruleContext;\n    listener.enterEveryRule(ctx);\n    ctx.enterRule(listener);\n  }\n  /**\n   * Exits a grammar rule by first triggering the event specific to the given parse tree node\n   * then by triggering the generic event {@link ParseTreeListener.exitEveryRule}\n   *\n   * @param listener The listener responding to the trigger events\n   * @param r The grammar rule containing the rule context\n   */\n  exitRule(listener, r) {\n    const ctx = r.ruleContext;\n    ctx.exitRule(listener);\n    listener.exitEveryRule(ctx);\n  }\n};\n\n// src/CharStream.ts\nvar CharStream;\n((CharStream2) => {\n  CharStream2.fromString = /* @__PURE__ */ __name((str) => {\n    return new CharStreamImpl(str);\n  }, \"fromString\");\n})(CharStream || (CharStream = {}));\nvar CharStreamImpl = class {\n  static {\n    __name(this, \"CharStreamImpl\");\n  }\n  name = \"\";\n  index = 0;\n  data;\n  constructor(input) {\n    const codePoints = [];\n    for (const char of input) {\n      codePoints.push(char.codePointAt(0));\n    }\n    this.data = new Uint32Array(codePoints);\n  }\n  /**\n   * Reset the stream so that it's in the same state it was\n   * when the object was created *except* the data array is not\n   * touched.\n   */\n  reset() {\n    this.index = 0;\n  }\n  consume() {\n    if (this.index >= this.data.length) {\n      throw new Error(\"cannot consume EOF\");\n    }\n    this.index += 1;\n  }\n  LA(offset) {\n    if (offset === 0) {\n      return 0;\n    }\n    if (offset < 0) {\n      offset += 1;\n    }\n    const pos = this.index + offset - 1;\n    if (pos < 0 || pos >= this.data.length) {\n      return Token.EOF;\n    }\n    return this.data[pos];\n  }\n  // mark/release do nothing; we have entire buffer\n  mark() {\n    return -1;\n  }\n  release(_marker) {\n  }\n  /**\n   * consume() ahead until p==_index; can't just set p=_index as we must\n   * update line and column. If we seek backwards, just set p\n   */\n  seek(index) {\n    if (index <= this.index) {\n      this.index = index;\n      return;\n    }\n    this.index = Math.min(index, this.data.length);\n  }\n  getTextFromRange(start, stop) {\n    stop = stop ?? this.data.length - 1;\n    if (stop >= this.data.length) {\n      stop = this.data.length - 1;\n    }\n    if (start >= this.data.length) {\n      return \"\";\n    }\n    return this.stringFromRange(start, stop + 1);\n  }\n  getTextFromInterval(interval) {\n    const start = interval.start;\n    let stop = interval.stop;\n    if (stop >= this.data.length) {\n      stop = this.data.length - 1;\n    }\n    if (start >= this.data.length) {\n      return \"\";\n    }\n    return this.stringFromRange(start, stop + 1);\n  }\n  toString() {\n    return this.stringFromRange(0);\n  }\n  get size() {\n    return this.data.length;\n  }\n  getSourceName() {\n    if (this.name) {\n      return this.name;\n    }\n    return IntStream.UNKNOWN_SOURCE_NAME;\n  }\n  stringFromRange(start, stop) {\n    const data = this.data.slice(start, stop);\n    let result = \"\";\n    data.forEach((value) => {\n      result += String.fromCodePoint(value);\n    });\n    return result;\n  }\n};\n\n// src/WritableToken.ts\nvar isWritableToken = /* @__PURE__ */ __name((candidate) => {\n  return candidate.setText !== void 0;\n}, \"isWritableToken\");\n\n// src/BufferedTokenStream.ts\nvar BufferedTokenStream = class {\n  static {\n    __name(this, \"BufferedTokenStream\");\n  }\n  /**\n   * The {@link TokenSource} from which tokens for this stream are fetched.\n   */\n  tokenSource;\n  /**\n   * A collection of all tokens fetched from the token source. The list is\n   * considered a complete view of the input once {@link fetchedEOF} is set\n   * to `true`.\n   */\n  tokens = [];\n  /**\n   * The index into {@link tokens} of the current token (next token to\n   * {@link consume}). {@link tokens}`[p]` should be\n   * {@link LT LT(1)}.\n   *\n   * This field is set to -1 when the stream is first constructed or when\n   * {@link setTokenSource} is called, indicating that the first token has\n   * not yet been fetched from the token source. For additional information,\n   * see the documentation of {@link IntStream} for a description of\n   * Initializing Methods.\n   */\n  p = -1;\n  /**\n   * Indicates whether the {@link Token.EOF} token has been fetched from\n   * {@link tokenSource} and added to {@link tokens}. This field improves\n   * performance for the following cases:\n   *\n   * - {@link consume}: The lookahead check in {@link consume} to prevent\n   * consuming the EOF symbol is optimized by checking the values of\n   * {@link fetchedEOF} and {@link p} instead of calling {@link LA}.\n   * - {@link fetch}: The check to prevent adding multiple EOF symbols into\n   * {@link tokens} is trivial with this field.\n   */\n  fetchedEOF = false;\n  constructor(tokenSource) {\n    this.tokenSource = tokenSource;\n  }\n  mark() {\n    return 0;\n  }\n  release(_marker) {\n  }\n  reset() {\n    this.seek(0);\n  }\n  seek(index) {\n    this.lazyInit();\n    this.p = this.adjustSeekIndex(index);\n  }\n  get size() {\n    return this.tokens.length;\n  }\n  get index() {\n    return this.p;\n  }\n  get(index) {\n    this.lazyInit();\n    return this.tokens[index];\n  }\n  consume() {\n    let skipEofCheck = false;\n    if (this.p >= 0) {\n      if (this.fetchedEOF) {\n        skipEofCheck = this.p < this.tokens.length - 1;\n      } else {\n        skipEofCheck = this.p < this.tokens.length;\n      }\n    } else {\n      skipEofCheck = false;\n    }\n    if (!skipEofCheck && this.LA(1) === Token.EOF) {\n      throw new Error(\"cannot consume EOF\");\n    }\n    if (this.sync(this.p + 1)) {\n      this.p = this.adjustSeekIndex(this.p + 1);\n    }\n  }\n  /**\n   * Make sure index `i` in tokens has a token.\n   *\n   * @returns {boolean} `true` if a token is located at index `i`, otherwise `false`.\n   */\n  sync(i) {\n    const n2 = i - this.tokens.length + 1;\n    if (n2 > 0) {\n      const fetched = this.fetch(n2);\n      return fetched >= n2;\n    }\n    return true;\n  }\n  /**\n   * Add `n` elements to buffer.\n   *\n   * @returns {number} The actual number of elements added to the buffer.\n   */\n  fetch(n2) {\n    if (this.fetchedEOF) {\n      return 0;\n    }\n    for (let i = 0; i < n2; i++) {\n      const t = this.tokenSource.nextToken();\n      if (isWritableToken(t)) {\n        t.tokenIndex = this.tokens.length;\n      }\n      this.tokens.push(t);\n      if (t.type === Token.EOF) {\n        this.fetchedEOF = true;\n        return i + 1;\n      }\n    }\n    return n2;\n  }\n  /** Get all tokens from start..stop, inclusively. */\n  getTokens(start, stop, types) {\n    this.lazyInit();\n    if (start === void 0 && stop === void 0) {\n      return this.tokens;\n    }\n    start ??= 0;\n    if (stop === void 0) {\n      stop = this.tokens.length - 1;\n    }\n    if (start < 0 || stop >= this.tokens.length || stop < 0 || start >= this.tokens.length) {\n      throw new RangeError(\"start \" + start + \" or stop \" + stop + \" not in 0..\" + (this.tokens.length - 1));\n    }\n    if (start > stop) {\n      return [];\n    }\n    if (types === void 0) {\n      return this.tokens.slice(start, stop + 1);\n    }\n    const subset = [];\n    if (stop >= this.tokens.length) {\n      stop = this.tokens.length - 1;\n    }\n    for (let i = start; i < stop; i++) {\n      const t = this.tokens[i];\n      if (t.type === Token.EOF) {\n        subset.push(t);\n        break;\n      }\n      if (types.has(t.type)) {\n        subset.push(t);\n      }\n    }\n    return subset;\n  }\n  LA(k) {\n    return this.LT(k)?.type ?? Token.INVALID_TYPE;\n  }\n  LB(k) {\n    if (this.p - k < 0) {\n      return null;\n    }\n    return this.tokens[this.p - k];\n  }\n  LT(k) {\n    this.lazyInit();\n    if (k === 0) {\n      return null;\n    }\n    if (k < 0) {\n      return this.LB(-k);\n    }\n    const i = this.p + k - 1;\n    this.sync(i);\n    if (i >= this.tokens.length) {\n      return this.tokens[this.tokens.length - 1];\n    }\n    return this.tokens[i];\n  }\n  /**\n   * Allowed derived classes to modify the behavior of operations which change\n   * the current stream position by adjusting the target token index of a seek\n   * operation. The default implementation simply returns `i`. If an\n   * exception is thrown in this method, the current stream index should not be\n   * changed.\n   *\n   * For example, {@link CommonTokenStream} overrides this method to ensure that\n   * the seek target is always an on-channel token.\n   *\n   * @param  i The target token index.\n   *\n   * @returns The adjusted target token index.\n   */\n  adjustSeekIndex(i) {\n    return i;\n  }\n  lazyInit() {\n    if (this.p === -1) {\n      this.setup();\n    }\n  }\n  setup() {\n    this.sync(0);\n    this.p = this.adjustSeekIndex(0);\n  }\n  /** Reset this token stream by setting its token source. */\n  setTokenSource(tokenSource) {\n    this.tokenSource = tokenSource;\n    this.tokens = [];\n    this.p = -1;\n    this.fetchedEOF = false;\n  }\n  /**\n   * Given a starting index, return the index of the next token on channel.\n   * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n   * on channel between i and EOF.\n   */\n  nextTokenOnChannel(i, channel) {\n    this.sync(i);\n    if (i >= this.tokens.length) {\n      return -1;\n    }\n    let token = this.tokens[i];\n    while (token.channel !== channel) {\n      if (token.type === Token.EOF) {\n        return -1;\n      }\n      i += 1;\n      this.sync(i);\n      token = this.tokens[i];\n    }\n    return i;\n  }\n  /**\n   * Given a starting index, return the index of the previous token on\n   * channel. Return `i` if `tokens[i]` is on channel. Return -1\n   * if there are no tokens on channel between `i` and 0.\n   *\n   * If `i` specifies an index at or after the EOF token, the EOF token\n   * index is returned. This is due to the fact that the EOF token is treated\n   * as though it were on every channel.\n   */\n  previousTokenOnChannel(i, channel) {\n    if (i >= this.tokens.length) {\n      return this.tokens.length - 1;\n    }\n    while (i >= 0) {\n      const token = this.tokens[i];\n      if (token.type === Token.EOF || token.channel === channel) {\n        return i;\n      }\n      --i;\n    }\n    return i;\n  }\n  /**\n   * Collect all tokens on specified channel to the right of\n   * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n   * EOF. If channel is -1, find any non default channel token.\n   */\n  getHiddenTokensToRight(tokenIndex, channel) {\n    if (channel === void 0) {\n      channel = -1;\n    }\n    this.lazyInit();\n    if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n      throw new Error(`${tokenIndex} not in 0..${this.tokens.length - 1}`);\n    }\n    const nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n    const from = tokenIndex + 1;\n    const to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n    return this.filterForChannel(from, to, channel);\n  }\n  /**\n   * Collect all tokens on specified channel to the left of\n   * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n   * If channel is -1, find any non default channel token.\n   */\n  getHiddenTokensToLeft(tokenIndex, channel) {\n    if (channel === void 0) {\n      channel = -1;\n    }\n    this.lazyInit();\n    if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n      throw new Error(`${tokenIndex} not in 0..${this.tokens.length - 1}`);\n    }\n    const prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n    if (prevOnChannel === tokenIndex - 1) {\n      return void 0;\n    }\n    const from = prevOnChannel + 1;\n    const to = tokenIndex - 1;\n    return this.filterForChannel(from, to, channel);\n  }\n  filterForChannel(left, right, channel) {\n    const hidden = [];\n    for (let i = left; i < right + 1; i++) {\n      const t = this.tokens[i];\n      if (channel === -1) {\n        if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n          hidden.push(t);\n        }\n      } else if (t.channel === channel) {\n        hidden.push(t);\n      }\n    }\n    if (hidden.length === 0) {\n      return void 0;\n    }\n    return hidden;\n  }\n  getSourceName() {\n    return this.tokenSource.sourceName;\n  }\n  /** Get the text of all tokens in this buffer. */\n  getText() {\n    return this.getTextFromInterval(Interval.of(0, this.size - 1));\n  }\n  getTextFromInterval(interval) {\n    const start = interval.start;\n    let stop = interval.stop;\n    if (start < 0 || stop < 0) {\n      return \"\";\n    }\n    this.sync(stop);\n    if (stop >= this.tokens.length) {\n      stop = this.tokens.length - 1;\n    }\n    let result = \"\";\n    for (let i = start; i <= stop; ++i) {\n      const t = this.tokens[i];\n      if (t.type === Token.EOF) {\n        break;\n      }\n      result += t.text;\n    }\n    return result;\n  }\n  getTextFromContext(ctx) {\n    return this.getTextFromInterval(ctx.getSourceInterval());\n  }\n  getTextFromRange(start, stop) {\n    if (start !== null && stop !== null) {\n      return this.getTextFromInterval(Interval.of(start.tokenIndex, stop.tokenIndex));\n    }\n    return \"\";\n  }\n  /** Get all tokens from lexer until EOF. */\n  fill() {\n    this.lazyInit();\n    while (this.fetch(1e3) === 1e3) {\n      ;\n    }\n  }\n  setLine(line) {\n    this.tokenSource.line = line;\n  }\n  setColumn(column) {\n    this.tokenSource.column = column;\n  }\n};\n\n// src/CommonTokenStream.ts\nvar CommonTokenStream = class extends BufferedTokenStream {\n  static {\n    __name(this, \"CommonTokenStream\");\n  }\n  /**\n   * Specifies the channel to use for filtering tokens.\n   *\n   *\n   * The default value is {@link Token.DEFAULT_CHANNEL}, which matches the\n   * default channel assigned to tokens created by the lexer.\n   */\n  channel = Token.DEFAULT_CHANNEL;\n  constructor(lexer, channel) {\n    super(lexer);\n    this.channel = channel ?? Token.DEFAULT_CHANNEL;\n  }\n  adjustSeekIndex(i) {\n    return this.nextTokenOnChannel(i, this.channel);\n  }\n  LB(k) {\n    if (k === 0 || this.index - k < 0) {\n      return null;\n    }\n    let i = this.index;\n    let n2 = 1;\n    while (n2 <= k) {\n      i = this.previousTokenOnChannel(i - 1, this.channel);\n      n2 += 1;\n    }\n    if (i < 0) {\n      return null;\n    }\n    return this.tokens[i];\n  }\n  LT(k) {\n    this.lazyInit();\n    if (k === 0) {\n      return null;\n    }\n    if (k < 0) {\n      return this.LB(-k);\n    }\n    let i = this.index;\n    let n2 = 1;\n    while (n2 < k) {\n      if (this.sync(i + 1)) {\n        i = this.nextTokenOnChannel(i + 1, this.channel);\n      }\n      n2 += 1;\n    }\n    return this.tokens[i];\n  }\n  // Count EOF just once.\n  getNumberOfOnChannelTokens() {\n    let n2 = 0;\n    this.fill();\n    for (const t of this.tokens) {\n      if (t.channel === this.channel) {\n        n2 += 1;\n      }\n      if (t.type === Token.EOF) {\n        break;\n      }\n    }\n    return n2;\n  }\n};\n\n// src/tree/xpath/XPathLexer.ts\nvar XPathLexer = class _XPathLexer extends Lexer {\n  static {\n    __name(this, \"XPathLexer\");\n  }\n  static TOKEN_REF = 1;\n  static RULE_REF = 2;\n  static ANYWHERE = 3;\n  static ROOT = 4;\n  static WILDCARD = 5;\n  static BANG = 6;\n  static ID = 7;\n  static STRING = 8;\n  static channelNames = [\n    \"DEFAULT_TOKEN_CHANNEL\",\n    \"HIDDEN\"\n  ];\n  static literalNames = [\n    null,\n    null,\n    null,\n    \"'//'\",\n    \"'/'\",\n    \"'*'\",\n    \"'!'\"\n  ];\n  static symbolicNames = [\n    null,\n    \"TOKEN_REF\",\n    \"RULE_REF\",\n    \"ANYWHERE\",\n    \"ROOT\",\n    \"WILDCARD\",\n    \"BANG\",\n    \"ID\",\n    \"STRING\"\n  ];\n  static modeNames = [\n    \"DEFAULT_MODE\"\n  ];\n  static ruleNames = [\n    \"ANYWHERE\",\n    \"ROOT\",\n    \"WILDCARD\",\n    \"BANG\",\n    \"ID\",\n    \"NameChar\",\n    \"NameStartChar\",\n    \"STRING\"\n  ];\n  constructor(input) {\n    super(input);\n    this.interpreter = new LexerATNSimulator(this, _XPathLexer._ATN, _XPathLexer.decisionsToDFA, new PredictionContextCache());\n  }\n  get grammarFileName() {\n    return \"XPathLexer.g4\";\n  }\n  get literalNames() {\n    return _XPathLexer.literalNames;\n  }\n  get symbolicNames() {\n    return _XPathLexer.symbolicNames;\n  }\n  get ruleNames() {\n    return _XPathLexer.ruleNames;\n  }\n  get serializedATN() {\n    return _XPathLexer._serializedATN;\n  }\n  get channelNames() {\n    return _XPathLexer.channelNames;\n  }\n  get modeNames() {\n    return _XPathLexer.modeNames;\n  }\n  action(localContext, ruleIndex, actionIndex) {\n    switch (ruleIndex) {\n      case 4:\n        this.ID_action(localContext, actionIndex);\n        break;\n    }\n  }\n  ID_action(localContext, actionIndex) {\n    switch (actionIndex) {\n      case 0:\n        const text = this.text;\n        if (text.charAt(0) === text.charAt(0).toUpperCase()) {\n          this.type = _XPathLexer.TOKEN_REF;\n        } else {\n          this.type = _XPathLexer.RULE_REF;\n        }\n        break;\n    }\n  }\n  static _serializedATN = [\n    4,\n    0,\n    8,\n    48,\n    6,\n    -1,\n    2,\n    0,\n    7,\n    0,\n    2,\n    1,\n    7,\n    1,\n    2,\n    2,\n    7,\n    2,\n    2,\n    3,\n    7,\n    3,\n    2,\n    4,\n    7,\n    4,\n    2,\n    5,\n    7,\n    5,\n    2,\n    6,\n    7,\n    6,\n    2,\n    7,\n    7,\n    7,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    2,\n    1,\n    2,\n    1,\n    3,\n    1,\n    3,\n    1,\n    4,\n    1,\n    4,\n    5,\n    4,\n    29,\n    8,\n    4,\n    10,\n    4,\n    12,\n    4,\n    32,\n    9,\n    4,\n    1,\n    4,\n    1,\n    4,\n    1,\n    5,\n    1,\n    5,\n    1,\n    6,\n    1,\n    6,\n    1,\n    7,\n    1,\n    7,\n    5,\n    7,\n    42,\n    8,\n    7,\n    10,\n    7,\n    12,\n    7,\n    45,\n    9,\n    7,\n    1,\n    7,\n    1,\n    7,\n    1,\n    43,\n    0,\n    8,\n    1,\n    3,\n    3,\n    4,\n    5,\n    5,\n    7,\n    6,\n    9,\n    7,\n    11,\n    0,\n    13,\n    0,\n    15,\n    8,\n    1,\n    0,\n    2,\n    784,\n    0,\n    0,\n    8,\n    14,\n    27,\n    48,\n    57,\n    65,\n    90,\n    95,\n    95,\n    97,\n    122,\n    127,\n    159,\n    170,\n    170,\n    173,\n    173,\n    181,\n    181,\n    186,\n    186,\n    192,\n    214,\n    216,\n    246,\n    248,\n    705,\n    710,\n    721,\n    736,\n    740,\n    748,\n    748,\n    750,\n    750,\n    768,\n    884,\n    886,\n    887,\n    890,\n    893,\n    895,\n    895,\n    902,\n    902,\n    904,\n    906,\n    908,\n    908,\n    910,\n    929,\n    931,\n    1013,\n    1015,\n    1153,\n    1155,\n    1159,\n    1162,\n    1327,\n    1329,\n    1366,\n    1369,\n    1369,\n    1376,\n    1416,\n    1425,\n    1469,\n    1471,\n    1471,\n    1473,\n    1474,\n    1476,\n    1477,\n    1479,\n    1479,\n    1488,\n    1514,\n    1519,\n    1522,\n    1536,\n    1541,\n    1552,\n    1562,\n    1564,\n    1564,\n    1568,\n    1641,\n    1646,\n    1747,\n    1749,\n    1757,\n    1759,\n    1768,\n    1770,\n    1788,\n    1791,\n    1791,\n    1807,\n    1866,\n    1869,\n    1969,\n    1984,\n    2037,\n    2042,\n    2042,\n    2045,\n    2045,\n    2048,\n    2093,\n    2112,\n    2139,\n    2144,\n    2154,\n    2160,\n    2183,\n    2185,\n    2190,\n    2192,\n    2193,\n    2200,\n    2403,\n    2406,\n    2415,\n    2417,\n    2435,\n    2437,\n    2444,\n    2447,\n    2448,\n    2451,\n    2472,\n    2474,\n    2480,\n    2482,\n    2482,\n    2486,\n    2489,\n    2492,\n    2500,\n    2503,\n    2504,\n    2507,\n    2510,\n    2519,\n    2519,\n    2524,\n    2525,\n    2527,\n    2531,\n    2534,\n    2545,\n    2556,\n    2556,\n    2558,\n    2558,\n    2561,\n    2563,\n    2565,\n    2570,\n    2575,\n    2576,\n    2579,\n    2600,\n    2602,\n    2608,\n    2610,\n    2611,\n    2613,\n    2614,\n    2616,\n    2617,\n    2620,\n    2620,\n    2622,\n    2626,\n    2631,\n    2632,\n    2635,\n    2637,\n    2641,\n    2641,\n    2649,\n    2652,\n    2654,\n    2654,\n    2662,\n    2677,\n    2689,\n    2691,\n    2693,\n    2701,\n    2703,\n    2705,\n    2707,\n    2728,\n    2730,\n    2736,\n    2738,\n    2739,\n    2741,\n    2745,\n    2748,\n    2757,\n    2759,\n    2761,\n    2763,\n    2765,\n    2768,\n    2768,\n    2784,\n    2787,\n    2790,\n    2799,\n    2809,\n    2815,\n    2817,\n    2819,\n    2821,\n    2828,\n    2831,\n    2832,\n    2835,\n    2856,\n    2858,\n    2864,\n    2866,\n    2867,\n    2869,\n    2873,\n    2876,\n    2884,\n    2887,\n    2888,\n    2891,\n    2893,\n    2901,\n    2903,\n    2908,\n    2909,\n    2911,\n    2915,\n    2918,\n    2927,\n    2929,\n    2929,\n    2946,\n    2947,\n    2949,\n    2954,\n    2958,\n    2960,\n    2962,\n    2965,\n    2969,\n    2970,\n    2972,\n    2972,\n    2974,\n    2975,\n    2979,\n    2980,\n    2984,\n    2986,\n    2990,\n    3001,\n    3006,\n    3010,\n    3014,\n    3016,\n    3018,\n    3021,\n    3024,\n    3024,\n    3031,\n    3031,\n    3046,\n    3055,\n    3072,\n    3084,\n    3086,\n    3088,\n    3090,\n    3112,\n    3114,\n    3129,\n    3132,\n    3140,\n    3142,\n    3144,\n    3146,\n    3149,\n    3157,\n    3158,\n    3160,\n    3162,\n    3165,\n    3165,\n    3168,\n    3171,\n    3174,\n    3183,\n    3200,\n    3203,\n    3205,\n    3212,\n    3214,\n    3216,\n    3218,\n    3240,\n    3242,\n    3251,\n    3253,\n    3257,\n    3260,\n    3268,\n    3270,\n    3272,\n    3274,\n    3277,\n    3285,\n    3286,\n    3293,\n    3294,\n    3296,\n    3299,\n    3302,\n    3311,\n    3313,\n    3315,\n    3328,\n    3340,\n    3342,\n    3344,\n    3346,\n    3396,\n    3398,\n    3400,\n    3402,\n    3406,\n    3412,\n    3415,\n    3423,\n    3427,\n    3430,\n    3439,\n    3450,\n    3455,\n    3457,\n    3459,\n    3461,\n    3478,\n    3482,\n    3505,\n    3507,\n    3515,\n    3517,\n    3517,\n    3520,\n    3526,\n    3530,\n    3530,\n    3535,\n    3540,\n    3542,\n    3542,\n    3544,\n    3551,\n    3558,\n    3567,\n    3570,\n    3571,\n    3585,\n    3642,\n    3648,\n    3662,\n    3664,\n    3673,\n    3713,\n    3714,\n    3716,\n    3716,\n    3718,\n    3722,\n    3724,\n    3747,\n    3749,\n    3749,\n    3751,\n    3773,\n    3776,\n    3780,\n    3782,\n    3782,\n    3784,\n    3790,\n    3792,\n    3801,\n    3804,\n    3807,\n    3840,\n    3840,\n    3864,\n    3865,\n    3872,\n    3881,\n    3893,\n    3893,\n    3895,\n    3895,\n    3897,\n    3897,\n    3902,\n    3911,\n    3913,\n    3948,\n    3953,\n    3972,\n    3974,\n    3991,\n    3993,\n    4028,\n    4038,\n    4038,\n    4096,\n    4169,\n    4176,\n    4253,\n    4256,\n    4293,\n    4295,\n    4295,\n    4301,\n    4301,\n    4304,\n    4346,\n    4348,\n    4680,\n    4682,\n    4685,\n    4688,\n    4694,\n    4696,\n    4696,\n    4698,\n    4701,\n    4704,\n    4744,\n    4746,\n    4749,\n    4752,\n    4784,\n    4786,\n    4789,\n    4792,\n    4798,\n    4800,\n    4800,\n    4802,\n    4805,\n    4808,\n    4822,\n    4824,\n    4880,\n    4882,\n    4885,\n    4888,\n    4954,\n    4957,\n    4959,\n    4992,\n    5007,\n    5024,\n    5109,\n    5112,\n    5117,\n    5121,\n    5740,\n    5743,\n    5759,\n    5761,\n    5786,\n    5792,\n    5866,\n    5870,\n    5880,\n    5888,\n    5909,\n    5919,\n    5940,\n    5952,\n    5971,\n    5984,\n    5996,\n    5998,\n    6e3,\n    6002,\n    6003,\n    6016,\n    6099,\n    6103,\n    6103,\n    6108,\n    6109,\n    6112,\n    6121,\n    6155,\n    6169,\n    6176,\n    6264,\n    6272,\n    6314,\n    6320,\n    6389,\n    6400,\n    6430,\n    6432,\n    6443,\n    6448,\n    6459,\n    6470,\n    6509,\n    6512,\n    6516,\n    6528,\n    6571,\n    6576,\n    6601,\n    6608,\n    6617,\n    6656,\n    6683,\n    6688,\n    6750,\n    6752,\n    6780,\n    6783,\n    6793,\n    6800,\n    6809,\n    6823,\n    6823,\n    6832,\n    6845,\n    6847,\n    6862,\n    6912,\n    6988,\n    6992,\n    7001,\n    7019,\n    7027,\n    7040,\n    7155,\n    7168,\n    7223,\n    7232,\n    7241,\n    7245,\n    7293,\n    7296,\n    7304,\n    7312,\n    7354,\n    7357,\n    7359,\n    7376,\n    7378,\n    7380,\n    7418,\n    7424,\n    7957,\n    7960,\n    7965,\n    7968,\n    8005,\n    8008,\n    8013,\n    8016,\n    8023,\n    8025,\n    8025,\n    8027,\n    8027,\n    8029,\n    8029,\n    8031,\n    8061,\n    8064,\n    8116,\n    8118,\n    8124,\n    8126,\n    8126,\n    8130,\n    8132,\n    8134,\n    8140,\n    8144,\n    8147,\n    8150,\n    8155,\n    8160,\n    8172,\n    8178,\n    8180,\n    8182,\n    8188,\n    8203,\n    8207,\n    8234,\n    8238,\n    8255,\n    8256,\n    8276,\n    8276,\n    8288,\n    8292,\n    8294,\n    8303,\n    8305,\n    8305,\n    8319,\n    8319,\n    8336,\n    8348,\n    8400,\n    8412,\n    8417,\n    8417,\n    8421,\n    8432,\n    8450,\n    8450,\n    8455,\n    8455,\n    8458,\n    8467,\n    8469,\n    8469,\n    8473,\n    8477,\n    8484,\n    8484,\n    8486,\n    8486,\n    8488,\n    8488,\n    8490,\n    8493,\n    8495,\n    8505,\n    8508,\n    8511,\n    8517,\n    8521,\n    8526,\n    8526,\n    8544,\n    8584,\n    11264,\n    11492,\n    11499,\n    11507,\n    11520,\n    11557,\n    11559,\n    11559,\n    11565,\n    11565,\n    11568,\n    11623,\n    11631,\n    11631,\n    11647,\n    11670,\n    11680,\n    11686,\n    11688,\n    11694,\n    11696,\n    11702,\n    11704,\n    11710,\n    11712,\n    11718,\n    11720,\n    11726,\n    11728,\n    11734,\n    11736,\n    11742,\n    11744,\n    11775,\n    11823,\n    11823,\n    12293,\n    12295,\n    12321,\n    12335,\n    12337,\n    12341,\n    12344,\n    12348,\n    12353,\n    12438,\n    12441,\n    12442,\n    12445,\n    12447,\n    12449,\n    12538,\n    12540,\n    12543,\n    12549,\n    12591,\n    12593,\n    12686,\n    12704,\n    12735,\n    12784,\n    12799,\n    13312,\n    19903,\n    19968,\n    42124,\n    42192,\n    42237,\n    42240,\n    42508,\n    42512,\n    42539,\n    42560,\n    42607,\n    42612,\n    42621,\n    42623,\n    42737,\n    42775,\n    42783,\n    42786,\n    42888,\n    42891,\n    42954,\n    42960,\n    42961,\n    42963,\n    42963,\n    42965,\n    42969,\n    42994,\n    43047,\n    43052,\n    43052,\n    43072,\n    43123,\n    43136,\n    43205,\n    43216,\n    43225,\n    43232,\n    43255,\n    43259,\n    43259,\n    43261,\n    43309,\n    43312,\n    43347,\n    43360,\n    43388,\n    43392,\n    43456,\n    43471,\n    43481,\n    43488,\n    43518,\n    43520,\n    43574,\n    43584,\n    43597,\n    43600,\n    43609,\n    43616,\n    43638,\n    43642,\n    43714,\n    43739,\n    43741,\n    43744,\n    43759,\n    43762,\n    43766,\n    43777,\n    43782,\n    43785,\n    43790,\n    43793,\n    43798,\n    43808,\n    43814,\n    43816,\n    43822,\n    43824,\n    43866,\n    43868,\n    43881,\n    43888,\n    44010,\n    44012,\n    44013,\n    44016,\n    44025,\n    44032,\n    55203,\n    55216,\n    55238,\n    55243,\n    55291,\n    63744,\n    64109,\n    64112,\n    64217,\n    64256,\n    64262,\n    64275,\n    64279,\n    64285,\n    64296,\n    64298,\n    64310,\n    64312,\n    64316,\n    64318,\n    64318,\n    64320,\n    64321,\n    64323,\n    64324,\n    64326,\n    64433,\n    64467,\n    64829,\n    64848,\n    64911,\n    64914,\n    64967,\n    65008,\n    65019,\n    65024,\n    65039,\n    65056,\n    65071,\n    65075,\n    65076,\n    65101,\n    65103,\n    65136,\n    65140,\n    65142,\n    65276,\n    65279,\n    65279,\n    65296,\n    65305,\n    65313,\n    65338,\n    65343,\n    65343,\n    65345,\n    65370,\n    65382,\n    65470,\n    65474,\n    65479,\n    65482,\n    65487,\n    65490,\n    65495,\n    65498,\n    65500,\n    65529,\n    65531,\n    65536,\n    65547,\n    65549,\n    65574,\n    65576,\n    65594,\n    65596,\n    65597,\n    65599,\n    65613,\n    65616,\n    65629,\n    65664,\n    65786,\n    65856,\n    65908,\n    66045,\n    66045,\n    66176,\n    66204,\n    66208,\n    66256,\n    66272,\n    66272,\n    66304,\n    66335,\n    66349,\n    66378,\n    66384,\n    66426,\n    66432,\n    66461,\n    66464,\n    66499,\n    66504,\n    66511,\n    66513,\n    66517,\n    66560,\n    66717,\n    66720,\n    66729,\n    66736,\n    66771,\n    66776,\n    66811,\n    66816,\n    66855,\n    66864,\n    66915,\n    66928,\n    66938,\n    66940,\n    66954,\n    66956,\n    66962,\n    66964,\n    66965,\n    66967,\n    66977,\n    66979,\n    66993,\n    66995,\n    67001,\n    67003,\n    67004,\n    67072,\n    67382,\n    67392,\n    67413,\n    67424,\n    67431,\n    67456,\n    67461,\n    67463,\n    67504,\n    67506,\n    67514,\n    67584,\n    67589,\n    67592,\n    67592,\n    67594,\n    67637,\n    67639,\n    67640,\n    67644,\n    67644,\n    67647,\n    67669,\n    67680,\n    67702,\n    67712,\n    67742,\n    67808,\n    67826,\n    67828,\n    67829,\n    67840,\n    67861,\n    67872,\n    67897,\n    67968,\n    68023,\n    68030,\n    68031,\n    68096,\n    68099,\n    68101,\n    68102,\n    68108,\n    68115,\n    68117,\n    68119,\n    68121,\n    68149,\n    68152,\n    68154,\n    68159,\n    68159,\n    68192,\n    68220,\n    68224,\n    68252,\n    68288,\n    68295,\n    68297,\n    68326,\n    68352,\n    68405,\n    68416,\n    68437,\n    68448,\n    68466,\n    68480,\n    68497,\n    68608,\n    68680,\n    68736,\n    68786,\n    68800,\n    68850,\n    68864,\n    68903,\n    68912,\n    68921,\n    69248,\n    69289,\n    69291,\n    69292,\n    69296,\n    69297,\n    69373,\n    69404,\n    69415,\n    69415,\n    69424,\n    69456,\n    69488,\n    69509,\n    69552,\n    69572,\n    69600,\n    69622,\n    69632,\n    69702,\n    69734,\n    69749,\n    69759,\n    69818,\n    69821,\n    69821,\n    69826,\n    69826,\n    69837,\n    69837,\n    69840,\n    69864,\n    69872,\n    69881,\n    69888,\n    69940,\n    69942,\n    69951,\n    69956,\n    69959,\n    69968,\n    70003,\n    70006,\n    70006,\n    70016,\n    70084,\n    70089,\n    70092,\n    70094,\n    70106,\n    70108,\n    70108,\n    70144,\n    70161,\n    70163,\n    70199,\n    70206,\n    70209,\n    70272,\n    70278,\n    70280,\n    70280,\n    70282,\n    70285,\n    70287,\n    70301,\n    70303,\n    70312,\n    70320,\n    70378,\n    70384,\n    70393,\n    70400,\n    70403,\n    70405,\n    70412,\n    70415,\n    70416,\n    70419,\n    70440,\n    70442,\n    70448,\n    70450,\n    70451,\n    70453,\n    70457,\n    70459,\n    70468,\n    70471,\n    70472,\n    70475,\n    70477,\n    70480,\n    70480,\n    70487,\n    70487,\n    70493,\n    70499,\n    70502,\n    70508,\n    70512,\n    70516,\n    70656,\n    70730,\n    70736,\n    70745,\n    70750,\n    70753,\n    70784,\n    70853,\n    70855,\n    70855,\n    70864,\n    70873,\n    71040,\n    71093,\n    71096,\n    71104,\n    71128,\n    71133,\n    71168,\n    71232,\n    71236,\n    71236,\n    71248,\n    71257,\n    71296,\n    71352,\n    71360,\n    71369,\n    71424,\n    71450,\n    71453,\n    71467,\n    71472,\n    71481,\n    71488,\n    71494,\n    71680,\n    71738,\n    71840,\n    71913,\n    71935,\n    71942,\n    71945,\n    71945,\n    71948,\n    71955,\n    71957,\n    71958,\n    71960,\n    71989,\n    71991,\n    71992,\n    71995,\n    72003,\n    72016,\n    72025,\n    72096,\n    72103,\n    72106,\n    72151,\n    72154,\n    72161,\n    72163,\n    72164,\n    72192,\n    72254,\n    72263,\n    72263,\n    72272,\n    72345,\n    72349,\n    72349,\n    72368,\n    72440,\n    72704,\n    72712,\n    72714,\n    72758,\n    72760,\n    72768,\n    72784,\n    72793,\n    72818,\n    72847,\n    72850,\n    72871,\n    72873,\n    72886,\n    72960,\n    72966,\n    72968,\n    72969,\n    72971,\n    73014,\n    73018,\n    73018,\n    73020,\n    73021,\n    73023,\n    73031,\n    73040,\n    73049,\n    73056,\n    73061,\n    73063,\n    73064,\n    73066,\n    73102,\n    73104,\n    73105,\n    73107,\n    73112,\n    73120,\n    73129,\n    73440,\n    73462,\n    73472,\n    73488,\n    73490,\n    73530,\n    73534,\n    73538,\n    73552,\n    73561,\n    73648,\n    73648,\n    73728,\n    74649,\n    74752,\n    74862,\n    74880,\n    75075,\n    77712,\n    77808,\n    77824,\n    78933,\n    82944,\n    83526,\n    92160,\n    92728,\n    92736,\n    92766,\n    92768,\n    92777,\n    92784,\n    92862,\n    92864,\n    92873,\n    92880,\n    92909,\n    92912,\n    92916,\n    92928,\n    92982,\n    92992,\n    92995,\n    93008,\n    93017,\n    93027,\n    93047,\n    93053,\n    93071,\n    93760,\n    93823,\n    93952,\n    94026,\n    94031,\n    94087,\n    94095,\n    94111,\n    94176,\n    94177,\n    94179,\n    94180,\n    94192,\n    94193,\n    94208,\n    100343,\n    100352,\n    101589,\n    101632,\n    101640,\n    110576,\n    110579,\n    110581,\n    110587,\n    110589,\n    110590,\n    110592,\n    110882,\n    110898,\n    110898,\n    110928,\n    110930,\n    110933,\n    110933,\n    110948,\n    110951,\n    110960,\n    111355,\n    113664,\n    113770,\n    113776,\n    113788,\n    113792,\n    113800,\n    113808,\n    113817,\n    113821,\n    113822,\n    113824,\n    113827,\n    118528,\n    118573,\n    118576,\n    118598,\n    119141,\n    119145,\n    119149,\n    119170,\n    119173,\n    119179,\n    119210,\n    119213,\n    119362,\n    119364,\n    119808,\n    119892,\n    119894,\n    119964,\n    119966,\n    119967,\n    119970,\n    119970,\n    119973,\n    119974,\n    119977,\n    119980,\n    119982,\n    119993,\n    119995,\n    119995,\n    119997,\n    120003,\n    120005,\n    120069,\n    120071,\n    120074,\n    120077,\n    120084,\n    120086,\n    120092,\n    120094,\n    120121,\n    120123,\n    120126,\n    120128,\n    120132,\n    120134,\n    120134,\n    120138,\n    120144,\n    120146,\n    120485,\n    120488,\n    120512,\n    120514,\n    120538,\n    120540,\n    120570,\n    120572,\n    120596,\n    120598,\n    120628,\n    120630,\n    120654,\n    120656,\n    120686,\n    120688,\n    120712,\n    120714,\n    120744,\n    120746,\n    120770,\n    120772,\n    120779,\n    120782,\n    120831,\n    121344,\n    121398,\n    121403,\n    121452,\n    121461,\n    121461,\n    121476,\n    121476,\n    121499,\n    121503,\n    121505,\n    121519,\n    122624,\n    122654,\n    122661,\n    122666,\n    122880,\n    122886,\n    122888,\n    122904,\n    122907,\n    122913,\n    122915,\n    122916,\n    122918,\n    122922,\n    122928,\n    122989,\n    123023,\n    123023,\n    123136,\n    123180,\n    123184,\n    123197,\n    123200,\n    123209,\n    123214,\n    123214,\n    123536,\n    123566,\n    123584,\n    123641,\n    124112,\n    124153,\n    124896,\n    124902,\n    124904,\n    124907,\n    124909,\n    124910,\n    124912,\n    124926,\n    124928,\n    125124,\n    125136,\n    125142,\n    125184,\n    125259,\n    125264,\n    125273,\n    126464,\n    126467,\n    126469,\n    126495,\n    126497,\n    126498,\n    126500,\n    126500,\n    126503,\n    126503,\n    126505,\n    126514,\n    126516,\n    126519,\n    126521,\n    126521,\n    126523,\n    126523,\n    126530,\n    126530,\n    126535,\n    126535,\n    126537,\n    126537,\n    126539,\n    126539,\n    126541,\n    126543,\n    126545,\n    126546,\n    126548,\n    126548,\n    126551,\n    126551,\n    126553,\n    126553,\n    126555,\n    126555,\n    126557,\n    126557,\n    126559,\n    126559,\n    126561,\n    126562,\n    126564,\n    126564,\n    126567,\n    126570,\n    126572,\n    126578,\n    126580,\n    126583,\n    126585,\n    126588,\n    126590,\n    126590,\n    126592,\n    126601,\n    126603,\n    126619,\n    126625,\n    126627,\n    126629,\n    126633,\n    126635,\n    126651,\n    130032,\n    130041,\n    131072,\n    173791,\n    173824,\n    177977,\n    177984,\n    178205,\n    178208,\n    183969,\n    183984,\n    191456,\n    194560,\n    195101,\n    196608,\n    201546,\n    201552,\n    205743,\n    917505,\n    917505,\n    917536,\n    917631,\n    917760,\n    917999,\n    662,\n    0,\n    65,\n    90,\n    97,\n    122,\n    170,\n    170,\n    181,\n    181,\n    186,\n    186,\n    192,\n    214,\n    216,\n    246,\n    248,\n    705,\n    710,\n    721,\n    736,\n    740,\n    748,\n    748,\n    750,\n    750,\n    880,\n    884,\n    886,\n    887,\n    890,\n    893,\n    895,\n    895,\n    902,\n    902,\n    904,\n    906,\n    908,\n    908,\n    910,\n    929,\n    931,\n    1013,\n    1015,\n    1153,\n    1162,\n    1327,\n    1329,\n    1366,\n    1369,\n    1369,\n    1376,\n    1416,\n    1488,\n    1514,\n    1519,\n    1522,\n    1568,\n    1610,\n    1646,\n    1647,\n    1649,\n    1747,\n    1749,\n    1749,\n    1765,\n    1766,\n    1774,\n    1775,\n    1786,\n    1788,\n    1791,\n    1791,\n    1808,\n    1808,\n    1810,\n    1839,\n    1869,\n    1957,\n    1969,\n    1969,\n    1994,\n    2026,\n    2036,\n    2037,\n    2042,\n    2042,\n    2048,\n    2069,\n    2074,\n    2074,\n    2084,\n    2084,\n    2088,\n    2088,\n    2112,\n    2136,\n    2144,\n    2154,\n    2160,\n    2183,\n    2185,\n    2190,\n    2208,\n    2249,\n    2308,\n    2361,\n    2365,\n    2365,\n    2384,\n    2384,\n    2392,\n    2401,\n    2417,\n    2432,\n    2437,\n    2444,\n    2447,\n    2448,\n    2451,\n    2472,\n    2474,\n    2480,\n    2482,\n    2482,\n    2486,\n    2489,\n    2493,\n    2493,\n    2510,\n    2510,\n    2524,\n    2525,\n    2527,\n    2529,\n    2544,\n    2545,\n    2556,\n    2556,\n    2565,\n    2570,\n    2575,\n    2576,\n    2579,\n    2600,\n    2602,\n    2608,\n    2610,\n    2611,\n    2613,\n    2614,\n    2616,\n    2617,\n    2649,\n    2652,\n    2654,\n    2654,\n    2674,\n    2676,\n    2693,\n    2701,\n    2703,\n    2705,\n    2707,\n    2728,\n    2730,\n    2736,\n    2738,\n    2739,\n    2741,\n    2745,\n    2749,\n    2749,\n    2768,\n    2768,\n    2784,\n    2785,\n    2809,\n    2809,\n    2821,\n    2828,\n    2831,\n    2832,\n    2835,\n    2856,\n    2858,\n    2864,\n    2866,\n    2867,\n    2869,\n    2873,\n    2877,\n    2877,\n    2908,\n    2909,\n    2911,\n    2913,\n    2929,\n    2929,\n    2947,\n    2947,\n    2949,\n    2954,\n    2958,\n    2960,\n    2962,\n    2965,\n    2969,\n    2970,\n    2972,\n    2972,\n    2974,\n    2975,\n    2979,\n    2980,\n    2984,\n    2986,\n    2990,\n    3001,\n    3024,\n    3024,\n    3077,\n    3084,\n    3086,\n    3088,\n    3090,\n    3112,\n    3114,\n    3129,\n    3133,\n    3133,\n    3160,\n    3162,\n    3165,\n    3165,\n    3168,\n    3169,\n    3200,\n    3200,\n    3205,\n    3212,\n    3214,\n    3216,\n    3218,\n    3240,\n    3242,\n    3251,\n    3253,\n    3257,\n    3261,\n    3261,\n    3293,\n    3294,\n    3296,\n    3297,\n    3313,\n    3314,\n    3332,\n    3340,\n    3342,\n    3344,\n    3346,\n    3386,\n    3389,\n    3389,\n    3406,\n    3406,\n    3412,\n    3414,\n    3423,\n    3425,\n    3450,\n    3455,\n    3461,\n    3478,\n    3482,\n    3505,\n    3507,\n    3515,\n    3517,\n    3517,\n    3520,\n    3526,\n    3585,\n    3632,\n    3634,\n    3635,\n    3648,\n    3654,\n    3713,\n    3714,\n    3716,\n    3716,\n    3718,\n    3722,\n    3724,\n    3747,\n    3749,\n    3749,\n    3751,\n    3760,\n    3762,\n    3763,\n    3773,\n    3773,\n    3776,\n    3780,\n    3782,\n    3782,\n    3804,\n    3807,\n    3840,\n    3840,\n    3904,\n    3911,\n    3913,\n    3948,\n    3976,\n    3980,\n    4096,\n    4138,\n    4159,\n    4159,\n    4176,\n    4181,\n    4186,\n    4189,\n    4193,\n    4193,\n    4197,\n    4198,\n    4206,\n    4208,\n    4213,\n    4225,\n    4238,\n    4238,\n    4256,\n    4293,\n    4295,\n    4295,\n    4301,\n    4301,\n    4304,\n    4346,\n    4348,\n    4680,\n    4682,\n    4685,\n    4688,\n    4694,\n    4696,\n    4696,\n    4698,\n    4701,\n    4704,\n    4744,\n    4746,\n    4749,\n    4752,\n    4784,\n    4786,\n    4789,\n    4792,\n    4798,\n    4800,\n    4800,\n    4802,\n    4805,\n    4808,\n    4822,\n    4824,\n    4880,\n    4882,\n    4885,\n    4888,\n    4954,\n    4992,\n    5007,\n    5024,\n    5109,\n    5112,\n    5117,\n    5121,\n    5740,\n    5743,\n    5759,\n    5761,\n    5786,\n    5792,\n    5866,\n    5870,\n    5880,\n    5888,\n    5905,\n    5919,\n    5937,\n    5952,\n    5969,\n    5984,\n    5996,\n    5998,\n    6e3,\n    6016,\n    6067,\n    6103,\n    6103,\n    6108,\n    6108,\n    6176,\n    6264,\n    6272,\n    6276,\n    6279,\n    6312,\n    6314,\n    6314,\n    6320,\n    6389,\n    6400,\n    6430,\n    6480,\n    6509,\n    6512,\n    6516,\n    6528,\n    6571,\n    6576,\n    6601,\n    6656,\n    6678,\n    6688,\n    6740,\n    6823,\n    6823,\n    6917,\n    6963,\n    6981,\n    6988,\n    7043,\n    7072,\n    7086,\n    7087,\n    7098,\n    7141,\n    7168,\n    7203,\n    7245,\n    7247,\n    7258,\n    7293,\n    7296,\n    7304,\n    7312,\n    7354,\n    7357,\n    7359,\n    7401,\n    7404,\n    7406,\n    7411,\n    7413,\n    7414,\n    7418,\n    7418,\n    7424,\n    7615,\n    7680,\n    7957,\n    7960,\n    7965,\n    7968,\n    8005,\n    8008,\n    8013,\n    8016,\n    8023,\n    8025,\n    8025,\n    8027,\n    8027,\n    8029,\n    8029,\n    8031,\n    8061,\n    8064,\n    8116,\n    8118,\n    8124,\n    8126,\n    8126,\n    8130,\n    8132,\n    8134,\n    8140,\n    8144,\n    8147,\n    8150,\n    8155,\n    8160,\n    8172,\n    8178,\n    8180,\n    8182,\n    8188,\n    8305,\n    8305,\n    8319,\n    8319,\n    8336,\n    8348,\n    8450,\n    8450,\n    8455,\n    8455,\n    8458,\n    8467,\n    8469,\n    8469,\n    8473,\n    8477,\n    8484,\n    8484,\n    8486,\n    8486,\n    8488,\n    8488,\n    8490,\n    8493,\n    8495,\n    8505,\n    8508,\n    8511,\n    8517,\n    8521,\n    8526,\n    8526,\n    8544,\n    8584,\n    11264,\n    11492,\n    11499,\n    11502,\n    11506,\n    11507,\n    11520,\n    11557,\n    11559,\n    11559,\n    11565,\n    11565,\n    11568,\n    11623,\n    11631,\n    11631,\n    11648,\n    11670,\n    11680,\n    11686,\n    11688,\n    11694,\n    11696,\n    11702,\n    11704,\n    11710,\n    11712,\n    11718,\n    11720,\n    11726,\n    11728,\n    11734,\n    11736,\n    11742,\n    11823,\n    11823,\n    12293,\n    12295,\n    12321,\n    12329,\n    12337,\n    12341,\n    12344,\n    12348,\n    12353,\n    12438,\n    12445,\n    12447,\n    12449,\n    12538,\n    12540,\n    12543,\n    12549,\n    12591,\n    12593,\n    12686,\n    12704,\n    12735,\n    12784,\n    12799,\n    13312,\n    19903,\n    19968,\n    42124,\n    42192,\n    42237,\n    42240,\n    42508,\n    42512,\n    42527,\n    42538,\n    42539,\n    42560,\n    42606,\n    42623,\n    42653,\n    42656,\n    42735,\n    42775,\n    42783,\n    42786,\n    42888,\n    42891,\n    42954,\n    42960,\n    42961,\n    42963,\n    42963,\n    42965,\n    42969,\n    42994,\n    43009,\n    43011,\n    43013,\n    43015,\n    43018,\n    43020,\n    43042,\n    43072,\n    43123,\n    43138,\n    43187,\n    43250,\n    43255,\n    43259,\n    43259,\n    43261,\n    43262,\n    43274,\n    43301,\n    43312,\n    43334,\n    43360,\n    43388,\n    43396,\n    43442,\n    43471,\n    43471,\n    43488,\n    43492,\n    43494,\n    43503,\n    43514,\n    43518,\n    43520,\n    43560,\n    43584,\n    43586,\n    43588,\n    43595,\n    43616,\n    43638,\n    43642,\n    43642,\n    43646,\n    43695,\n    43697,\n    43697,\n    43701,\n    43702,\n    43705,\n    43709,\n    43712,\n    43712,\n    43714,\n    43714,\n    43739,\n    43741,\n    43744,\n    43754,\n    43762,\n    43764,\n    43777,\n    43782,\n    43785,\n    43790,\n    43793,\n    43798,\n    43808,\n    43814,\n    43816,\n    43822,\n    43824,\n    43866,\n    43868,\n    43881,\n    43888,\n    44002,\n    44032,\n    55203,\n    55216,\n    55238,\n    55243,\n    55291,\n    63744,\n    64109,\n    64112,\n    64217,\n    64256,\n    64262,\n    64275,\n    64279,\n    64285,\n    64285,\n    64287,\n    64296,\n    64298,\n    64310,\n    64312,\n    64316,\n    64318,\n    64318,\n    64320,\n    64321,\n    64323,\n    64324,\n    64326,\n    64433,\n    64467,\n    64829,\n    64848,\n    64911,\n    64914,\n    64967,\n    65008,\n    65019,\n    65136,\n    65140,\n    65142,\n    65276,\n    65313,\n    65338,\n    65345,\n    65370,\n    65382,\n    65470,\n    65474,\n    65479,\n    65482,\n    65487,\n    65490,\n    65495,\n    65498,\n    65500,\n    65536,\n    65547,\n    65549,\n    65574,\n    65576,\n    65594,\n    65596,\n    65597,\n    65599,\n    65613,\n    65616,\n    65629,\n    65664,\n    65786,\n    65856,\n    65908,\n    66176,\n    66204,\n    66208,\n    66256,\n    66304,\n    66335,\n    66349,\n    66378,\n    66384,\n    66421,\n    66432,\n    66461,\n    66464,\n    66499,\n    66504,\n    66511,\n    66513,\n    66517,\n    66560,\n    66717,\n    66736,\n    66771,\n    66776,\n    66811,\n    66816,\n    66855,\n    66864,\n    66915,\n    66928,\n    66938,\n    66940,\n    66954,\n    66956,\n    66962,\n    66964,\n    66965,\n    66967,\n    66977,\n    66979,\n    66993,\n    66995,\n    67001,\n    67003,\n    67004,\n    67072,\n    67382,\n    67392,\n    67413,\n    67424,\n    67431,\n    67456,\n    67461,\n    67463,\n    67504,\n    67506,\n    67514,\n    67584,\n    67589,\n    67592,\n    67592,\n    67594,\n    67637,\n    67639,\n    67640,\n    67644,\n    67644,\n    67647,\n    67669,\n    67680,\n    67702,\n    67712,\n    67742,\n    67808,\n    67826,\n    67828,\n    67829,\n    67840,\n    67861,\n    67872,\n    67897,\n    67968,\n    68023,\n    68030,\n    68031,\n    68096,\n    68096,\n    68112,\n    68115,\n    68117,\n    68119,\n    68121,\n    68149,\n    68192,\n    68220,\n    68224,\n    68252,\n    68288,\n    68295,\n    68297,\n    68324,\n    68352,\n    68405,\n    68416,\n    68437,\n    68448,\n    68466,\n    68480,\n    68497,\n    68608,\n    68680,\n    68736,\n    68786,\n    68800,\n    68850,\n    68864,\n    68899,\n    69248,\n    69289,\n    69296,\n    69297,\n    69376,\n    69404,\n    69415,\n    69415,\n    69424,\n    69445,\n    69488,\n    69505,\n    69552,\n    69572,\n    69600,\n    69622,\n    69635,\n    69687,\n    69745,\n    69746,\n    69749,\n    69749,\n    69763,\n    69807,\n    69840,\n    69864,\n    69891,\n    69926,\n    69956,\n    69956,\n    69959,\n    69959,\n    69968,\n    70002,\n    70006,\n    70006,\n    70019,\n    70066,\n    70081,\n    70084,\n    70106,\n    70106,\n    70108,\n    70108,\n    70144,\n    70161,\n    70163,\n    70187,\n    70207,\n    70208,\n    70272,\n    70278,\n    70280,\n    70280,\n    70282,\n    70285,\n    70287,\n    70301,\n    70303,\n    70312,\n    70320,\n    70366,\n    70405,\n    70412,\n    70415,\n    70416,\n    70419,\n    70440,\n    70442,\n    70448,\n    70450,\n    70451,\n    70453,\n    70457,\n    70461,\n    70461,\n    70480,\n    70480,\n    70493,\n    70497,\n    70656,\n    70708,\n    70727,\n    70730,\n    70751,\n    70753,\n    70784,\n    70831,\n    70852,\n    70853,\n    70855,\n    70855,\n    71040,\n    71086,\n    71128,\n    71131,\n    71168,\n    71215,\n    71236,\n    71236,\n    71296,\n    71338,\n    71352,\n    71352,\n    71424,\n    71450,\n    71488,\n    71494,\n    71680,\n    71723,\n    71840,\n    71903,\n    71935,\n    71942,\n    71945,\n    71945,\n    71948,\n    71955,\n    71957,\n    71958,\n    71960,\n    71983,\n    71999,\n    71999,\n    72001,\n    72001,\n    72096,\n    72103,\n    72106,\n    72144,\n    72161,\n    72161,\n    72163,\n    72163,\n    72192,\n    72192,\n    72203,\n    72242,\n    72250,\n    72250,\n    72272,\n    72272,\n    72284,\n    72329,\n    72349,\n    72349,\n    72368,\n    72440,\n    72704,\n    72712,\n    72714,\n    72750,\n    72768,\n    72768,\n    72818,\n    72847,\n    72960,\n    72966,\n    72968,\n    72969,\n    72971,\n    73008,\n    73030,\n    73030,\n    73056,\n    73061,\n    73063,\n    73064,\n    73066,\n    73097,\n    73112,\n    73112,\n    73440,\n    73458,\n    73474,\n    73474,\n    73476,\n    73488,\n    73490,\n    73523,\n    73648,\n    73648,\n    73728,\n    74649,\n    74752,\n    74862,\n    74880,\n    75075,\n    77712,\n    77808,\n    77824,\n    78895,\n    78913,\n    78918,\n    82944,\n    83526,\n    92160,\n    92728,\n    92736,\n    92766,\n    92784,\n    92862,\n    92880,\n    92909,\n    92928,\n    92975,\n    92992,\n    92995,\n    93027,\n    93047,\n    93053,\n    93071,\n    93760,\n    93823,\n    93952,\n    94026,\n    94032,\n    94032,\n    94099,\n    94111,\n    94176,\n    94177,\n    94179,\n    94179,\n    94208,\n    100343,\n    100352,\n    101589,\n    101632,\n    101640,\n    110576,\n    110579,\n    110581,\n    110587,\n    110589,\n    110590,\n    110592,\n    110882,\n    110898,\n    110898,\n    110928,\n    110930,\n    110933,\n    110933,\n    110948,\n    110951,\n    110960,\n    111355,\n    113664,\n    113770,\n    113776,\n    113788,\n    113792,\n    113800,\n    113808,\n    113817,\n    119808,\n    119892,\n    119894,\n    119964,\n    119966,\n    119967,\n    119970,\n    119970,\n    119973,\n    119974,\n    119977,\n    119980,\n    119982,\n    119993,\n    119995,\n    119995,\n    119997,\n    120003,\n    120005,\n    120069,\n    120071,\n    120074,\n    120077,\n    120084,\n    120086,\n    120092,\n    120094,\n    120121,\n    120123,\n    120126,\n    120128,\n    120132,\n    120134,\n    120134,\n    120138,\n    120144,\n    120146,\n    120485,\n    120488,\n    120512,\n    120514,\n    120538,\n    120540,\n    120570,\n    120572,\n    120596,\n    120598,\n    120628,\n    120630,\n    120654,\n    120656,\n    120686,\n    120688,\n    120712,\n    120714,\n    120744,\n    120746,\n    120770,\n    120772,\n    120779,\n    122624,\n    122654,\n    122661,\n    122666,\n    122928,\n    122989,\n    123136,\n    123180,\n    123191,\n    123197,\n    123214,\n    123214,\n    123536,\n    123565,\n    123584,\n    123627,\n    124112,\n    124139,\n    124896,\n    124902,\n    124904,\n    124907,\n    124909,\n    124910,\n    124912,\n    124926,\n    124928,\n    125124,\n    125184,\n    125251,\n    125259,\n    125259,\n    126464,\n    126467,\n    126469,\n    126495,\n    126497,\n    126498,\n    126500,\n    126500,\n    126503,\n    126503,\n    126505,\n    126514,\n    126516,\n    126519,\n    126521,\n    126521,\n    126523,\n    126523,\n    126530,\n    126530,\n    126535,\n    126535,\n    126537,\n    126537,\n    126539,\n    126539,\n    126541,\n    126543,\n    126545,\n    126546,\n    126548,\n    126548,\n    126551,\n    126551,\n    126553,\n    126553,\n    126555,\n    126555,\n    126557,\n    126557,\n    126559,\n    126559,\n    126561,\n    126562,\n    126564,\n    126564,\n    126567,\n    126570,\n    126572,\n    126578,\n    126580,\n    126583,\n    126585,\n    126588,\n    126590,\n    126590,\n    126592,\n    126601,\n    126603,\n    126619,\n    126625,\n    126627,\n    126629,\n    126633,\n    126635,\n    126651,\n    131072,\n    173791,\n    173824,\n    177977,\n    177984,\n    178205,\n    178208,\n    183969,\n    183984,\n    191456,\n    194560,\n    195101,\n    196608,\n    201546,\n    201552,\n    205743,\n    47,\n    0,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    3,\n    1,\n    0,\n    0,\n    0,\n    0,\n    5,\n    1,\n    0,\n    0,\n    0,\n    0,\n    7,\n    1,\n    0,\n    0,\n    0,\n    0,\n    9,\n    1,\n    0,\n    0,\n    0,\n    0,\n    15,\n    1,\n    0,\n    0,\n    0,\n    1,\n    17,\n    1,\n    0,\n    0,\n    0,\n    3,\n    20,\n    1,\n    0,\n    0,\n    0,\n    5,\n    22,\n    1,\n    0,\n    0,\n    0,\n    7,\n    24,\n    1,\n    0,\n    0,\n    0,\n    9,\n    26,\n    1,\n    0,\n    0,\n    0,\n    11,\n    35,\n    1,\n    0,\n    0,\n    0,\n    13,\n    37,\n    1,\n    0,\n    0,\n    0,\n    15,\n    39,\n    1,\n    0,\n    0,\n    0,\n    17,\n    18,\n    5,\n    47,\n    0,\n    0,\n    18,\n    19,\n    5,\n    47,\n    0,\n    0,\n    19,\n    2,\n    1,\n    0,\n    0,\n    0,\n    20,\n    21,\n    5,\n    47,\n    0,\n    0,\n    21,\n    4,\n    1,\n    0,\n    0,\n    0,\n    22,\n    23,\n    5,\n    42,\n    0,\n    0,\n    23,\n    6,\n    1,\n    0,\n    0,\n    0,\n    24,\n    25,\n    5,\n    33,\n    0,\n    0,\n    25,\n    8,\n    1,\n    0,\n    0,\n    0,\n    26,\n    30,\n    3,\n    13,\n    6,\n    0,\n    27,\n    29,\n    3,\n    11,\n    5,\n    0,\n    28,\n    27,\n    1,\n    0,\n    0,\n    0,\n    29,\n    32,\n    1,\n    0,\n    0,\n    0,\n    30,\n    28,\n    1,\n    0,\n    0,\n    0,\n    30,\n    31,\n    1,\n    0,\n    0,\n    0,\n    31,\n    33,\n    1,\n    0,\n    0,\n    0,\n    32,\n    30,\n    1,\n    0,\n    0,\n    0,\n    33,\n    34,\n    6,\n    4,\n    0,\n    0,\n    34,\n    10,\n    1,\n    0,\n    0,\n    0,\n    35,\n    36,\n    7,\n    0,\n    0,\n    0,\n    36,\n    12,\n    1,\n    0,\n    0,\n    0,\n    37,\n    38,\n    7,\n    1,\n    0,\n    0,\n    38,\n    14,\n    1,\n    0,\n    0,\n    0,\n    39,\n    43,\n    5,\n    39,\n    0,\n    0,\n    40,\n    42,\n    9,\n    0,\n    0,\n    0,\n    41,\n    40,\n    1,\n    0,\n    0,\n    0,\n    42,\n    45,\n    1,\n    0,\n    0,\n    0,\n    43,\n    44,\n    1,\n    0,\n    0,\n    0,\n    43,\n    41,\n    1,\n    0,\n    0,\n    0,\n    44,\n    46,\n    1,\n    0,\n    0,\n    0,\n    45,\n    43,\n    1,\n    0,\n    0,\n    0,\n    46,\n    47,\n    5,\n    39,\n    0,\n    0,\n    47,\n    16,\n    1,\n    0,\n    0,\n    0,\n    3,\n    0,\n    30,\n    43,\n    1,\n    1,\n    4,\n    0\n  ];\n  static __ATN;\n  static get _ATN() {\n    if (!_XPathLexer.__ATN) {\n      _XPathLexer.__ATN = new ATNDeserializer().deserialize(_XPathLexer._serializedATN);\n    }\n    return _XPathLexer.__ATN;\n  }\n  static vocabulary = new Vocabulary(_XPathLexer.literalNames, _XPathLexer.symbolicNames, []);\n  get vocabulary() {\n    return _XPathLexer.vocabulary;\n  }\n  static decisionsToDFA = _XPathLexer._ATN.decisionToState.map((ds, index) => {\n    return new DFA(ds, index);\n  });\n};\n\n// src/tree/xpath/XPathLexerErrorListener.ts\nvar XPathLexerErrorListener = class extends BaseErrorListener {\n  static {\n    __name(this, \"XPathLexerErrorListener\");\n  }\n  syntaxError(_recognizer, _offendingSymbol, _line, _charPositionInLine, _msg, _e) {\n  }\n};\n\n// src/tree/xpath/XPathElement.ts\nvar XPathElement = class {\n  static {\n    __name(this, \"XPathElement\");\n  }\n  invert;\n  nodeName;\n  /**\n   * Construct element like `/ID` or `ID` or `/*` etc... `nodeName` is undefined if just node\n   *\n   * @param nodeName The name of the node; may be undefined for any node.\n   */\n  constructor(nodeName) {\n    this.nodeName = nodeName;\n    this.invert = false;\n  }\n  toString() {\n    const inv = this.invert ? \"!\" : \"\";\n    return \"XPathElement[\" + inv + this.nodeName + \"]\";\n  }\n};\n\n// src/tree/xpath/XPathRuleAnywhereElement.ts\nvar XPathRuleAnywhereElement = class extends XPathElement {\n  static {\n    __name(this, \"XPathRuleAnywhereElement\");\n  }\n  ruleIndex;\n  constructor(ruleName, ruleIndex) {\n    super(ruleName);\n    this.ruleIndex = ruleIndex;\n  }\n  evaluate(t) {\n    return Trees.findAllRuleNodes(t, this.ruleIndex);\n  }\n  toString() {\n    const inv = this.invert ? \"!\" : \"\";\n    return \"XPathRuleAnywhereElement[\" + inv + this.nodeName + \"]\";\n  }\n};\n\n// src/tree/xpath/XPathRuleElement.ts\nvar XPathRuleElement = class extends XPathElement {\n  static {\n    __name(this, \"XPathRuleElement\");\n  }\n  ruleIndex;\n  constructor(ruleName, ruleIndex) {\n    super(ruleName);\n    this.ruleIndex = ruleIndex;\n  }\n  evaluate(t) {\n    const nodes = [];\n    for (const c of Trees.getChildren(t)) {\n      if (c instanceof ParserRuleContext) {\n        if (c.ruleIndex === this.ruleIndex && !this.invert || c.ruleIndex !== this.ruleIndex && this.invert) {\n          nodes.push(c);\n        }\n      }\n    }\n    return nodes;\n  }\n  toString() {\n    const inv = this.invert ? \"!\" : \"\";\n    return \"XPathRuleElement[\" + inv + this.nodeName + \"]\";\n  }\n};\n\n// src/tree/xpath/XPathTokenAnywhereElement.ts\nvar XPathTokenAnywhereElement = class extends XPathElement {\n  static {\n    __name(this, \"XPathTokenAnywhereElement\");\n  }\n  tokenType;\n  constructor(tokenName, tokenType) {\n    super(tokenName);\n    this.tokenType = tokenType;\n  }\n  evaluate(t) {\n    return Trees.findAllTokenNodes(t, this.tokenType);\n  }\n  toString() {\n    const inv = this.invert ? \"!\" : \"\";\n    return \"XPathTokenAnywhereElement[\" + inv + this.nodeName + \"]\";\n  }\n};\n\n// src/tree/xpath/XPathTokenElement.ts\nvar XPathTokenElement = class extends XPathElement {\n  static {\n    __name(this, \"XPathTokenElement\");\n  }\n  tokenType;\n  constructor(tokenName, tokenType) {\n    super(tokenName);\n    this.tokenType = tokenType;\n  }\n  evaluate(t) {\n    const nodes = [];\n    for (const c of Trees.getChildren(t)) {\n      if (c instanceof TerminalNode && c.symbol) {\n        if (c.symbol.type === this.tokenType && !this.invert || c.symbol.type !== this.tokenType && this.invert) {\n          nodes.push(c);\n        }\n      }\n    }\n    return nodes;\n  }\n  toString() {\n    const inv = this.invert ? \"!\" : \"\";\n    return \"XPathTokenElement[\" + inv + this.nodeName + \"]\";\n  }\n};\n\n// src/tree/xpath/XPathWildcardAnywhereElement.ts\nvar XPathWildcardAnywhereElement = class extends XPathElement {\n  static {\n    __name(this, \"XPathWildcardAnywhereElement\");\n  }\n  constructor() {\n    super(XPath.WILDCARD);\n  }\n  evaluate(t) {\n    if (this.invert) {\n      return [];\n    }\n    return Trees.descendants(t);\n  }\n  toString() {\n    const inv = this.invert ? \"!\" : \"\";\n    return \"XPathWildcardAnywhereElement[\" + inv + this.nodeName + \"]\";\n  }\n};\n\n// src/tree/xpath/XPathWildcardElement.ts\nvar XPathWildcardElement = class extends XPathElement {\n  static {\n    __name(this, \"XPathWildcardElement\");\n  }\n  constructor() {\n    super(XPath.WILDCARD);\n  }\n  evaluate(t) {\n    const kids = [];\n    if (this.invert) {\n      return kids;\n    }\n    for (const c of Trees.getChildren(t)) {\n      kids.push(c);\n    }\n    return kids;\n  }\n  toString() {\n    const inv = this.invert ? \"!\" : \"\";\n    return \"XPathWildcardElement[\" + inv + this.nodeName + \"]\";\n  }\n};\n\n// src/tree/xpath/XPath.ts\nvar XPath = class _XPath {\n  static {\n    __name(this, \"XPath\");\n  }\n  static WILDCARD = \"*\";\n  // word not operator/separator\n  static NOT = \"!\";\n  // word for invert operator\n  path;\n  elements;\n  parser;\n  constructor(parser, path) {\n    this.parser = parser;\n    this.path = path;\n    this.elements = this.split(path);\n  }\n  static findAll(tree, xpath, parser) {\n    const p = new _XPath(parser, xpath);\n    return p.evaluate(tree);\n  }\n  // TODO: check for invalid token/rule names, bad syntax\n  split(path) {\n    const lexer = new XPathLexer(CharStream.fromString(path));\n    lexer.recover = (e) => {\n      throw e;\n    };\n    lexer.removeErrorListeners();\n    lexer.addErrorListener(new XPathLexerErrorListener());\n    const tokenStream = new CommonTokenStream(lexer);\n    try {\n      tokenStream.fill();\n    } catch (e) {\n      if (e instanceof LexerNoViableAltException) {\n        const pos = lexer.column;\n        const msg = \"Invalid tokens or characters at index \" + pos + \" in path '\" + path + \"' -- \" + e.message;\n        throw new RangeError(msg);\n      }\n      throw e;\n    }\n    const tokens = tokenStream.getTokens();\n    const elements = [];\n    const n2 = tokens.length;\n    let i = 0;\n    loop:\n      while (i < n2) {\n        const el = tokens[i];\n        let next;\n        switch (el.type) {\n          case XPathLexer.ROOT:\n          case XPathLexer.ANYWHERE:\n            const anywhere = el.type === XPathLexer.ANYWHERE;\n            i++;\n            next = tokens[i];\n            const invert = next.type === XPathLexer.BANG;\n            if (invert) {\n              i++;\n              next = tokens[i];\n            }\n            const pathElement = this.getXPathElement(next, anywhere);\n            pathElement.invert = invert;\n            elements.push(pathElement);\n            i++;\n            break;\n          case XPathLexer.TOKEN_REF:\n          case XPathLexer.RULE_REF:\n          case XPathLexer.WILDCARD:\n            elements.push(this.getXPathElement(el, false));\n            ++i;\n            break;\n          case Token.EOF:\n            break loop;\n          default:\n            throw new Error(\"Unknown path element \" + el);\n        }\n      }\n    return elements;\n  }\n  /**\n   * Return a list of all nodes starting at `t` as root that satisfy the\n   * path. The root `/` is relative to the node passed to {@link evaluate}.\n   */\n  evaluate(t) {\n    const dummyRoot = new ParserRuleContext(null);\n    dummyRoot.addChild(t);\n    let work = /* @__PURE__ */ new Set([dummyRoot]);\n    let i = 0;\n    while (i < this.elements.length) {\n      const next = /* @__PURE__ */ new Set();\n      for (const node of work) {\n        if (node.getChildCount() > 0) {\n          const matching = this.elements[i].evaluate(node);\n          matching.forEach((tree) => {\n            next.add(tree);\n          }, next);\n        }\n      }\n      i++;\n      work = next;\n    }\n    return work;\n  }\n  /**\n   * Convert word like `*` or `ID` or `expr` to a path\n   * element. `anywhere` is `true` if `//` precedes the\n   * word.\n   */\n  getXPathElement(wordToken, anywhere) {\n    if (wordToken.type === Token.EOF) {\n      throw new Error(\"Missing path element at end of path\");\n    }\n    const word = wordToken.text;\n    if (word == null) {\n      throw new Error(\"Expected wordToken to have text content.\");\n    }\n    const ttype = this.parser.getTokenType(word);\n    const ruleIndex = this.parser.getRuleIndex(word);\n    switch (wordToken.type) {\n      case XPathLexer.WILDCARD:\n        return anywhere ? new XPathWildcardAnywhereElement() : new XPathWildcardElement();\n      case XPathLexer.TOKEN_REF:\n      case XPathLexer.STRING:\n        if (ttype === Token.INVALID_TYPE) {\n          throw new Error(word + \" at index \" + wordToken.start + \" isn't a valid token name\");\n        }\n        return anywhere ? new XPathTokenAnywhereElement(word, ttype) : new XPathTokenElement(word, ttype);\n      default:\n        if (ruleIndex === -1) {\n          throw new Error(word + \" at index \" + wordToken.start + \" isn't a valid rule name\");\n        }\n        return anywhere ? new XPathRuleAnywhereElement(word, ruleIndex) : new XPathRuleElement(word, ruleIndex);\n    }\n  }\n};\n\n// src/tree/pattern/Chunk.ts\nvar Chunk = class {\n  static {\n    __name(this, \"Chunk\");\n  }\n};\n\n// src/tree/pattern/ParseTreeMatch.ts\nvar ParseTreeMatch = class {\n  static {\n    __name(this, \"ParseTreeMatch\");\n  }\n  /**\n   * This is the backing field for {@link #getTree()}.\n   */\n  tree;\n  /**\n   * This is the backing field for {@link #getPattern()}.\n   */\n  pattern;\n  /**\n   * This is the backing field for {@link #getLabels()}.\n   */\n  labels;\n  /**\n   * This is the backing field for {@link #getMismatchedNode()}.\n   */\n  mismatchedNode;\n  /**\n   * Constructs a new instance of {@link ParseTreeMatch} from the specified\n   * parse tree and pattern.\n   *\n   * @param tree The parse tree to match against the pattern.\n   * @param pattern The parse tree pattern.\n   * @param labels A mapping from label names to collections of\n   * {@link ParseTree} objects located by the tree pattern matching process.\n   * @param mismatchedNode The first node which failed to match the tree\n   * pattern during the matching process.\n   */\n  constructor(tree, pattern, labels, mismatchedNode) {\n    this.tree = tree;\n    this.pattern = pattern;\n    this.labels = labels;\n    this.mismatchedNode = mismatchedNode;\n  }\n  /**\n   * Get the last node associated with a specific `label`.\n   *\n   * For example, for pattern `<id:ID>`, `get(\"id\")` returns the\n   * node matched for that `ID`. If more than one node\n   * matched the specified label, only the last is returned. If there is\n   * no node associated with the label, this returns `null`.\n   *\n   * Pattern tags like `<ID>` and `<expr>` without labels are\n   * considered to be labeled with `ID` and `expr`, respectively.\n   *\n   * @param label The label to check.\n   *\n   * @returns The last {@link ParseTree} to match a tag with the specified\n   * label, or `null` if no parse tree matched a tag with the label.\n   */\n  get(label) {\n    const parseTrees = this.labels.get(label);\n    if (!parseTrees || parseTrees.length === 0) {\n      return null;\n    }\n    return parseTrees[parseTrees.length - 1];\n  }\n  /**\n   * Return all nodes matching a rule or token tag with the specified label.\n   *\n   * If the `label` is the name of a parser rule or token in the\n   * grammar, the resulting list will contain both the parse trees matching\n   * rule or tags explicitly labeled with the label and the complete set of\n   * parse trees matching the labeled and unlabeled tags in the pattern for\n   * the parser rule or token. For example, if `label` is `\"foo\"`,\n   * the result will contain *all* of the following.\n   *\n   * - Parse tree nodes matching tags of the form `<foo:anyRuleName>` and\n   * `<foo:AnyTokenName>`.\n   * - Parse tree nodes matching tags of the form `<anyLabel:foo>`.\n   * - Parse tree nodes matching tags of the form `<foo>`.\n   *\n   * @param label The label.\n   *\n   * @returns A collection of all {@link ParseTree} nodes matching tags with\n   * the specified `label`. If no nodes matched the label, an empty list\n   * is returned.\n   */\n  getAll(label) {\n    const nodes = this.labels.get(label);\n    return nodes ?? [];\n  }\n  /**\n   * Return a mapping from label -> [list of nodes].\n   *\n   * The map includes special entries corresponding to the names of rules and\n   * tokens referenced in tags in the original pattern. For additional\n   * information, see the description of {@link getAll(String)}.\n   *\n   * @returns A mapping from labels to parse tree nodes. If the parse tree\n   * pattern did not contain any rule or token tags, this map will be empty.\n   */\n  getLabels() {\n    return this.labels;\n  }\n  /**\n   * Get the node at which we first detected a mismatch.\n   *\n   * @returns the node at which we first detected a mismatch, or `null`\n   * if the match was successful.\n   */\n  getMismatchedNode() {\n    return this.mismatchedNode;\n  }\n  /**\n   * Gets a value indicating whether the match operation succeeded.\n   *\n   * @returns `true` if the match operation succeeded; otherwise, `false`.\n   */\n  succeeded() {\n    return !this.mismatchedNode;\n  }\n  /**\n   * Get the tree pattern we are matching against.\n   *\n   * @returns The tree pattern we are matching against.\n   */\n  getPattern() {\n    return this.pattern;\n  }\n  /**\n   * Get the parse tree we are trying to match to a pattern.\n   *\n   * @returns The {@link ParseTree} we are trying to match to a pattern.\n   */\n  getTree() {\n    return this.tree;\n  }\n  toString() {\n    return `Match ${this.succeeded() ? \"succeeded\" : \"failed\"}; found ${this.getLabels().size} labels`;\n  }\n};\n\n// src/tree/pattern/ParseTreePattern.ts\nvar ParseTreePattern = class {\n  static {\n    __name(this, \"ParseTreePattern\");\n  }\n  /**\n   * This is the backing field for {@link #getPatternRuleIndex()}.\n   */\n  patternRuleIndex;\n  /**\n   * This is the backing field for {@link #getPattern()}.\n   */\n  pattern;\n  /**\n   * This is the backing field for {@link #getPatternTree()}.\n   */\n  patternTree;\n  /**\n   * This is the backing field for {@link #getMatcher()}.\n   */\n  matcher;\n  /**\n   * Construct a new instance of the {@link ParseTreePattern} class.\n   *\n   * @param matcher The {@link ParseTreePatternMatcher} which created this\n   * tree pattern.\n   * @param pattern The tree pattern in concrete syntax form.\n   * @param patternRuleIndex The parser rule which serves as the root of the\n   * tree pattern.\n   * @param patternTree The tree pattern in {@link ParseTree} form.\n   */\n  constructor(matcher, pattern, patternRuleIndex, patternTree) {\n    this.matcher = matcher;\n    this.patternRuleIndex = patternRuleIndex;\n    this.pattern = pattern;\n    this.patternTree = patternTree;\n  }\n  /**\n   * Match a specific parse tree against this tree pattern.\n   *\n   * @param tree The parse tree to match against this tree pattern.\n   * @returns A {@link ParseTreeMatch} object describing the result of the\n   * match operation. The {@link ParseTreeMatch#succeeded()} method can be\n   * used to determine whether or not the match was successful.\n   */\n  match(tree) {\n    return this.matcher.match(tree, this);\n  }\n  /**\n   * Determine whether or not a parse tree matches this tree pattern.\n   *\n   * @param tree The parse tree to match against this tree pattern.\n   * @returns `true` if `tree` is a match for the current tree\n   * pattern; otherwise, `false`.\n   */\n  matches(tree) {\n    return this.matcher.match(tree, this).succeeded();\n  }\n  /**\n   * Find all nodes using XPath and then try to match those subtrees against\n   * this tree pattern.\n   *\n   * @param tree The {@link ParseTree} to match against this pattern.\n   * @param xpath An expression matching the nodes\n   *\n   * @returns A collection of {@link ParseTreeMatch} objects describing the\n   * successful matches. Unsuccessful matches are omitted from the result,\n   * regardless of the reason for the failure.\n   */\n  findAll(tree, xpath) {\n    const subtrees = XPath.findAll(tree, xpath, this.matcher.getParser());\n    const matches = new Array();\n    for (const t of subtrees) {\n      const match = this.match(t);\n      if (match.succeeded()) {\n        matches.push(match);\n      }\n    }\n    return matches;\n  }\n  /**\n   * Get the {@link ParseTreePatternMatcher} which created this tree pattern.\n   *\n   * @returns The {@link ParseTreePatternMatcher} which created this tree\n   * pattern.\n   */\n  getMatcher() {\n    return this.matcher;\n  }\n  /**\n   * Get the tree pattern in concrete syntax form.\n   *\n   * @returns The tree pattern in concrete syntax form.\n   */\n  getPattern() {\n    return this.pattern;\n  }\n  /**\n   * Get the parser rule which serves as the outermost rule for the tree\n   * pattern.\n   *\n   * @returns The parser rule which serves as the outermost rule for the tree\n   * pattern.\n   */\n  getPatternRuleIndex() {\n    return this.patternRuleIndex;\n  }\n  /**\n   * Get the tree pattern as a {@link ParseTree}. The rule and token tags from\n   * the pattern are present in the parse tree as terminal nodes with a symbol\n   * of type {@link RuleTagToken} or {@link TokenTagToken}.\n   *\n   * @returns The tree pattern as a {@link ParseTree}.\n   */\n  getPatternTree() {\n    return this.patternTree;\n  }\n};\n\n// src/InputMismatchException.ts\nvar InputMismatchException = class extends RecognitionException {\n  static {\n    __name(this, \"InputMismatchException\");\n  }\n  constructor(recognizer) {\n    super({ message: \"\", recognizer, input: recognizer.inputStream, ctx: recognizer.context });\n    this.offendingToken = recognizer.getCurrentToken();\n  }\n};\n\n// src/FailedPredicateException.ts\nvar FailedPredicateException = class extends RecognitionException {\n  static {\n    __name(this, \"FailedPredicateException\");\n  }\n  ruleIndex = 0;\n  predicateIndex = 0;\n  predicate;\n  constructor(recognizer, predicate, message = null) {\n    super({\n      message: formatMessage(predicate ?? \"no predicate\", message ?? null),\n      recognizer,\n      input: recognizer.inputStream,\n      ctx: recognizer.context\n    });\n    const s = recognizer.atn.states[recognizer.state];\n    const trans = s.transitions[0];\n    if (trans instanceof PredicateTransition) {\n      this.ruleIndex = trans.ruleIndex;\n      this.predicateIndex = trans.predIndex;\n    } else {\n      this.ruleIndex = 0;\n      this.predicateIndex = 0;\n    }\n    this.predicate = predicate;\n    this.offendingToken = recognizer.getCurrentToken();\n  }\n};\nvar formatMessage = /* @__PURE__ */ __name((predicate, message) => {\n  if (message !== null) {\n    return message;\n  }\n  return \"failed predicate: {\" + predicate + \"}?\";\n}, \"formatMessage\");\n\n// src/DefaultErrorStrategy.ts\nvar DefaultErrorStrategy = class {\n  static {\n    __name(this, \"DefaultErrorStrategy\");\n  }\n  /**\n   * Indicates whether the error strategy is currently \"recovering from an\n   * error\". This is used to suppress reporting multiple error messages while\n   * attempting to recover from a detected syntax error.\n   *\n   * @see #inErrorRecoveryMode\n   */\n  errorRecoveryMode = false;\n  /**\n   * The index into the input stream where the last error occurred.\n   * \tThis is used to prevent infinite loops where an error is found\n   *  but no token is consumed during recovery...another error is found,\n   *  ad nauseam.  This is a failsafe mechanism to guarantee that at least\n   *  one token/tree node is consumed for two errors.\n   */\n  lastErrorIndex = -1;\n  lastErrorStates = new IntervalSet();\n  /**\n   * This field is used to propagate information about the lookahead following\n   * the previous match. Since prediction prefers completing the current rule\n   * to error recovery efforts, error reporting may occur later than the\n   * original point where it was discoverable. The original context is used to\n   * compute the true expected sets as though the reporting occurred as early\n   * as possible.\n   */\n  nextTokensContext = null;\n  nextTokenState = 0;\n  /**\n   * The default implementation simply calls {@link endErrorCondition} to\n   * ensure that the handler is not in error recovery mode.\n   */\n  reset(recognizer) {\n    this.endErrorCondition(recognizer);\n  }\n  /**\n   * This method is called to enter error recovery mode when a recognition\n   * exception is reported.\n   *\n   * @param _recognizer the parser instance\n   */\n  beginErrorCondition(_recognizer) {\n    this.errorRecoveryMode = true;\n  }\n  inErrorRecoveryMode(_recognizer) {\n    return this.errorRecoveryMode;\n  }\n  /**\n   * This method is called to leave error recovery mode after recovering from\n   * a recognition exception.\n   */\n  endErrorCondition(_recognizer) {\n    this.errorRecoveryMode = false;\n    this.lastErrorStates = new IntervalSet();\n    this.lastErrorIndex = -1;\n  }\n  /**\n   * The default implementation simply calls {@link endErrorCondition}.\n   */\n  reportMatch(recognizer) {\n    this.endErrorCondition(recognizer);\n  }\n  /**\n   * The default implementation returns immediately if the handler is already\n   * in error recovery mode. Otherwise, it calls {@link beginErrorCondition}\n   * and dispatches the reporting task based on the runtime type of `e`\n   * according to the following table.\n   *\n   * - {@link NoViableAltException}: Dispatches the call to {@link reportNoViableAlternative}\n   * - {@link InputMismatchException}: Dispatches the call to {@link reportInputMismatch}\n   * - {@link FailedPredicateException}: Dispatches the call to {@link reportFailedPredicate}\n   * - All other types: calls {@link Parser.notifyErrorListeners} to report the exception\n   */\n  reportError(recognizer, e) {\n    if (this.inErrorRecoveryMode(recognizer)) {\n      return;\n    }\n    this.beginErrorCondition(recognizer);\n    if (e instanceof NoViableAltException) {\n      this.reportNoViableAlternative(recognizer, e);\n    } else if (e instanceof InputMismatchException) {\n      this.reportInputMismatch(recognizer, e);\n    } else if (e instanceof FailedPredicateException) {\n      this.reportFailedPredicate(recognizer, e);\n    } else {\n      recognizer.notifyErrorListeners(e.message, e.offendingToken, e);\n    }\n  }\n  /**\n   * The default implementation resynchronizes the parser by consuming tokens\n   * until we find one in the resynchronization set--loosely the set of tokens\n   * that can follow the current rule.\n   *\n   */\n  recover(recognizer, _e) {\n    if (this.lastErrorIndex === recognizer.inputStream?.index && this.lastErrorStates.contains(recognizer.state)) {\n      recognizer.consume();\n    }\n    this.lastErrorIndex = recognizer.inputStream?.index ?? 0;\n    this.lastErrorStates.addOne(recognizer.state);\n    const followSet = this.getErrorRecoverySet(recognizer);\n    this.consumeUntil(recognizer, followSet);\n  }\n  /**\n   * The default implementation of {@link ANTLRErrorStrategy.sync} makes sure\n   * that the current lookahead symbol is consistent with what were expecting\n   * at this point in the ATN. You can call this anytime but ANTLR only\n   * generates code to check before subrules/loops and each iteration.\n   *\n   * Implements Jim Idle's magic sync mechanism in closures and optional\n   * subrules. E.g.,\n   *\n   * ```\n   * a : sync ( stuff sync )* ;\n   * sync : {consume to what can follow sync} ;\n   * ```\n   *\n   * At the start of a sub rule upon error, {@link sync} performs single\n   * token deletion, if possible. If it can't do that, it bails on the current\n   * rule and uses the default error recovery, which consumes until the\n   * resynchronization set of the current rule.\n   *\n   * If the sub rule is optional (`(...)?`, `(...)*`, or block\n   * with an empty alternative), then the expected set includes what follows\n   * the subrule.\n   *\n   * During loop iteration, it consumes until it sees a token that can start a\n   * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n   * stay in the loop as long as possible.\n   *\n   * **ORIGINS**\n   *\n   * Previous versions of ANTLR did a poor job of their recovery within loops.\n   * A single mismatch token or missing token would force the parser to bail\n   * out of the entire rules surrounding the loop. So, for rule\n   *\n   * ```\n   * classDef : 'class' ID '{' member* '}'\n   * ```\n   *\n   * input with an extra token between members would force the parser to\n   * consume until it found the next class definition rather than the next\n   * member definition of the current class.\n   *\n   * This functionality cost a little bit of effort because the parser has to\n   * compare token set at the start of the loop and at each iteration. If for\n   * some reason speed is suffering for you, you can turn off this\n   * functionality by simply overriding this method as a blank { }.\n   *\n   */\n  sync(recognizer) {\n    if (this.inErrorRecoveryMode(recognizer)) {\n      return;\n    }\n    const s = recognizer.atn.states[recognizer.state];\n    const la = recognizer.tokenStream.LA(1);\n    const nextTokens = recognizer.atn.nextTokens(s);\n    if (nextTokens.contains(la)) {\n      this.nextTokensContext = null;\n      this.nextTokenState = ATNState.INVALID_STATE_NUMBER;\n      return;\n    }\n    if (nextTokens.contains(Token.EPSILON)) {\n      if (this.nextTokensContext === null) {\n        this.nextTokensContext = recognizer.context;\n        this.nextTokenState = recognizer.state;\n      }\n      return;\n    }\n    switch (s.constructor.stateType) {\n      case ATNState.BLOCK_START:\n      case ATNState.STAR_BLOCK_START:\n      case ATNState.PLUS_BLOCK_START:\n      case ATNState.STAR_LOOP_ENTRY: {\n        if (this.singleTokenDeletion(recognizer) !== null) {\n          return;\n        }\n        throw new InputMismatchException(recognizer);\n      }\n      case ATNState.PLUS_LOOP_BACK:\n      case ATNState.STAR_LOOP_BACK: {\n        this.reportUnwantedToken(recognizer);\n        const expecting = new IntervalSet();\n        expecting.addSet(recognizer.getExpectedTokens());\n        const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n        break;\n      }\n      default:\n    }\n  }\n  /**\n   * This is called by {@link reportError} when the exception is a\n   * {@link NoViableAltException}.\n   *\n   * @see reportError\n   *\n   * @param recognizer the parser instance\n   * @param e the recognition exception\n   */\n  reportNoViableAlternative(recognizer, e) {\n    if (e.message.length > 0) {\n      recognizer.notifyErrorListeners(e.message, e.offendingToken, e);\n      return;\n    }\n    const tokens = recognizer.tokenStream;\n    let input;\n    if (tokens !== null && e.startToken) {\n      if (e.startToken.type === Token.EOF) {\n        input = \"<EOF>\";\n      } else {\n        input = tokens.getTextFromRange(e.startToken, e.offendingToken);\n      }\n    } else {\n      input = \"<unknown input>\";\n    }\n    const msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input);\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n  }\n  /**\n   * This is called by {@link reportError} when the exception is an {@link InputMismatchException}.\n   *\n   * @see reportError\n   *\n   * @param recognizer the parser instance\n   * @param e the recognition exception\n   */\n  reportInputMismatch(recognizer, e) {\n    if (e.message.length > 0) {\n      recognizer.notifyErrorListeners(e.message, e.offendingToken, e);\n      return;\n    }\n    const msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) + \" expecting \" + e.getExpectedTokens().toStringWithVocabulary(recognizer.vocabulary);\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n  }\n  /**\n   * This is called by {@link reportError} when the exception is a\n   * {@link FailedPredicateException}.\n   *\n   * @see reportError\n   *\n   * @param recognizer the parser instance\n   * @param e the recognition exception\n   */\n  reportFailedPredicate(recognizer, e) {\n    const ruleName = recognizer.ruleNames[recognizer.context.ruleIndex];\n    const msg = \"rule \" + ruleName + \" \" + e.message;\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n  }\n  /**\n   * This method is called to report a syntax error which requires the removal\n   * of a token from the input stream. At the time this method is called, the\n   * erroneous symbol is current `LT(1)` symbol and has not yet been\n   * removed from the input stream. When this method returns,\n   * `recognizer` is in error recovery mode.\n   *\n   * This method is called when {@link singleTokenDeletion} identifies\n   * single-token deletion as a viable recovery strategy for a mismatched\n   * input error.\n   *\n   * The default implementation simply returns if the handler is already in\n   * error recovery mode. Otherwise, it calls {@link beginErrorCondition} to\n   * enter error recovery mode, followed by calling\n   * {@link Parser.notifyErrorListeners}.\n   *\n   * @param recognizer the parser instance\n   */\n  reportUnwantedToken(recognizer) {\n    if (this.inErrorRecoveryMode(recognizer)) {\n      return;\n    }\n    this.beginErrorCondition(recognizer);\n    const t = recognizer.getCurrentToken();\n    const tokenName = this.getTokenErrorDisplay(t);\n    const expecting = this.getExpectedTokens(recognizer);\n    const msg = \"extraneous input \" + tokenName + \" expecting \" + expecting.toStringWithVocabulary(recognizer.vocabulary);\n    recognizer.notifyErrorListeners(msg, t, null);\n  }\n  /**\n   * This method is called to report a syntax error which requires the\n   * insertion of a missing token into the input stream. At the time this\n   * method is called, the missing token has not yet been inserted. When this\n   * method returns, `recognizer` is in error recovery mode.\n   *\n   * This method is called when {@link singleTokenInsertion} identifies\n   * single-token insertion as a viable recovery strategy for a mismatched\n   * input error.\n   *\n   * The default implementation simply returns if the handler is already in\n   * error recovery mode. Otherwise, it calls {@link beginErrorCondition} to\n   * enter error recovery mode, followed by calling\n   * {@link Parser.notifyErrorListeners}.\n   *\n   * @param recognizer the parser instance\n   */\n  reportMissingToken(recognizer) {\n    if (this.inErrorRecoveryMode(recognizer)) {\n      return;\n    }\n    this.beginErrorCondition(recognizer);\n    const t = recognizer.getCurrentToken();\n    const expecting = this.getExpectedTokens(recognizer);\n    const msg = \"missing \" + expecting.toStringWithVocabulary(recognizer.vocabulary) + \" at \" + this.getTokenErrorDisplay(t);\n    recognizer.notifyErrorListeners(msg, t, null);\n  }\n  /**\n   * The default implementation attempts to recover from the mismatched input\n   * by using single token insertion and deletion as described below. If the\n   * recovery attempt fails, this method throws an\n   * {@link InputMismatchException}.\n   *\n   * **EXTRA TOKEN** (single token deletion)\n   *\n   * `LA(1)` is not what we are looking for. If `LA(2)` has the\n   * right token, however, then assume `LA(1)` is some extra spurious\n   * token and delete it. Then consume and return the next token (which was\n   * the `LA(2)` token) as the successful result of the match operation.\n   *\n   * This recovery strategy is implemented by {@link singleTokenDeletion}.\n   *\n   * **MISSING TOKEN** (single token insertion)\n   *\n   * If current token (at `LA(1)`) is consistent with what could come\n   * after the expected `LA(1)` token, then assume the token is missing\n   * and use the parser's {@link TokenFactory} to create it on the fly. The\n   * \"insertion\" is performed by returning the created token as the successful\n   * result of the match operation.\n   *\n   * This recovery strategy is implemented by {@link singleTokenInsertion}.\n   *\n   * **EXAMPLE**\n   *\n   * For example, Input `i=(3;` is clearly missing the `')'`. When\n   * the parser returns from the nested call to `expr`, it will have\n   * call chain:\n   *\n   * ```\n   * stat -> expr -> atom\n   * ```\n   *\n   * and it will be trying to match the `')'` at this point in the\n   * derivation:\n   *\n   * ```\n   * => ID '=' '(' INT ')' ('+' atom)* ';'\n   * ^\n   * ```\n   *\n   * The attempt to match `')'` will fail when it sees `';'` and\n   * call {@link recoverInline}. To recover, it sees that `LA(1)==';'`\n   * is in the set of tokens that can follow the `')'` token reference\n   * in rule `atom`. It can assume that you forgot the `')'`.\n   */\n  recoverInline(recognizer) {\n    const matchedSymbol = this.singleTokenDeletion(recognizer);\n    if (matchedSymbol) {\n      recognizer.consume();\n      return matchedSymbol;\n    }\n    if (this.singleTokenInsertion(recognizer)) {\n      return this.getMissingSymbol(recognizer);\n    }\n    throw new InputMismatchException(recognizer);\n  }\n  /**\n   * This method implements the single-token insertion inline error recovery\n   * strategy. It is called by {@link recoverInline} if the single-token\n   * deletion strategy fails to recover from the mismatched input. If this\n   * method returns `true`, `recognizer` will be in error recovery\n   * mode.\n   *\n   * This method determines whether or not single-token insertion is viable by\n   * checking if the `LA(1)` input symbol could be successfully matched\n   * if it were instead the `LA(2)` symbol. If this method returns\n   * `true`, the caller is responsible for creating and inserting a\n   * token with the correct type to produce this behavior.\n   *\n   * @param recognizer the parser instance\n   * @returns `true` if single-token insertion is a viable recovery\n   * strategy for the current mismatched input, otherwise `false`\n   */\n  singleTokenInsertion(recognizer) {\n    const currentSymbolType = recognizer.tokenStream?.LA(1) ?? -1;\n    const atn = recognizer.atn;\n    const currentState = atn.states[recognizer.state];\n    const next = currentState.transitions[0].target;\n    const expectingAtLL2 = atn.nextTokens(next, recognizer.context ?? void 0);\n    if (expectingAtLL2.contains(currentSymbolType)) {\n      this.reportMissingToken(recognizer);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * This method implements the single-token deletion inline error recovery\n   * strategy. It is called by {@link recoverInline} to attempt to recover\n   * from mismatched input. If this method returns null, the parser and error\n   * handler state will not have changed. If this method returns non-null,\n   * `recognizer` will *not* be in error recovery mode since the\n   * returned token was a successful match.\n   *\n   * If the single-token deletion is successful, this method calls\n   * {@link reportUnwantedToken} to report the error, followed by\n   * {@link Parser.consume} to actually \"delete\" the extraneous token. Then,\n   * before returning {@link reportMatch} is called to signal a successful\n   * match.\n   *\n   * @param recognizer the parser instance\n   * @returns the successfully matched {@link Token} instance if single-token\n   * deletion successfully recovers from the mismatched input, otherwise\n   * `null`\n   */\n  singleTokenDeletion(recognizer) {\n    const nextTokenType = recognizer.tokenStream?.LA(2) ?? -1;\n    const expecting = this.getExpectedTokens(recognizer);\n    if (expecting.contains(nextTokenType)) {\n      this.reportUnwantedToken(recognizer);\n      recognizer.consume();\n      const matchedSymbol = recognizer.getCurrentToken();\n      this.reportMatch(recognizer);\n      return matchedSymbol;\n    }\n    return null;\n  }\n  /**\n   * Conjure up a missing token during error recovery.\n   *\n   * The recognizer attempts to recover from single missing\n   * symbols. But, actions might refer to that missing symbol.\n   * For example, x=ID {f($x);}. The action clearly assumes\n   * that there has been an identifier matched previously and that\n   * $x points at that token. If that token is missing, but\n   * the next token in the stream is what we want we assume that\n   * this token is missing and we keep going. Because we\n   * have to return some token to replace the missing token,\n   * we have to conjure one up. This method gives the user control\n   * over the tokens returned for missing tokens. Mostly,\n   * you will want to create something special for identifier\n   * tokens. For literals such as '{' and ',', the default\n   * action in the parser or tree parser works. It simply creates\n   * a CommonToken of the appropriate type. The text will be the token.\n   * If you change what tokens must be created by the lexer,\n   * override this method to create the appropriate tokens.\n   */\n  getMissingSymbol(recognizer) {\n    const currentSymbol = recognizer.getCurrentToken();\n    const expecting = this.getExpectedTokens(recognizer);\n    let expectedTokenType = Token.INVALID_TYPE;\n    if (expecting.length !== 0) {\n      expectedTokenType = expecting.minElement;\n    }\n    let tokenText;\n    if (expectedTokenType === Token.EOF) {\n      tokenText = \"<missing EOF>\";\n    } else {\n      tokenText = \"<missing \" + recognizer.vocabulary.getDisplayName(expectedTokenType) + \">\";\n    }\n    let current = currentSymbol;\n    const lookBack = recognizer.tokenStream?.LT(-1);\n    if (current.type === Token.EOF && lookBack !== null) {\n      current = lookBack;\n    }\n    return recognizer.getTokenFactory().create(\n      current.source,\n      expectedTokenType,\n      tokenText,\n      Token.DEFAULT_CHANNEL,\n      -1,\n      -1,\n      current.line,\n      current.column\n    );\n  }\n  getExpectedTokens(recognizer) {\n    return recognizer.getExpectedTokens();\n  }\n  /**\n   * How should a token be displayed in an error message? The default\n   * is to display just the text, but during development you might\n   * want to have a lot of information spit out. Override in that case\n   * to use t.toString() (which, for CommonToken, dumps everything about\n   * the token). This is better than forcing you to override a method in\n   * your token objects because you don't have to go modify your lexer\n   * so that it creates a new Java type.\n   */\n  getTokenErrorDisplay(t) {\n    if (t === null) {\n      return \"<no token>\";\n    }\n    let s = t.text;\n    if (!s) {\n      if (t.type === Token.EOF) {\n        s = \"<EOF>\";\n      } else {\n        s = \"<\" + t.type + \">\";\n      }\n    }\n    return this.escapeWSAndQuote(s);\n  }\n  escapeWSAndQuote(s) {\n    s = s.replace(/\\n/g, \"\\\\n\");\n    s = s.replace(/\\r/g, \"\\\\r\");\n    s = s.replace(/\\t/g, \"\\\\t\");\n    return \"'\" + s + \"'\";\n  }\n  /**\n   * Compute the error recovery set for the current rule. During\n   * rule invocation, the parser pushes the set of tokens that can\n   * follow that rule reference on the stack; this amounts to\n   * computing FIRST of what follows the rule reference in the\n   * enclosing rule. See LinearApproximator.FIRST().\n   * This local follow set only includes tokens\n   * from within the rule; i.e., the FIRST computation done by\n   * ANTLR stops at the end of a rule.\n   *\n   * EXAMPLE\n   *\n   * When you find a \"no viable alt exception\", the input is not\n   * consistent with any of the alternatives for rule r. The best\n   * thing to do is to consume tokens until you see something that\n   * can legally follow a call to r//or* any rule that called r.\n   * You don't want the exact set of viable next tokens because the\n   * input might just be missing a token--you might consume the\n   * rest of the input looking for one of the missing tokens.\n   *\n   * Consider grammar:\n   *\n   * a : '[' b ']'\n   * | '(' b ')'\n   * ;\n   * b : c '^' INT ;\n   * c : ID\n   * | INT\n   * ;\n   *\n   * At each rule invocation, the set of tokens that could follow\n   * that rule is pushed on a stack. Here are the various\n   * context-sensitive follow sets:\n   *\n   * FOLLOW(b1_in_a) = FIRST(']') = ']'\n   * FOLLOW(b2_in_a) = FIRST(')') = ')'\n   * FOLLOW(c_in_b) = FIRST('^') = '^'\n   *\n   * Upon erroneous input \"[]\", the call chain is\n   *\n   * a -> b -> c\n   *\n   * and, hence, the follow context stack is:\n   *\n   * depth follow set start of rule execution\n   * 0 <EOF> a (from main())\n   * 1 ']' b\n   * 2 '^' c\n   *\n   * Notice that ')' is not included, because b would have to have\n   * been called from a different context in rule a for ')' to be\n   * included.\n   *\n   * For error recovery, we cannot consider FOLLOW(c)\n   * (context-sensitive or otherwise). We need the combined set of\n   * all context-sensitive FOLLOW sets--the set of all tokens that\n   * could follow any reference in the call chain. We need to\n   * resync to one of those tokens. Note that FOLLOW(c)='^' and if\n   * we resync'd to that token, we'd consume until EOF. We need to\n   * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n   * In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n   * not consume anything. After printing an error, rule c would\n   * return normally. Rule b would not find the required '^' though.\n   * At this point, it gets a mismatched token error and throws an\n   * exception (since LA(1) is not in the viable following token\n   * set). The rule exception handler tries to recover, but finds\n   * the same recovery set and doesn't consume anything. Rule b\n   * exits normally returning to rule a. Now it finds the ']' (and\n   * with the successful match exits errorRecovery mode).\n   *\n   * So, you can see that the parser walks up the call chain looking\n   * for the token that was a member of the recovery set.\n   *\n   * Errors are not generated in errorRecovery mode.\n   *\n   * ANTLR's error recovery mechanism is based upon original ideas:\n   *\n   * \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n   *\n   * and\n   *\n   * \"A note on error recovery in recursive descent parsers\":\n   * http://portal.acm.org/citation.cfm?id=947902.947905\n   *\n   * Later, Josef Grosch had some good ideas:\n   *\n   * \"Efficient and Comfortable Error Recovery in Recursive Descent\n   * Parsers\":\n   * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n   *\n   * Like Grosch I implement context-sensitive FOLLOW sets that are combined\n   * at run-time upon error to avoid overhead during parsing.\n   */\n  getErrorRecoverySet(recognizer) {\n    const atn = recognizer.atn;\n    let ctx = recognizer.context;\n    const recoverSet = new IntervalSet();\n    while (ctx !== null && ctx.invokingState >= 0) {\n      const invokingState = atn.states[ctx.invokingState];\n      const rt = invokingState.transitions[0];\n      const follow = atn.nextTokens(rt.followState);\n      recoverSet.addSet(follow);\n      ctx = ctx.parent;\n    }\n    recoverSet.removeOne(Token.EPSILON);\n    return recoverSet;\n  }\n  /** Consume tokens until one matches the given token set. */\n  consumeUntil(recognizer, set) {\n    let ttype = recognizer.tokenStream?.LA(1) ?? -1;\n    while (ttype !== Token.EOF && !set.contains(ttype)) {\n      recognizer.consume();\n      ttype = recognizer.tokenStream?.LA(1) ?? -1;\n    }\n  }\n};\n\n// src/BailErrorStrategy.ts\nvar BailErrorStrategy = class extends DefaultErrorStrategy {\n  static {\n    __name(this, \"BailErrorStrategy\");\n  }\n  /**\n   * Instead of recovering from exception `e`, re-throw it wrapped\n   * in a {@link ParseCancellationException} so it is not caught by the\n   * rule function catches. Use {@link Exception//getCause()} to get the\n   * original {@link RecognitionException}.\n   */\n  recover(recognizer, e) {\n    throw new ParseCancellationException(e);\n  }\n  /**\n   * Make sure we don't attempt to recover inline; if the parser\n   * successfully recovers, it won't throw an exception.\n   */\n  recoverInline(recognizer) {\n    const exception = new InputMismatchException(recognizer);\n    throw new ParseCancellationException(exception);\n  }\n  // Make sure we don't attempt to recover from problems in subrules.\n  sync(_recognizer) {\n  }\n};\n\n// src/ListTokenSource.ts\nvar ListTokenSource = class {\n  static {\n    __name(this, \"ListTokenSource\");\n  }\n  /**\n   * The name of the input source. If this value is `null`, a call to\n   * {@link #getSourceName} should return the source name used to create the\n   * the next token in {@link #tokens} (or the previous token if the end of\n   * the input has been reached).\n   */\n  sourceName;\n  tokenFactory = CommonTokenFactory.DEFAULT;\n  /**\n   * The wrapped collection of {@link Token} objects to return.\n   */\n  tokens = [];\n  /**\n   * The index into {@link tokens} of token to return by the next call to\n   * {@link #nextToken}. The end of the input is indicated by this value\n   * being greater than or equal to the number of items in {@link #tokens}.\n   */\n  i = 0;\n  /**\n   * This field caches the EOF token for the token source.\n   */\n  eofToken = null;\n  constructor(tokens, sourceName) {\n    this.tokens = tokens;\n    this.sourceName = sourceName ?? \"\";\n  }\n  get column() {\n    if (this.i < this.tokens.length) {\n      return this.tokens[this.i].column;\n    }\n    if (this.eofToken !== null) {\n      return this.eofToken.column;\n    }\n    if (this.tokens.length > 0) {\n      const lastToken = this.tokens[this.tokens.length - 1];\n      const tokenText = lastToken.text;\n      if (tokenText) {\n        const lastNewLine = tokenText.lastIndexOf(\"\\n\");\n        if (lastNewLine >= 0) {\n          return tokenText.length - lastNewLine - 1;\n        }\n      }\n      return lastToken.column + lastToken.stop - lastToken.start + 1;\n    }\n    return 0;\n  }\n  nextToken() {\n    if (this.i >= this.tokens.length) {\n      if (this.eofToken === null) {\n        let start = -1;\n        if (this.tokens.length > 0) {\n          const previousStop = this.tokens[this.tokens.length - 1].stop;\n          if (previousStop !== -1) {\n            start = previousStop + 1;\n          }\n        }\n        const stop = Math.max(-1, start - 1);\n        this.eofToken = this.tokenFactory.create(\n          [this, this.inputStream],\n          Token.EOF,\n          \"EOF\",\n          Token.DEFAULT_CHANNEL,\n          start,\n          stop,\n          this.line,\n          this.column\n        );\n      }\n      return this.eofToken;\n    }\n    const t = this.tokens[this.i];\n    if (this.i === this.tokens.length - 1 && t.type === Token.EOF) {\n      this.eofToken = t;\n    }\n    this.i++;\n    return t;\n  }\n  get line() {\n    if (this.i < this.tokens.length) {\n      return this.tokens[this.i].line;\n    }\n    if (this.eofToken !== null) {\n      return this.eofToken.line;\n    }\n    if (this.tokens.length > 0) {\n      const lastToken = this.tokens[this.tokens.length - 1];\n      let line = lastToken.line;\n      const tokenText = lastToken.text;\n      if (tokenText) {\n        for (const char of tokenText) {\n          if (char === \"\\n\") {\n            line++;\n          }\n        }\n      }\n      return line;\n    }\n    return 1;\n  }\n  get inputStream() {\n    if (this.i < this.tokens.length) {\n      return this.tokens[this.i].inputStream;\n    }\n    if (this.eofToken !== null) {\n      return this.eofToken.inputStream;\n    }\n    if (this.tokens.length > 0) {\n      return this.tokens[this.tokens.length - 1].inputStream;\n    }\n    return null;\n  }\n  getSourceName() {\n    if (this.sourceName !== null) {\n      return this.sourceName;\n    }\n    const inputStream = this.inputStream;\n    if (inputStream !== null) {\n      return inputStream.getSourceName();\n    }\n    return \"List\";\n  }\n};\n\n// src/InterpreterRuleContext.ts\nvar InterpreterRuleContext = class extends ParserRuleContext {\n  static {\n    __name(this, \"InterpreterRuleContext\");\n  }\n  /** This is the backing field for {@link #getRuleIndex}. */\n  #ruleIndex;\n  constructor(ruleIndex, parent, invokingStateNumber) {\n    super(parent, invokingStateNumber);\n    this.#ruleIndex = ruleIndex;\n  }\n  get ruleIndex() {\n    return this.#ruleIndex;\n  }\n};\n\n// src/TraceListener.ts\nvar TraceListener = class {\n  static {\n    __name(this, \"TraceListener\");\n  }\n  parser;\n  constructor(parser) {\n    this.parser = parser;\n  }\n  enterEveryRule(ctx) {\n    console.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser.inputStream?.LT(1)?.text);\n  }\n  visitTerminal(node) {\n    console.log(\"consume \" + node.getSymbol() + \" rule \" + this.parser.ruleNames[this.parser.context.ruleIndex]);\n  }\n  exitEveryRule(ctx) {\n    console.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser.inputStream?.LT(1)?.text);\n  }\n  visitErrorNode(_node) {\n  }\n};\n\n// src/Parser.ts\nvar Parser = class extends Recognizer {\n  static {\n    __name(this, \"Parser\");\n  }\n  /** For testing only. */\n  printer = null;\n  /**\n   * Specifies whether or not the parser should construct a parse tree during\n   * the parsing process. The default value is `true`.\n   *\n   * @see #getBuildParseTree\n   * @see #setBuildParseTree\n   */\n  buildParseTrees = true;\n  /**\n   * The error handling strategy for the parser. The default value is a new\n   * instance of {@link DefaultErrorStrategy}.\n   *\n   * @see #getErrorHandler\n   * @see #setErrorHandler\n   */\n  errorHandler = new DefaultErrorStrategy();\n  /**\n   * The {@link ParserRuleContext} object for the currently executing rule.\n   * This is always non-null during the parsing process.\n   */\n  // TODO: make private\n  context = null;\n  precedenceStack = [];\n  /**\n   * The list of {@link ParseTreeListener} listeners registered to receive\n   * events during the parse.\n   *\n   * @see #addParseListener\n   */\n  parseListeners = null;\n  /**\n   * The number of syntax errors reported during parsing. This value is\n   * incremented each time {@link #notifyErrorListeners} is called.\n   */\n  syntaxErrors = 0;\n  /** Indicates parser has matched EOF token. See {@link #exitRule()}. */\n  matchedEOF = false;\n  /**\n   * When {@link #setTrace}`(true)` is called, a reference to the\n   * {@link TraceListener} is stored here so it can be easily removed in a\n   * later call to {@link #setTrace}`(false)`. The listener itself is\n   * implemented as a parser listener so this field is not directly used by\n   * other parser methods.\n   */\n  tracer = null;\n  /**\n   * This field holds the deserialized {@link ATN} with bypass alternatives, created\n   * lazily upon first demand. In 4.10 I changed from map<serializedATNString, ATN>\n   * since we only need one per parser object and also it complicates other targets\n   * that don't use ATN strings.\n   *\n   * @see ATNDeserializationOptions#isGenerateRuleBypassTransitions()\n   */\n  bypassAltsAtnCache = null;\n  #inputStream;\n  /**\n   * This is all the parsing support code essentially. Most of it is error recovery stuff.\n   */\n  constructor(input) {\n    super();\n    this.precedenceStack.push(0);\n    this.syntaxErrors = 0;\n    this.#inputStream = input;\n  }\n  /** reset the parser's state */\n  reset(rewindInputStream = true) {\n    if (rewindInputStream) {\n      this.inputStream.seek(0);\n    }\n    this.errorHandler.reset(this);\n    this.context = null;\n    this.syntaxErrors = 0;\n    this.matchedEOF = false;\n    this.setTrace(false);\n    this.precedenceStack = [];\n    this.precedenceStack.push(0);\n    if (this.interpreter) {\n      this.interpreter.reset();\n    }\n  }\n  /**\n   * Match current input symbol against `ttype`. If the symbol type\n   * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link consume} are\n   * called to complete the match process.\n   *\n   * If the symbol type does not match,\n   * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n   * strategy to attempt recovery. If {@link buildParseTree} is\n   * `true` and the token index of the symbol returned by\n   * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n   * the parse tree by calling {@link ParserRuleContext//addErrorNode}.\n   *\n   * @param ttype the token type to match\n   * @returns the matched symbol\n   * @throws RecognitionException if the current input symbol did not match\n   * `ttype` and the error strategy could not recover from the\n   * mismatched symbol\n   */\n  match(ttype) {\n    let t = this.getCurrentToken();\n    if (t.type === ttype) {\n      if (ttype === Token.EOF) {\n        this.matchedEOF = true;\n      }\n      this.errorHandler.reportMatch(this);\n      this.consume();\n    } else {\n      t = this.errorHandler.recoverInline(this);\n      if (this.buildParseTrees && t.tokenIndex === -1) {\n        this.context.addErrorNode(this.createErrorNode(this.context, t));\n      }\n    }\n    return t;\n  }\n  /**\n   * Match current input symbol as a wildcard. If the symbol type matches\n   * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n   * and {@link consume} are called to complete the match process.\n   *\n   * If the symbol type does not match,\n   * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n   * strategy to attempt recovery. If {@link buildParseTree} is\n   * `true` and the token index of the symbol returned by\n   * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n   * the parse tree by calling {@link ParserRuleContext//addErrorNode}.\n   *\n   * @returns the matched symbol\n   * @throws RecognitionException if the current input symbol did not match\n   * a wildcard and the error strategy could not recover from the mismatched\n   * symbol\n   */\n  matchWildcard() {\n    let t = this.getCurrentToken();\n    if (t.type > 0) {\n      this.errorHandler.reportMatch(this);\n      this.consume();\n    } else {\n      t = this.errorHandler.recoverInline(this);\n      if (this.buildParseTrees && t.tokenIndex === -1) {\n        this.context.addErrorNode(this.createErrorNode(this.context, t));\n      }\n    }\n    return t;\n  }\n  getParseListeners() {\n    return this.parseListeners ?? [];\n  }\n  /**\n   * Registers `listener` to receive events during the parsing process.\n   *\n   * To support output-preserving grammar transformations (including but not\n   * limited to left-recursion removal, automated left-factoring, and\n   * optimized code generation), calls to listener methods during the parse\n   * may differ substantially from calls made by\n   * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n   * particular, rule entry and exit events may occur in a different order\n   * during the parse than after the parser. In addition, calls to certain\n   * rule entry methods may be omitted.\n   *\n   * With the following specific exceptions, calls to listener events are\n   * deterministic*, i.e. for identical input the calls to listener\n   * methods will be the same.\n   *\n   * - Alterations to the grammar used to generate code may change the\n   * behavior of the listener calls.\n   * - Alterations to the command line options passed to ANTLR 4 when\n   * generating the parser may change the behavior of the listener calls.\n   * - Changing the version of the ANTLR Tool used to generate the parser\n   * may change the behavior of the listener calls.\n   *\n   * @param listener the listener to add\n   *\n   * @throws NullPointerException if {@code} listener is `null`\n   */\n  addParseListener(listener) {\n    if (listener === null) {\n      throw new Error(\"listener\");\n    }\n    if (this.parseListeners === null) {\n      this.parseListeners = [];\n    }\n    this.parseListeners.push(listener);\n  }\n  /**\n   * Remove `listener` from the list of parse listeners.\n   *\n   * If `listener` is `null` or has not been added as a parse\n   * listener, this method does nothing.\n   *\n   * @param listener the listener to remove\n   */\n  removeParseListener(listener) {\n    if (this.parseListeners !== null && listener !== null) {\n      const idx = this.parseListeners.indexOf(listener);\n      if (idx >= 0) {\n        this.parseListeners.splice(idx, 1);\n      }\n      if (this.parseListeners.length === 0) {\n        this.parseListeners = null;\n      }\n    }\n  }\n  // Remove all parse listeners.\n  removeParseListeners() {\n    this.parseListeners = null;\n  }\n  // Notify any parse listeners of an enter rule event.\n  triggerEnterRuleEvent() {\n    if (this.parseListeners !== null) {\n      const ctx = this.context;\n      this.parseListeners.forEach((listener) => {\n        listener.enterEveryRule(ctx);\n        ctx.enterRule(listener);\n      });\n    }\n  }\n  /**\n   * Notify any parse listeners of an exit rule event.\n   *\n   * @see //addParseListener\n   */\n  triggerExitRuleEvent() {\n    if (this.parseListeners !== null) {\n      const ctx = this.context;\n      this.parseListeners.slice(0).reverse().forEach((listener) => {\n        ctx.exitRule(listener);\n        listener.exitEveryRule(ctx);\n      });\n    }\n  }\n  getTokenFactory() {\n    return this.inputStream.tokenSource.tokenFactory;\n  }\n  // Tell our token source and error strategy about a new way to create tokens.\n  setTokenFactory(factory) {\n    this.inputStream.tokenSource.tokenFactory = factory;\n  }\n  /**\n   * The preferred method of getting a tree pattern. For example, here's a\n   * sample use:\n   *\n   * ```\n   * const t = parser.expr();\n   * const p = parser.compileParseTreePattern(\"<ID>+0\", MyParser.RULE_expr);\n   * const m = p.match(t);\n   * const id = m.get(\"ID\");\n   * ```\n   */\n  compileParseTreePattern(pattern, patternRuleIndex, lexer) {\n    if (!lexer) {\n      if (this.tokenStream !== null) {\n        const tokenSource = this.tokenStream.tokenSource;\n        if (tokenSource instanceof Lexer) {\n          lexer = tokenSource;\n        }\n      }\n    }\n    if (!lexer) {\n      throw new Error(\"Parser can't discover a lexer to use\");\n    }\n    const m2 = new ParseTreePatternMatcher(lexer, this);\n    return m2.compile(pattern, patternRuleIndex);\n  }\n  /**\n   * The ATN with bypass alternatives is expensive to create so we create it\n   * lazily.\n   *\n   * @throws UnsupportedOperationException if the current parser does not\n   * implement the {@link getSerializedATN()} method.\n   */\n  getATNWithBypassAlts() {\n    const serializedAtn = this.serializedATN;\n    if (serializedAtn === null) {\n      throw new Error(\"The current parser does not support an ATN with bypass alternatives.\");\n    }\n    if (this.bypassAltsAtnCache !== null) {\n      return this.bypassAltsAtnCache;\n    }\n    const deserializationOptions = { readOnly: false, verifyATN: true, generateRuleBypassTransitions: true };\n    this.bypassAltsAtnCache = new ATNDeserializer(deserializationOptions).deserialize(serializedAtn);\n    return this.bypassAltsAtnCache;\n  }\n  /**\n   * Gets the number of syntax errors reported during parsing. This value is\n   * incremented each time {@link notifyErrorListeners} is called.\n   */\n  get numberOfSyntaxErrors() {\n    return this.syntaxErrors;\n  }\n  get inputStream() {\n    return this.#inputStream;\n  }\n  set inputStream(input) {\n    this.tokenStream = input;\n  }\n  get tokenStream() {\n    return this.#inputStream;\n  }\n  /** Set the token stream and reset the parser. */\n  set tokenStream(input) {\n    this.reset(false);\n    this.#inputStream = input;\n  }\n  /**\n   * Match needs to return the current input symbol, which gets put\n   * into the label for the associated token ref; e.g., x=ID.\n   */\n  getCurrentToken() {\n    return this.inputStream.LT(1);\n  }\n  notifyErrorListeners(msg, offendingToken, err) {\n    offendingToken = offendingToken ?? null;\n    err = err ?? null;\n    if (offendingToken === null) {\n      offendingToken = this.getCurrentToken();\n    }\n    this.syntaxErrors += 1;\n    const line = offendingToken.line;\n    const column = offendingToken.column;\n    this.errorListenerDispatch.syntaxError(this, offendingToken, line, column, msg, err);\n  }\n  /**\n   * Consume and return the {@link getCurrentToken current symbol}.\n   *\n   * E.g., given the following input with `A` being the current\n   * lookahead symbol, this function moves the cursor to `B` and returns\n   * `A`.\n   *\n   * ```\n   * A B\n   * ^\n   * ```\n   *\n   * If the parser is not in error recovery mode, the consumed symbol is added\n   * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n   * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n   * If the parser *is* in error recovery mode, the consumed symbol is\n   * added to the parse tree using\n   * {@link ParserRuleContext//addErrorNode(Token)}, and\n   * {@link ParseTreeListener//visitErrorNode} is called on any parse\n   * listeners.\n   */\n  consume() {\n    const o = this.getCurrentToken();\n    if (o.type !== Token.EOF) {\n      this.tokenStream.consume();\n    }\n    const hasListener = this.parseListeners !== null && this.parseListeners.length > 0;\n    if (this.buildParseTrees || hasListener) {\n      let node;\n      if (this.errorHandler.inErrorRecoveryMode(this)) {\n        node = this.context.addErrorNode(this.createErrorNode(this.context, o));\n      } else {\n        node = this.context.addTokenNode(o);\n      }\n      if (hasListener) {\n        this.parseListeners.forEach((listener) => {\n          if (node instanceof ErrorNode) {\n            listener.visitErrorNode(node);\n          } else {\n            listener.visitTerminal(node);\n          }\n        });\n      }\n    }\n    return o;\n  }\n  addContextToParseTree() {\n    if (this.context?.parent) {\n      this.context.parent.addChild(this.context);\n    }\n  }\n  /**\n   * Always called by generated parsers upon entry to a rule. Access field\n   * {@link context} get the current context.\n   */\n  enterRule(localctx, state, _ruleIndex) {\n    this.state = state;\n    this.context = localctx;\n    this.context.start = this.inputStream.LT(1);\n    if (this.buildParseTrees) {\n      this.addContextToParseTree();\n    }\n    this.triggerEnterRuleEvent();\n  }\n  exitRule() {\n    if (this.matchedEOF) {\n      this.context.stop = this.inputStream.LT(1);\n    } else {\n      this.context.stop = this.inputStream.LT(-1);\n    }\n    this.triggerExitRuleEvent();\n    this.state = this.context.invokingState;\n    this.context = this.context.parent;\n  }\n  enterOuterAlt(localctx, altNum) {\n    localctx.setAltNumber(altNum);\n    if (this.buildParseTrees && this.context !== localctx) {\n      if (this.context?.parent) {\n        this.context.parent.removeLastChild();\n        this.context.parent.addChild(localctx);\n      }\n    }\n    this.context = localctx;\n  }\n  /**\n   * Get the precedence level for the top-most precedence rule.\n   *\n   * @returns The precedence level for the top-most precedence rule, or -1 if\n   * the parser context is not nested within a precedence rule.\n   */\n  getPrecedence() {\n    if (this.precedenceStack.length === 0) {\n      return -1;\n    }\n    return this.precedenceStack[this.precedenceStack.length - 1];\n  }\n  enterRecursionRule(localctx, state, ruleIndex, precedence) {\n    this.state = state;\n    this.precedenceStack.push(precedence);\n    this.context = localctx;\n    this.context.start = this.inputStream.LT(1);\n    this.triggerEnterRuleEvent();\n  }\n  /** Like {@link enterRule} but for recursive rules. */\n  pushNewRecursionContext(localctx, state, _ruleIndex) {\n    const previous = this.context;\n    previous.parent = localctx;\n    previous.invokingState = state;\n    previous.stop = this.inputStream.LT(-1);\n    this.context = localctx;\n    this.context.start = previous.start;\n    if (this.buildParseTrees) {\n      this.context.addChild(previous);\n    }\n    this.triggerEnterRuleEvent();\n  }\n  unrollRecursionContexts(parent) {\n    this.precedenceStack.pop();\n    this.context.stop = this.inputStream.LT(-1);\n    const retCtx = this.context;\n    const parseListeners = this.getParseListeners();\n    if (parseListeners !== null && parseListeners.length > 0) {\n      while (this.context !== parent) {\n        this.triggerExitRuleEvent();\n        this.context = this.context.parent;\n      }\n    } else {\n      this.context = parent;\n    }\n    retCtx.parent = parent;\n    if (this.buildParseTrees && parent !== null) {\n      parent.addChild(retCtx);\n    }\n  }\n  getInvokingContext(ruleIndex) {\n    let ctx = this.context;\n    while (ctx !== null) {\n      if (ctx.ruleIndex === ruleIndex) {\n        return ctx;\n      }\n      ctx = ctx.parent;\n    }\n    return null;\n  }\n  precpred(_localctx, precedence) {\n    return precedence >= this.precedenceStack[this.precedenceStack.length - 1];\n  }\n  /**\n   * Checks whether or not `symbol` can follow the current state in the\n   * ATN. The behavior of this method is equivalent to the following, but is\n   * implemented such that the complete context-sensitive follow set does not\n   * need to be explicitly constructed.\n   *\n   * ```\n   * return getExpectedTokens().contains(symbol);\n   * ```\n   *\n   * @param symbol the symbol type to check\n   * @returns `true` if `symbol` can follow the current state in\n   * the ATN, otherwise `false`.\n   */\n  isExpectedToken(symbol) {\n    const atn = this.interpreter.atn;\n    let ctx = this.context;\n    const s = atn.states[this.state];\n    let following = atn.nextTokens(s);\n    if (following.contains(symbol)) {\n      return true;\n    }\n    if (!following.contains(Token.EPSILON)) {\n      return false;\n    }\n    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n      const invokingState = atn.states[ctx.invokingState];\n      const rt = invokingState.transitions[0];\n      following = atn.nextTokens(rt.followState);\n      if (following.contains(symbol)) {\n        return true;\n      }\n      ctx = ctx.parent;\n    }\n    if (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Computes the set of input symbols which could follow the current parser\n   * state and context, as given by {@link getState} and {@link getContext},\n   * respectively.\n   *\n   * {@link ATN.getExpectedTokens ATN.getExpectedTokens(int, RuleContext)}\n   */\n  getExpectedTokens() {\n    return this.interpreter.atn.getExpectedTokens(this.state, this.context);\n  }\n  getExpectedTokensWithinCurrentRule() {\n    const atn = this.interpreter.atn;\n    const s = atn.states[this.state];\n    return atn.nextTokens(s);\n  }\n  /** Get a rule's index (i.e., `RULE_ruleName` field) or -1 if not found. */\n  getRuleIndex(ruleName) {\n    return this.getRuleIndexMap().get(ruleName) ?? -1;\n  }\n  /**\n   * @returns an array of string of the rule names in your parser instance\n   * leading up to a call to the current rule. You could override if\n   * you want more details such as the file/line info of where\n   * in the ATN a rule is invoked.\n   *\n   * this is very useful for error messages.\n   */\n  getRuleInvocationStack(p) {\n    p = p ?? null;\n    if (p === null) {\n      p = this.context;\n    }\n    const stack = [];\n    while (p !== null) {\n      const ruleIndex = p.ruleIndex;\n      if (ruleIndex < 0) {\n        stack.push(\"n/a\");\n      } else {\n        stack.push(this.ruleNames[ruleIndex]);\n      }\n      p = p.parent;\n    }\n    return stack;\n  }\n  /**\n   * For debugging and other purposes.\n   *\n   * TODO: this differs from the Java version. Change it.\n   */\n  getDFAStrings() {\n    return this.interpreter.decisionToDFA.toString();\n  }\n  /** For debugging and other purposes. */\n  dumpDFA() {\n    let seenOne = false;\n    for (const dfa of this.interpreter.decisionToDFA) {\n      if (dfa.length > 0) {\n        if (seenOne) {\n          console.log();\n        }\n        if (this.printer) {\n          this.printer.println(\"Decision \" + dfa.decision + \":\");\n          this.printer.print(dfa.toString(this.vocabulary));\n        }\n        seenOne = true;\n      }\n    }\n  }\n  getSourceName() {\n    return this.inputStream.getSourceName();\n  }\n  getParseInfo() {\n    const interp = this.interpreter;\n    if (interp instanceof ProfilingATNSimulator) {\n      return new ParseInfo(interp);\n    }\n    return void 0;\n  }\n  setProfile(profile) {\n    const interp = this.interpreter;\n    const saveMode = interp.predictionMode;\n    if (profile) {\n      if (!(interp instanceof ProfilingATNSimulator)) {\n        this.interpreter = new ProfilingATNSimulator(this);\n      }\n    } else if (interp instanceof ProfilingATNSimulator) {\n      const sharedContextCache = interp.sharedContextCache;\n      if (sharedContextCache) {\n        const sim = new ParserATNSimulator(this, this.atn, interp.decisionToDFA, sharedContextCache);\n        this.interpreter = sim;\n      }\n    }\n    this.interpreter.predictionMode = saveMode;\n  }\n  /**\n   * During a parse is sometimes useful to listen in on the rule entry and exit\n   * events as well as token matches. this is for quick and dirty debugging.\n   */\n  setTrace(trace) {\n    if (!trace) {\n      this.removeParseListener(this.tracer);\n      this.tracer = null;\n    } else {\n      if (this.tracer !== null) {\n        this.removeParseListener(this.tracer);\n      }\n      this.tracer = new TraceListener(this);\n      this.addParseListener(this.tracer);\n    }\n  }\n  createTerminalNode(parent, t) {\n    return new TerminalNode(t);\n  }\n  createErrorNode(parent, t) {\n    return new ErrorNode(t);\n  }\n};\n\n// src/ParserInterpreter.ts\nvar ParserInterpreter = class extends Parser {\n  static {\n    __name(this, \"ParserInterpreter\");\n  }\n  rootContext;\n  overrideDecisionRoot = null;\n  parentContextStack = [];\n  overrideDecisionAlt = -1;\n  overrideDecisionReached = false;\n  decisionToDFA;\n  sharedContextCache = new PredictionContextCache();\n  pushRecursionContextStates;\n  #overrideDecision = -1;\n  #overrideDecisionInputIndex = -1;\n  #grammarFileName;\n  #atn;\n  #ruleNames;\n  #vocabulary;\n  constructor(grammarFileName, vocabulary, ruleNames, atn, input) {\n    super(input);\n    this.#grammarFileName = grammarFileName;\n    this.#atn = atn;\n    this.#ruleNames = ruleNames.slice(0);\n    this.#vocabulary = vocabulary;\n    this.pushRecursionContextStates = new BitSet();\n    for (const state of atn.states) {\n      if (state instanceof StarLoopEntryState && state.precedenceRuleDecision) {\n        this.pushRecursionContextStates.set(state.stateNumber);\n      }\n    }\n    this.decisionToDFA = atn.decisionToState.map((ds, i) => {\n      return new DFA(ds, i);\n    });\n    this.interpreter = new ParserATNSimulator(this, atn, this.decisionToDFA, this.sharedContextCache);\n  }\n  reset() {\n    super.reset();\n    this.overrideDecisionReached = false;\n    this.overrideDecisionRoot = null;\n  }\n  get atn() {\n    return this.#atn;\n  }\n  get vocabulary() {\n    return this.#vocabulary;\n  }\n  get ruleNames() {\n    return this.#ruleNames;\n  }\n  get grammarFileName() {\n    return this.#grammarFileName;\n  }\n  get atnState() {\n    return this.#atn.states[this.state];\n  }\n  parse(startRuleIndex) {\n    const startRuleStartState = this.#atn.ruleToStartState[startRuleIndex];\n    this.rootContext = this.createInterpreterRuleContext(null, ATNState.INVALID_STATE_NUMBER, startRuleIndex);\n    if (startRuleStartState.isLeftRecursiveRule) {\n      this.enterRecursionRule(this.rootContext, startRuleStartState.stateNumber, startRuleIndex, 0);\n    } else {\n      this.enterRule(this.rootContext, startRuleStartState.stateNumber, startRuleIndex);\n    }\n    while (true) {\n      const p = this.atnState;\n      switch (p.constructor.stateType) {\n        case ATNState.RULE_STOP: {\n          if (this.context?.isEmpty()) {\n            if (startRuleStartState.isLeftRecursiveRule) {\n              const result = this.context;\n              const parentContext = this.parentContextStack.pop();\n              this.unrollRecursionContexts(parentContext[0]);\n              return result;\n            } else {\n              this.exitRule();\n              return this.rootContext;\n            }\n          }\n          this.visitRuleStopState(p);\n          break;\n        }\n        default: {\n          try {\n            this.visitState(p);\n          } catch (e) {\n            if (e instanceof RecognitionException) {\n              this.state = this.#atn.ruleToStopState[p.ruleIndex].stateNumber;\n              this.errorHandler.reportError(this, e);\n              this.recover(e);\n            } else {\n              throw e;\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n  addDecisionOverride(decision, tokenIndex, forcedAlt) {\n    this.#overrideDecision = decision;\n    this.#overrideDecisionInputIndex = tokenIndex;\n    this.overrideDecisionAlt = forcedAlt;\n  }\n  get overrideDecision() {\n    return this.#overrideDecision;\n  }\n  get overrideDecisionInputIndex() {\n    return this.#overrideDecisionInputIndex;\n  }\n  enterRecursionRule(localctx, state, ruleIndex, precedence) {\n    this.parentContextStack.push([this.context, localctx.invokingState]);\n    super.enterRecursionRule(localctx, state, ruleIndex, precedence);\n  }\n  get serializedATN() {\n    throw new Error(\"The ParserInterpreter does not support the serializedATN property.\");\n  }\n  visitState(p) {\n    let predictedAlt = 1;\n    if (p instanceof DecisionState) {\n      predictedAlt = this.visitDecisionState(p);\n    }\n    const transition = p.transitions[predictedAlt - 1];\n    switch (transition.transitionType) {\n      case Transition.EPSILON:\n        if (this.pushRecursionContextStates.get(p.stateNumber) && !(transition.target.constructor.stateType === ATNState.LOOP_END)) {\n          const parentContext = this.parentContextStack[this.parentContextStack.length - 1];\n          const localctx = this.createInterpreterRuleContext(parentContext[0], parentContext[1], this.context.ruleIndex);\n          this.pushNewRecursionContext(\n            localctx,\n            this.#atn.ruleToStartState[p.ruleIndex].stateNumber,\n            this.context.ruleIndex\n          );\n        }\n        break;\n      case Transition.ATOM:\n        this.match(transition.label.minElement);\n        break;\n      case Transition.RANGE:\n      case Transition.SET:\n      case Transition.NOT_SET:\n        if (!transition.matches(this.inputStream.LA(1), Token.MIN_USER_TOKEN_TYPE, 65535)) {\n          this.recoverInline();\n        }\n        this.matchWildcard();\n        break;\n      case Transition.WILDCARD:\n        this.matchWildcard();\n        break;\n      case Transition.RULE:\n        const ruleStartState = transition.target;\n        const ruleIndex = ruleStartState.ruleIndex;\n        const newContext = this.createInterpreterRuleContext(this.context, p.stateNumber, ruleIndex);\n        if (ruleStartState.isLeftRecursiveRule) {\n          this.enterRecursionRule(\n            newContext,\n            ruleStartState.stateNumber,\n            ruleIndex,\n            transition.precedence\n          );\n        } else {\n          this.enterRule(newContext, transition.target.stateNumber, ruleIndex);\n        }\n        break;\n      case Transition.PREDICATE:\n        const predicateTransition = transition;\n        if (!this.sempred(this.context, predicateTransition.ruleIndex, predicateTransition.predIndex)) {\n          throw new FailedPredicateException(this);\n        }\n        break;\n      case Transition.ACTION:\n        const actionTransition = transition;\n        this.action(this.context, actionTransition.ruleIndex, actionTransition.actionIndex);\n        break;\n      case Transition.PRECEDENCE:\n        if (!this.precpred(this.context, transition.precedence)) {\n          const precedence = transition.precedence;\n          throw new FailedPredicateException(this, `precpred(_ctx, ${precedence})`);\n        }\n        break;\n      default:\n        throw new Error(\"UnsupportedOperationException: Unrecognized ATN transition type.\");\n    }\n    this.state = transition.target.stateNumber;\n  }\n  visitDecisionState(p) {\n    let predictedAlt = 1;\n    if (p.transitions.length > 1) {\n      this.errorHandler.sync(this);\n      const decision = p.decision;\n      if (decision === this.#overrideDecision && this.inputStream.index === this.#overrideDecisionInputIndex && !this.overrideDecisionReached) {\n        predictedAlt = this.overrideDecisionAlt;\n        this.overrideDecisionReached = true;\n      } else {\n        predictedAlt = this.interpreter.adaptivePredict(this.inputStream, decision, this.context);\n      }\n    }\n    return predictedAlt;\n  }\n  createInterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {\n    return new InterpreterRuleContext(ruleIndex, parent, invokingStateNumber);\n  }\n  visitRuleStopState(p) {\n    const ruleStartState = this.#atn.ruleToStartState[p.ruleIndex];\n    if (ruleStartState.isLeftRecursiveRule) {\n      const [parentContext, state] = this.parentContextStack.pop();\n      this.unrollRecursionContexts(parentContext);\n      this.state = state;\n    } else {\n      this.exitRule();\n    }\n    const ruleTransition = this.#atn.states[this.state].transitions[0];\n    this.state = ruleTransition.followState.stateNumber;\n  }\n  recover(e) {\n    const i = this.inputStream.index;\n    this.errorHandler.recover(this, e);\n    if (this.inputStream.index === i) {\n      const tok = e.offendingToken;\n      if (!tok) {\n        throw new Error(\"Expected exception to have an offending token\");\n      }\n      const source = tok.tokenSource;\n      const stream = source?.inputStream ?? null;\n      const sourcePair = [source, stream];\n      if (e instanceof InputMismatchException) {\n        const expectedTokens = e.getExpectedTokens();\n        if (!expectedTokens) {\n          throw new Error(\"Expected the exception to provide expected tokens\");\n        }\n        let expectedTokenType = Token.INVALID_TYPE;\n        if (expectedTokens.length !== 0) {\n          expectedTokenType = expectedTokens.minElement;\n        }\n        const errToken = this.getTokenFactory().create(\n          sourcePair,\n          expectedTokenType,\n          tok.text,\n          Token.DEFAULT_CHANNEL,\n          -1,\n          -1,\n          tok.line,\n          tok.column\n        );\n        this.context.addErrorNode(this.createErrorNode(this.context, errToken));\n      } else {\n        const errToken = this.getTokenFactory().create(\n          sourcePair,\n          Token.INVALID_TYPE,\n          tok.text,\n          Token.DEFAULT_CHANNEL,\n          -1,\n          -1,\n          tok.line,\n          tok.column\n        );\n        this.context.addErrorNode(this.createErrorNode(this.context, errToken));\n      }\n    }\n  }\n  recoverInline() {\n    return this.errorHandler.recoverInline(this);\n  }\n};\n\n// src/misc/MultiMap.ts\nvar MultiMap = class extends Map {\n  static {\n    __name(this, \"MultiMap\");\n  }\n  map(key, value) {\n    let elementsForKey = this.get(key);\n    if (!elementsForKey) {\n      elementsForKey = new Array();\n      this.set(key, elementsForKey);\n    }\n    elementsForKey.push(value);\n  }\n  getPairs() {\n    const pairs = new Array();\n    for (const key of this.keys()) {\n      const keys = this.get(key) ?? [];\n      for (const value of keys) {\n        pairs.push([key, value]);\n      }\n    }\n    return pairs;\n  }\n  toString() {\n    const entries = [];\n    this.forEach((value, key) => {\n      entries.push(`${key}=[${value.join(\", \")}]`);\n    });\n    return `{${entries.join(\", \")}}`;\n  }\n};\n\n// src/tree/pattern/CannotInvokeStartRuleError.ts\nvar CannotInvokeStartRuleError = class extends Error {\n  static {\n    __name(this, \"CannotInvokeStartRuleError\");\n  }\n  constructor(e) {\n    super();\n    this.cause = e;\n  }\n};\n\n// src/tree/pattern/RuleTagToken.ts\nvar RuleTagToken = class {\n  static {\n    __name(this, \"RuleTagToken\");\n  }\n  /** The name of the label associated with the rule tag. */\n  label;\n  /** The name of the parser rule associated with this rule tag. */\n  ruleName;\n  /**\n   * The token type for the current token. This is the token type assigned to\n   * the bypass alternative for the rule during ATN deserialization.\n   */\n  bypassTokenType;\n  constructor(ruleName, bypassTokenType, label) {\n    this.ruleName = ruleName;\n    this.bypassTokenType = bypassTokenType;\n    this.label = label;\n  }\n  /**\n   * Rule tag tokens are always placed on the {@link #DEFAULT_CHANNEL}.\n   */\n  get channel() {\n    return Token.DEFAULT_CHANNEL;\n  }\n  /**\n   * This method returns the rule tag formatted with `<` and `>`\n   * delimiters.\n   */\n  get text() {\n    if (this.label !== void 0) {\n      return \"<\" + this.label + \":\" + this.ruleName + \">\";\n    }\n    return \"<\" + this.ruleName + \">\";\n  }\n  /**\n   * Rule tag tokens have types assigned according to the rule bypass\n   * transitions created during ATN deserialization.\n   */\n  get type() {\n    return this.bypassTokenType;\n  }\n  /**\n   * The implementation for {@link RuleTagToken} always returns 0.\n   */\n  get line() {\n    return 0;\n  }\n  /**\n   * The implementation for {@link RuleTagToken} always returns -1.\n   */\n  get column() {\n    return -1;\n  }\n  /**\n   * The implementation for {@link RuleTagToken} always returns -1.\n   */\n  get tokenIndex() {\n    return -1;\n  }\n  /**\n   * The implementation for {@link RuleTagToken} always returns -1.\n   */\n  get start() {\n    return -1;\n  }\n  /**\n   * The implementation for {@link RuleTagToken} always returns -1.\n   */\n  get stop() {\n    return -1;\n  }\n  /**\n   * The implementation for {@link RuleTagToken} always returns `null`.\n   */\n  get tokenSource() {\n    return null;\n  }\n  /**\n   * The implementation for {@link RuleTagToken} always returns `null`.\n   */\n  get inputStream() {\n    return null;\n  }\n  /**\n   * The implementation for {@link RuleTagToken} returns a string of the form\n   * `ruleName:bypassTokenType`.\n   */\n  toString() {\n    return this.ruleName + \":\" + this.bypassTokenType;\n  }\n};\n\n// src/tree/pattern/StartRuleDoesNotConsumeFullPatternError.ts\nvar StartRuleDoesNotConsumeFullPatternError = class extends Error {\n  static {\n    __name(this, \"StartRuleDoesNotConsumeFullPatternError\");\n  }\n};\n\n// src/tree/pattern/TagChunk.ts\nvar TagChunk = class extends Chunk {\n  static {\n    __name(this, \"TagChunk\");\n  }\n  tag;\n  label;\n  constructor(...args) {\n    let label;\n    let tag;\n    if (args.length === 1) {\n      tag = args[0];\n    } else {\n      label = args[0];\n      tag = args[1];\n    }\n    super();\n    if (!tag) {\n      throw new Error(\"tag cannot be null or empty\");\n    }\n    this.label = label;\n    this.tag = tag;\n  }\n  /**\n   * @returns a text representation of the tag chunk. Labeled tags\n   * are returned in the form `label:tag`, and unlabeled tags are\n   * returned as just the tag name.\n   */\n  toString() {\n    if (this.label !== void 0) {\n      return this.label + \":\" + this.tag;\n    }\n    return this.tag;\n  }\n};\n\n// src/tree/pattern/TextChunk.ts\nvar TextChunk = class extends Chunk {\n  static {\n    __name(this, \"TextChunk\");\n  }\n  text;\n  /**\n   * Constructs a new instance of {@link TextChunk} with the specified text.\n   *\n   * @param text The text of this chunk.\n   */\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  /**\n   * @returns the result of {@link #getText()} in single quotes.\n   */\n  toString() {\n    return \"'\" + this.text + \"'\";\n  }\n};\n\n// src/tree/pattern/TokenTagToken.ts\nvar TokenTagToken = class extends CommonToken {\n  static {\n    __name(this, \"TokenTagToken\");\n  }\n  tokenName;\n  /**\n   * The name of the label associated with the rule tag, or undefined if this is an unlabeled rule tag.\n   */\n  label;\n  constructor(tokenName, type, label) {\n    super({ type, source: CommonToken.EMPTY_SOURCE });\n    this.tokenName = tokenName;\n    this.label = label;\n  }\n  /**\n   *\n   * @returns the token tag formatted with `<` and `>` delimiters.\n   */\n  get text() {\n    if (this.label !== void 0) {\n      return \"<\" + this.label + \":\" + this.tokenName + \">\";\n    }\n    return \"<\" + this.tokenName + \">\";\n  }\n  /**\n   * @returns a string of the form `tokenName:type`.\n   */\n  toString() {\n    return this.tokenName + \":\" + this.type;\n  }\n};\n\n// src/tree/pattern/ParseTreePatternMatcher.ts\nvar ParseTreePatternMatcher = class {\n  static {\n    __name(this, \"ParseTreePatternMatcher\");\n  }\n  start = \"<\";\n  stop = \">\";\n  escape = \"\\\\\";\n  // e.g., \\< and \\> must escape BOTH!\n  /**\n   * This is the backing field for {@link #getLexer()}.\n   */\n  lexer;\n  /**\n   * This is the backing field for {@link #getParser()}.\n   */\n  parser;\n  /**\n   * Constructs a {@link ParseTreePatternMatcher} or from a {@link Lexer} and\n   * {@link Parser} object. The lexer input stream is altered for tokenizing\n   * the tree patterns. The parser is used as a convenient mechanism to get\n   * the grammar name, plus token, rule names.\n   */\n  constructor(lexer, parser) {\n    this.lexer = lexer;\n    this.parser = parser;\n  }\n  /**\n   * Set the delimiters used for marking rule and token tags within concrete\n   * syntax used by the tree pattern parser.\n   *\n   * @param start The start delimiter.\n   * @param stop The stop delimiter.\n   * @param escapeLeft The escape sequence to use for escaping a start or stop delimiter.\n   *\n   * @throws Error if `start` is `null` or empty.\n   * @throws Error if `stop` is `null` or empty.\n   */\n  setDelimiters(start, stop, escapeLeft) {\n    if (start === null || start.length === 0) {\n      throw new Error(\"start cannot be null or empty\");\n    }\n    if (stop === null || stop.length === 0) {\n      throw new Error(\"stop cannot be null or empty\");\n    }\n    this.start = start;\n    this.stop = stop;\n    this.escape = escapeLeft;\n  }\n  matches(...args) {\n    switch (args.length) {\n      case 2: {\n        const [tree, pattern] = args;\n        const labels = new MultiMap();\n        const mismatchedNode = this.matchImpl(tree, pattern.getPatternTree(), labels);\n        return mismatchedNode === null;\n      }\n      case 3: {\n        const [tree, pattern, patternRuleIndex] = args;\n        const p = this.compile(pattern, patternRuleIndex);\n        return this.matches(tree, p);\n      }\n      default: {\n        throw new Error(\"Invalid number of arguments\");\n      }\n    }\n  }\n  match(...args) {\n    switch (args.length) {\n      case 2: {\n        const [tree, pattern] = args;\n        const labels = new MultiMap();\n        const mismatchedNode = this.matchImpl(tree, pattern.getPatternTree(), labels);\n        return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);\n      }\n      case 3: {\n        const [tree, pattern, patternRuleIndex] = args;\n        const p = this.compile(pattern, patternRuleIndex);\n        return this.match(tree, p);\n      }\n      default: {\n        throw new Error(\"Invalid number of arguments\");\n      }\n    }\n  }\n  /**\n   * For repeated use of a tree pattern, compile it to a\n   * {@link ParseTreePattern} using this method.\n   */\n  compile(pattern, patternRuleIndex) {\n    const tokenList = this.tokenize(pattern);\n    const tokenSrc = new ListTokenSource(tokenList);\n    const tokens = new CommonTokenStream(tokenSrc);\n    const parserInterp = new ParserInterpreter(\n      this.parser.grammarFileName,\n      this.parser.vocabulary,\n      this.parser.ruleNames,\n      this.parser.getATNWithBypassAlts(),\n      tokens\n    );\n    parserInterp.removeErrorListeners();\n    let tree = null;\n    try {\n      parserInterp.errorHandler = new BailErrorStrategy();\n      tree = parserInterp.parse(patternRuleIndex);\n    } catch (error) {\n      if (error instanceof ParseCancellationException) {\n        throw error.cause;\n      } else if (error instanceof RecognitionException) {\n        throw error;\n      } else if (error instanceof Error) {\n        throw new CannotInvokeStartRuleError(error);\n      } else {\n        throw error;\n      }\n    }\n    if (tokens.LA(1) !== Token.EOF) {\n      throw new StartRuleDoesNotConsumeFullPatternError();\n    }\n    return new ParseTreePattern(this, pattern, patternRuleIndex, tree);\n  }\n  /**\n   * Used to convert the tree pattern string into a series of tokens. The\n   * input stream is reset.\n   */\n  getLexer() {\n    return this.lexer;\n  }\n  /**\n   * Used to collect to the grammar file name, token names, rule names for\n   * used to parse the pattern into a parse tree.\n   */\n  getParser() {\n    return this.parser;\n  }\n  // ---- SUPPORT CODE ----\n  tokenize(pattern) {\n    const chunks = this.split(pattern);\n    const tokens = new Array();\n    for (const chunk of chunks) {\n      if (chunk instanceof TagChunk) {\n        const tagChunk = chunk;\n        const char = tagChunk.tag[0];\n        if (char === char.toUpperCase()) {\n          const ttype = this.parser.getTokenType(tagChunk.tag);\n          if (ttype === Token.INVALID_TYPE) {\n            throw new Error(\"Unknown token \" + tagChunk.tag + \" in pattern: \" + pattern);\n          }\n          const t = new TokenTagToken(tagChunk.tag, ttype, tagChunk.label);\n          tokens.push(t);\n        } else {\n          if (char === char.toLowerCase()) {\n            const ruleIndex = this.parser.getRuleIndex(tagChunk.tag);\n            if (ruleIndex === -1) {\n              throw new Error(\"Unknown rule \" + tagChunk.tag + \" in pattern: \" + pattern);\n            }\n            const ruleImaginaryTokenType = this.parser.getATNWithBypassAlts().ruleToTokenType[ruleIndex];\n            tokens.push(new RuleTagToken(tagChunk.tag, ruleImaginaryTokenType, tagChunk.label));\n          } else {\n            throw new Error(\"invalid tag: \" + tagChunk.tag + \" in pattern: \" + pattern);\n          }\n        }\n      } else {\n        const textChunk = chunk;\n        const input = CharStream.fromString(textChunk.text);\n        this.lexer.inputStream = input;\n        let t = this.lexer.nextToken();\n        while (t.type !== Token.EOF) {\n          tokens.push(t);\n          t = this.lexer.nextToken();\n        }\n      }\n    }\n    return tokens;\n  }\n  /**\n   * Split `<ID> = <e:expr> ;` into 4 chunks for tokenizing by {@link #tokenize}.\n   */\n  split(pattern) {\n    let p = 0;\n    const n2 = pattern.length;\n    const chunks = new Array();\n    const starts = new Array();\n    const stops = new Array();\n    while (p < n2) {\n      if (p === pattern.indexOf(this.escape + this.start, p)) {\n        p += this.escape.length + this.start.length;\n      } else {\n        if (p === pattern.indexOf(this.escape + this.stop, p)) {\n          p += this.escape.length + this.stop.length;\n        } else {\n          if (p === pattern.indexOf(this.start, p)) {\n            starts.push(p);\n            p += this.start.length;\n          } else {\n            if (p === pattern.indexOf(this.stop, p)) {\n              stops.push(p);\n              p += this.stop.length;\n            } else {\n              p++;\n            }\n          }\n        }\n      }\n    }\n    if (starts.length > stops.length) {\n      throw new Error(\"unterminated tag in pattern: \" + pattern);\n    }\n    if (starts.length < stops.length) {\n      throw new Error(\"missing start tag in pattern: \" + pattern);\n    }\n    const tagCount = starts.length;\n    for (let i = 0; i < tagCount; i++) {\n      if (starts[i] >= stops[i]) {\n        throw new Error(\"tag delimiters out of order in pattern: \" + pattern);\n      }\n    }\n    if (tagCount === 0) {\n      const text = pattern.substring(0, n2);\n      chunks.push(new TextChunk(text));\n    }\n    if (tagCount > 0 && starts[0] > 0) {\n      const text = pattern.substring(0, starts[0]);\n      chunks.push(new TextChunk(text));\n    }\n    for (let i = 0; i < tagCount; i++) {\n      const tag = pattern.substring(starts[i] + this.start.length, stops[i]);\n      let ruleOrToken = tag;\n      let label;\n      const colon = tag.indexOf(\":\");\n      if (colon >= 0) {\n        label = tag.substring(0, colon);\n        ruleOrToken = tag.substring(colon + 1, tag.length);\n      }\n      chunks.push(new TagChunk(label, ruleOrToken));\n      if (i + 1 < tagCount) {\n        const text = pattern.substring(stops[i] + this.stop.length, starts[i + 1]);\n        chunks.push(new TextChunk(text));\n      }\n    }\n    if (tagCount > 0) {\n      const afterLastTag = stops[tagCount - 1] + this.stop.length;\n      if (afterLastTag < n2) {\n        const text = pattern.substring(afterLastTag, n2);\n        chunks.push(new TextChunk(text));\n      }\n    }\n    for (let i = 0; i < chunks.length; i++) {\n      const c = chunks[i];\n      if (c instanceof TextChunk) {\n        const tc = c;\n        const unescaped = tc.text.replaceAll(this.escape, \"\");\n        if (unescaped.length < tc.text.length) {\n          chunks[i] = new TextChunk(unescaped);\n        }\n      }\n    }\n    return chunks;\n  }\n  /**\n   * Recursively walk `tree` against `patternTree`, filling\n   * `match.`{@link ParseTreeMatch#labels labels}.\n   *\n   * @returns the first node encountered in `tree` which does not match\n   * a corresponding node in `patternTree`, or `null` if the match\n   * was successful. The specific node returned depends on the matching\n   * algorithm used by the implementation, and may be overridden.\n   */\n  matchImpl(tree, patternTree, labels) {\n    if (tree instanceof TerminalNode && patternTree instanceof TerminalNode) {\n      const t1 = tree;\n      const t2 = patternTree;\n      let mismatchedNode;\n      if (t1.getSymbol().type === t2.getSymbol().type) {\n        if (t2.getSymbol() instanceof TokenTagToken) {\n          const tokenTagToken = t2.getSymbol();\n          labels.map(tokenTagToken.tokenName, tree);\n          if (tokenTagToken.label !== void 0) {\n            labels.map(tokenTagToken.label, tree);\n          }\n        } else {\n          if (t1.getText() === t2.getText()) {\n          } else {\n            if (!mismatchedNode) {\n              mismatchedNode = t1;\n            }\n          }\n        }\n      } else {\n        if (!mismatchedNode) {\n          mismatchedNode = t1;\n        }\n      }\n      return mismatchedNode;\n    }\n    if (tree instanceof ParserRuleContext && patternTree instanceof ParserRuleContext) {\n      let mismatchedNode;\n      const ruleTagToken = this.getRuleTagToken(patternTree);\n      if (ruleTagToken) {\n        if (tree.ruleIndex === patternTree.ruleIndex) {\n          labels.map(ruleTagToken.ruleName, tree);\n          if (ruleTagToken.label) {\n            labels.map(ruleTagToken.label, tree);\n          }\n        } else {\n          if (!mismatchedNode) {\n            mismatchedNode = tree;\n          }\n        }\n        return mismatchedNode;\n      }\n      if (tree.getChildCount() !== patternTree.getChildCount()) {\n        if (!mismatchedNode) {\n          mismatchedNode = tree;\n        }\n        return mismatchedNode;\n      }\n      const n2 = tree.getChildCount();\n      for (let i = 0; i < n2; i++) {\n        const childMatch = this.matchImpl(tree.getChild(i), patternTree.getChild(i), labels);\n        if (childMatch) {\n          return childMatch;\n        }\n      }\n      return mismatchedNode;\n    }\n    return tree;\n  }\n  /**\n   * Is `t` `(expr <expr>)` subtree?\n   */\n  getRuleTagToken(t) {\n    if (t instanceof ParserRuleContext) {\n      if (t.getChildCount() === 1 && t.getChild(0) instanceof TerminalNode) {\n        const c = t.getChild(0);\n        if (c.getSymbol() instanceof RuleTagToken) {\n          return c.getSymbol();\n        }\n      }\n    }\n    return void 0;\n  }\n};\n\n// src/DiagnosticErrorListener.ts\nvar DiagnosticErrorListener = class extends BaseErrorListener {\n  static {\n    __name(this, \"DiagnosticErrorListener\");\n  }\n  /**\n   * When `true`, only exactly known ambiguities are reported.\n   */\n  exactOnly;\n  constructor(exactOnly) {\n    super();\n    this.exactOnly = exactOnly ?? true;\n  }\n  reportAmbiguity = /* @__PURE__ */ __name((recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) => {\n    if (this.exactOnly && !exact) {\n      return;\n    }\n    const decision = this.getDecisionDescription(recognizer, dfa);\n    const conflictingAlts = this.getConflictingAlts(ambigAlts, configs);\n    const text = recognizer.tokenStream?.getTextFromInterval(Interval.of(startIndex, stopIndex));\n    const message = `reportAmbiguity d=${decision}: ambigAlts=${conflictingAlts}, input='${text}'`;\n    recognizer.notifyErrorListeners(message, null, null);\n  }, \"reportAmbiguity\");\n  reportAttemptingFullContext = /* @__PURE__ */ __name((recognizer, dfa, startIndex, stopIndex, _conflictingAlts, _configs) => {\n    const decision = this.getDecisionDescription(recognizer, dfa);\n    const text = recognizer.tokenStream?.getTextFromInterval(Interval.of(startIndex, stopIndex));\n    const message = `reportAttemptingFullContext d=${decision}, input='${text}'`;\n    recognizer.notifyErrorListeners(message, null, null);\n  }, \"reportAttemptingFullContext\");\n  reportContextSensitivity = /* @__PURE__ */ __name((recognizer, dfa, startIndex, stopIndex, _prediction, _configs) => {\n    const decision = this.getDecisionDescription(recognizer, dfa);\n    const text = recognizer.tokenStream?.getTextFromInterval(Interval.of(startIndex, stopIndex));\n    const message = `reportContextSensitivity d=${decision}, input='${text}'`;\n    recognizer.notifyErrorListeners(message, null, null);\n  }, \"reportContextSensitivity\");\n  getDecisionDescription = /* @__PURE__ */ __name((recognizer, dfa) => {\n    const decision = dfa.decision;\n    const ruleIndex = dfa.atnStartState.ruleIndex;\n    const ruleNames = recognizer.ruleNames;\n    if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n      return decision.toString();\n    }\n    const ruleName = ruleNames[ruleIndex];\n    if (ruleName.length === 0) {\n      return decision.toString();\n    }\n    return `${decision} (${ruleName})`;\n  }, \"getDecisionDescription\");\n  /**\n   * Computes the set of conflicting or ambiguous alternatives from a\n   * configuration set, if that information was not already provided by the\n   * parser.\n   *\n   * @param reportedAlts The set of conflicting or ambiguous alternatives, as\n   * reported by the parser.\n   * @param configs The conflicting or ambiguous configuration set.\n   * @returns Returns `reportedAlts` if it is not `null`, otherwise\n   * returns the set of alternatives represented in `configs`.\n   */\n  getConflictingAlts = /* @__PURE__ */ __name((reportedAlts, configs) => {\n    if (reportedAlts) {\n      return reportedAlts;\n    }\n    const result = new BitSet();\n    for (let i = 0; i < configs.configs.length; i++) {\n      result.set(configs.configs[i].alt);\n    }\n    return result;\n  }, \"getConflictingAlts\");\n};\n\n// src/LexerInterpreter.ts\nvar LexerInterpreter = class extends Lexer {\n  static {\n    __name(this, \"LexerInterpreter\");\n  }\n  decisionToDFA;\n  sharedContextCache = new PredictionContextCache();\n  #grammarFileName;\n  #atn;\n  #ruleNames;\n  #channelNames;\n  #modeNames;\n  #vocabulary;\n  constructor(grammarFileName, vocabulary, ruleNames, channelNames, modeNames, atn, input) {\n    super(input);\n    if (atn.grammarType !== ATN.LEXER) {\n      throw new Error(\"IllegalArgumentException: The ATN must be a lexer ATN.\");\n    }\n    this.#grammarFileName = grammarFileName;\n    this.#atn = atn;\n    this.#ruleNames = ruleNames.slice(0);\n    this.#channelNames = channelNames.slice(0);\n    this.#modeNames = modeNames.slice(0);\n    this.#vocabulary = vocabulary;\n    this.decisionToDFA = atn.decisionToState.map((ds, i) => {\n      return new DFA(ds, i);\n    });\n    this.interpreter = new LexerATNSimulator(this, atn, this.decisionToDFA, this.sharedContextCache);\n  }\n  get atn() {\n    return this.#atn;\n  }\n  get grammarFileName() {\n    return this.#grammarFileName;\n  }\n  get ruleNames() {\n    return this.#ruleNames;\n  }\n  get channelNames() {\n    return this.#channelNames;\n  }\n  get modeNames() {\n    return this.#modeNames;\n  }\n  get vocabulary() {\n    return this.#vocabulary;\n  }\n  get serializedATN() {\n    throw new Error(\"The LexerInterpreter does not support the serializedATN property.\");\n  }\n};\n\n// src/RuntimeMetaData.ts\nvar RuntimeMetaData = class _RuntimeMetaData {\n  static {\n    __name(this, \"RuntimeMetaData\");\n  }\n  /**\n   * A compile-time constant containing the current version of the ANTLR 4\n   * runtime library.\n   *\n   * This compile-time constant value allows generated parsers and other\n   * libraries to include a literal reference to the version of the ANTLR 4\n   * runtime library the code was compiled against. At each release, we\n   * change this value.\n   *\n   * Version numbers are assumed to have the form\n   *\n   * major.minor.patch.revision-suffix,\n   *\n   * with the individual components defined as follows.\n   *\n   * - major is a required non-negative integer, and is equal to `4` for ANTLR 4.\n   * - minor is a required non-negative integer.\n   * - patch is an optional non-negative integer. When patch is omitted, the `.` (dot) appearing before it is\n   *   also omitted.\n   * - revision is an optional non-negative integer, and may only be included when patch is also included.\n   *   When revision is omitted, the `.` (dot) appearing before it is also omitted.\n   * - suffix is an optional string. When suffix is omitted, the `-` (hyphen-minus) appearing before it is also\n   *   omitted.\n   */\n  static VERSION = \"4.13.1\";\n  /**\n   * Gets the currently executing version of the ANTLR 4 runtime library.\n   *\n   * This method provides runtime access to the {@link VERSION} field, as\n   * opposed to directly referencing the field as a compile-time constant.\n   *\n   * @returns The currently executing version of the ANTLR 4 library\n   */\n  static getRuntimeVersion() {\n    return _RuntimeMetaData.VERSION;\n  }\n  /**\n   * This method provides the ability to detect mismatches between the version\n   * of ANTLR 4 used to generate a parser, the version of the ANTLR runtime a\n   * parser was compiled against, and the version of the ANTLR runtime which\n   * is currently executing.\n   *\n   * The version check is designed to detect the following two specific\n   * scenarios.\n   *\n   * - The ANTLR Tool version used for code generation does not match the\n   * currently executing runtime version.\n   * - The ANTLR Runtime version referenced at the time a parser was\n   * compiled does not match the currently executing runtime version.\n   *\n   *\n   * Starting with ANTLR 4.3, the code generator emits a call to this method\n   * using two constants in each generated lexer and parser: a hard-coded\n   * constant indicating the version of the tool used to generate the parser\n   * and a reference to the compile-time constant {@link VERSION}. At\n   * runtime, this method is called during the initialization of the generated\n   * parser to detect mismatched versions, and notify the registered listeners\n   * prior to creating instances of the parser.\n   *\n   *\n   * This method does not perform any detection or filtering of semantic\n   * changes between tool and runtime versions. It simply checks for a\n   * version match and emits an error to stderr if a difference\n   * is detected.\n   *\n   *\n   * Note that some breaking changes between releases could result in other\n   * types of runtime exceptions, such as a {@link LinkageError}, prior to\n   * calling this method. In these cases, the underlying version mismatch will\n   * not be reported here. This method is primarily intended to\n   * notify users of potential semantic changes between releases that do not\n   * result in binary compatibility problems which would be detected by the\n   * class loader. As with semantic changes, changes that break binary\n   * compatibility between releases are mentioned in the release notes\n   * accompanying the affected release.\n   *\n   *\n   * **Additional note for target developers:** The version check\n   * implemented by this class is designed to address specific compatibility\n   * concerns that may arise during the execution of Java applications. Other\n   * targets should consider the implementation of this method in the context\n   * of that target's known execution environment, which may or may not\n   * resemble the design provided for the Java target.\n   *\n   * @param generatingToolVersion The version of the tool used to generate a parser.\n   * This value may be null when called from user code that was not generated\n   * by, and does not reference, the ANTLR 4 Tool itself.\n   * @param compileTimeVersion The version of the runtime the parser was\n   * compiled against. This should always be passed using a direct reference\n   * to {@link VERSION}.\n   */\n  static checkVersion(generatingToolVersion, compileTimeVersion) {\n    const runtimeVersion = _RuntimeMetaData.VERSION;\n    let runtimeConflictsWithGeneratingTool = false;\n    let runtimeConflictsWithCompileTimeTool = false;\n    runtimeConflictsWithGeneratingTool = runtimeVersion !== generatingToolVersion && _RuntimeMetaData.getMajorMinorVersion(runtimeVersion) !== _RuntimeMetaData.getMajorMinorVersion(generatingToolVersion);\n    runtimeConflictsWithCompileTimeTool = runtimeVersion !== compileTimeVersion && _RuntimeMetaData.getMajorMinorVersion(runtimeVersion) !== _RuntimeMetaData.getMajorMinorVersion(compileTimeVersion);\n    if (runtimeConflictsWithGeneratingTool) {\n      console.error(`ANTLR Tool version ${generatingToolVersion} used for code generation does not match the current runtime version ${runtimeVersion}`);\n    }\n    if (runtimeConflictsWithCompileTimeTool) {\n      console.error(`ANTLR Runtime version ${compileTimeVersion} used for parser compilation does not match the current runtime version ${runtimeVersion}`);\n    }\n  }\n  /**\n   * Gets the major and minor version numbers from a version string. For\n   * details about the syntax of the input `version`.\n   * E.g., from x.y.z return x.y.\n   *\n   * @param version The complete version string.\n   * @returns A string of the form *major*.*minor* containing\n   * only the major and minor components of the version string.\n   */\n  static getMajorMinorVersion(version) {\n    const firstDot = version.indexOf(\".\");\n    const secondDot = firstDot >= 0 ? version.indexOf(\".\", firstDot + 1) : -1;\n    const firstDash = version.indexOf(\"-\");\n    let referenceLength = version.length;\n    if (secondDot >= 0) {\n      referenceLength = Math.min(referenceLength, secondDot);\n    }\n    if (firstDash >= 0) {\n      referenceLength = Math.min(referenceLength, firstDash);\n    }\n    return version.substring(0, referenceLength);\n  }\n};\n\n// src/TokenStreamRewriter.ts\nvar TokenStreamRewriter = class _TokenStreamRewriter {\n  static {\n    __name(this, \"TokenStreamRewriter\");\n  }\n  static DEFAULT_PROGRAM_NAME = \"default\";\n  static PROGRAM_INIT_SIZE = 100;\n  static MIN_TOKEN_INDEX = 0;\n  /** Our source stream */\n  tokens;\n  /**\n   * You may have multiple, named streams of rewrite operations.\n   *  I'm calling these things \"programs.\"\n   *  Maps String (name) -> rewrite (List)\n   */\n  programs = /* @__PURE__ */ new Map();\n  /** Map String (program name) -> Integer index */\n  lastRewriteTokenIndexes;\n  /**\n   * @param tokens The token stream to modify\n   */\n  constructor(tokens) {\n    this.tokens = tokens;\n  }\n  getTokenStream() {\n    return this.tokens;\n  }\n  /**\n   * Insert the supplied text after the specified token (or token index)\n   */\n  insertAfter(tokenOrIndex, text, programName = _TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n    let index;\n    if (typeof tokenOrIndex === \"number\") {\n      index = tokenOrIndex;\n    } else {\n      index = tokenOrIndex.tokenIndex;\n    }\n    const rewrites = this.getProgram(programName);\n    const op = new InsertAfterOp(this.tokens, index, rewrites.length, text);\n    rewrites.push(op);\n  }\n  /**\n   * Insert the supplied text before the specified token (or token index)\n   */\n  insertBefore(tokenOrIndex, text, programName = _TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n    let index;\n    if (typeof tokenOrIndex === \"number\") {\n      index = tokenOrIndex;\n    } else {\n      index = tokenOrIndex.tokenIndex;\n    }\n    const rewrites = this.getProgram(programName);\n    const op = new InsertBeforeOp(this.tokens, index, rewrites.length, text);\n    rewrites.push(op);\n  }\n  /**\n   * Replace the specified token with the supplied text\n   */\n  replaceSingle(tokenOrIndex, text, programName = _TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n    this.replace(tokenOrIndex, tokenOrIndex, text, programName);\n  }\n  /**\n   * Replace the specified range of tokens with the supplied text.\n   */\n  replace(from, to, text, programName = _TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n    if (typeof from !== \"number\") {\n      from = from.tokenIndex;\n    }\n    if (typeof to !== \"number\") {\n      to = to.tokenIndex;\n    }\n    if (from > to || from < 0 || to < 0 || to >= this.tokens.size) {\n      throw new RangeError(`replace: range invalid: ${from}..${to}(size=${this.tokens.size})`);\n    }\n    const rewrites = this.getProgram(programName);\n    const op = new ReplaceOp(this.tokens, from, to, rewrites.length, text);\n    rewrites.push(op);\n  }\n  /**\n   * Delete the specified range of tokens\n   */\n  delete(from, to, programName = _TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n    if (to == null) {\n      to = from;\n    }\n    this.replace(from, to, null, programName);\n  }\n  getProgram(name) {\n    let is = this.programs.get(name);\n    if (is == null) {\n      is = this.initializeProgram(name);\n    }\n    return is;\n  }\n  initializeProgram(name) {\n    const is = [];\n    this.programs.set(name, is);\n    return is;\n  }\n  /**\n   * @returns the text from the original tokens altered per the instructions given to this rewriter\n   */\n  getText(intervalOrProgram, programName = _TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n    let interval;\n    if (intervalOrProgram instanceof Interval) {\n      interval = intervalOrProgram;\n    } else {\n      interval = new Interval(0, this.tokens.size - 1);\n    }\n    if (typeof intervalOrProgram === \"string\") {\n      programName = intervalOrProgram;\n    }\n    const rewrites = this.programs.get(programName);\n    let start = interval.start;\n    let stop = interval.stop;\n    if (stop > this.tokens.size - 1) {\n      stop = this.tokens.size - 1;\n    }\n    if (start < 0) {\n      start = 0;\n    }\n    if (rewrites == null || rewrites.length === 0) {\n      return this.tokens.getTextFromInterval(new Interval(start, stop));\n    }\n    const buf = [];\n    const indexToOp = this.reduceToSingleOperationPerIndex(rewrites);\n    let i = start;\n    while (i <= stop && i < this.tokens.size) {\n      const op = indexToOp.get(i);\n      indexToOp.delete(i);\n      const t = this.tokens.get(i);\n      if (op == null) {\n        if (t.type !== Token.EOF) {\n          buf.push(String(t.text));\n        }\n        i++;\n      } else {\n        i = op.execute(buf);\n      }\n    }\n    if (stop === this.tokens.size - 1) {\n      for (const op of indexToOp.values()) {\n        if (op && op.index >= this.tokens.size - 1) {\n          buf.push(String(op.text));\n        }\n      }\n    }\n    return buf.join(\"\");\n  }\n  /**\n   * @returns a map from token index to operation\n   */\n  reduceToSingleOperationPerIndex(rewrites) {\n    for (let i = 0; i < rewrites.length; i++) {\n      const op = rewrites[i];\n      if (op == null) {\n        continue;\n      }\n      if (!(op instanceof ReplaceOp)) {\n        continue;\n      }\n      const rop = op;\n      const inserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);\n      for (const iop of inserts) {\n        if (iop.index === rop.index) {\n          rewrites[iop.instructionIndex] = null;\n          rop.text = String(iop.text) + (rop.text != null ? rop.text.toString() : \"\");\n        } else if (iop.index > rop.index && iop.index <= rop.lastIndex) {\n          rewrites[iop.instructionIndex] = null;\n        }\n      }\n      const prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);\n      for (const prevRop of prevReplaces) {\n        if (prevRop.index >= rop.index && prevRop.lastIndex <= rop.lastIndex) {\n          rewrites[prevRop.instructionIndex] = null;\n          continue;\n        }\n        const disjoint = prevRop.lastIndex < rop.index || prevRop.index > rop.lastIndex;\n        if (prevRop.text == null && rop.text == null && !disjoint) {\n          rewrites[prevRop.instructionIndex] = null;\n          rop.index = Math.min(prevRop.index, rop.index);\n          rop.lastIndex = Math.max(prevRop.lastIndex, rop.lastIndex);\n        } else if (!disjoint) {\n          throw new Error(`replace op boundaries of ${rop} overlap with previous ${prevRop}`);\n        }\n      }\n    }\n    for (let i = 0; i < rewrites.length; i++) {\n      const op = rewrites[i];\n      if (op == null) {\n        continue;\n      }\n      if (!(op instanceof InsertBeforeOp)) {\n        continue;\n      }\n      const iop = op;\n      const prevInserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);\n      for (const prevIop of prevInserts) {\n        if (prevIop.index === iop.index) {\n          if (prevIop instanceof InsertAfterOp) {\n            iop.text = this.catOpText(prevIop.text, iop.text);\n            rewrites[prevIop.instructionIndex] = null;\n          } else if (prevIop instanceof InsertBeforeOp) {\n            iop.text = this.catOpText(iop.text, prevIop.text);\n            rewrites[prevIop.instructionIndex] = null;\n          }\n        }\n      }\n      const prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);\n      for (const rop of prevReplaces) {\n        if (iop.index === rop.index) {\n          rop.text = this.catOpText(iop.text, rop.text);\n          rewrites[i] = null;\n          continue;\n        }\n        if (iop.index >= rop.index && iop.index <= rop.lastIndex) {\n          throw new Error(`insert op ${iop} within boundaries of previous ${rop}`);\n        }\n      }\n    }\n    const m2 = /* @__PURE__ */ new Map();\n    for (const op of rewrites) {\n      if (op == null) {\n        continue;\n      }\n      if (m2.get(op.index) != null) {\n        throw new Error(\"should only be one op per index\");\n      }\n      m2.set(op.index, op);\n    }\n    return m2;\n  }\n  catOpText(a, b) {\n    let x = \"\";\n    let y = \"\";\n    if (a != null) {\n      x = a.toString();\n    }\n    if (b != null) {\n      y = b.toString();\n    }\n    return x + y;\n  }\n  /**\n   * Get all operations before an index of a particular kind\n   */\n  getKindOfOps(rewrites, kind, before) {\n    return rewrites.slice(0, before).filter((op) => {\n      return op && op instanceof kind;\n    });\n  }\n};\nvar RewriteOperation = class {\n  static {\n    __name(this, \"RewriteOperation\");\n  }\n  /** What index into rewrites List are we? */\n  instructionIndex;\n  /** Token buffer index. */\n  index;\n  text;\n  tokens;\n  constructor(tokens, index, instructionIndex, text) {\n    this.tokens = tokens;\n    this.instructionIndex = instructionIndex;\n    this.index = index;\n    this.text = text === void 0 ? \"\" : text;\n  }\n  execute(_buf) {\n    return this.index;\n  }\n  toString() {\n    return \"<RewriteOperation@\" + this.tokens.get(this.index) + ':\"' + this.text + '\">';\n  }\n};\nvar InsertBeforeOp = class extends RewriteOperation {\n  static {\n    __name(this, \"InsertBeforeOp\");\n  }\n  constructor(tokens, index, instructionIndex, text) {\n    super(tokens, index, instructionIndex, text);\n  }\n  /**\n   * @returns the index of the next token to operate on\n   */\n  execute(buf) {\n    if (this.text) {\n      buf.push(this.text.toString());\n    }\n    if (this.tokens.get(this.index).type !== Token.EOF) {\n      buf.push(String(this.tokens.get(this.index).text));\n    }\n    return this.index + 1;\n  }\n  toString() {\n    return \"<InsertBeforeOp@\" + this.tokens.get(this.index) + ':\"' + this.text + '\">';\n  }\n};\nvar InsertAfterOp = class extends InsertBeforeOp {\n  static {\n    __name(this, \"InsertAfterOp\");\n  }\n  constructor(tokens, index, instructionIndex, text) {\n    super(tokens, index + 1, instructionIndex, text);\n  }\n  toString() {\n    return \"<InsertAfterOp@\" + this.tokens.get(this.index) + ':\"' + this.text + '\">';\n  }\n};\nvar ReplaceOp = class extends RewriteOperation {\n  static {\n    __name(this, \"ReplaceOp\");\n  }\n  lastIndex;\n  constructor(tokens, from, to, instructionIndex, text) {\n    super(tokens, from, instructionIndex, text);\n    this.lastIndex = to;\n  }\n  /**\n   * @returns the index of the next token to operate on\n   */\n  execute(buf) {\n    if (this.text) {\n      buf.push(this.text.toString());\n    }\n    return this.lastIndex + 1;\n  }\n  toString() {\n    if (this.text == null) {\n      return \"<DeleteOp@\" + this.tokens.get(this.index) + \"..\" + this.tokens.get(this.lastIndex) + \">\";\n    }\n    return \"<ReplaceOp@\" + this.tokens.get(this.index) + \"..\" + this.tokens.get(this.lastIndex) + ':\"' + this.text + '\">';\n  }\n};\n\n// src/UnbufferedTokenStream.ts\nvar UnbufferedTokenStream = class {\n  static {\n    __name(this, \"UnbufferedTokenStream\");\n  }\n  tokenSource;\n  /**\n   * A moving window buffer of the data being scanned. While there's a marker,\n   * we keep adding to buffer. Otherwise, {@link #consume consume()} resets so\n   * we start filling at index 0 again.\n   */\n  tokens;\n  /**\n   * The number of tokens currently in {@link #tokens tokens}.\n   *\n   * This is not the buffer capacity, that's `tokens.length`.\n   */\n  n;\n  /**\n   * 0..n-1 index into {@link #tokens tokens} of next token.\n   *\n   * The `LT(1)` token is `tokens[p]`. If `p == n`, we are\n   * out of buffered tokens.\n   */\n  p = 0;\n  /**\n   * Count up with {@link #mark mark()} and down with\n   * {@link #release release()}. When we `release()` the last mark,\n   * `numMarkers` reaches 0 and we reset the buffer. Copy\n   * `tokens[p]..tokens[n-1]` to `tokens[0]..tokens[(n-1)-p]`.\n   */\n  numMarkers = 0;\n  /**\n   * This is the `LT(-1)` token for the current position.\n   */\n  lastToken;\n  /**\n   * When `numMarkers > 0`, this is the `LT(-1)` token for the\n   * first token in {@link #tokens}. Otherwise, this is `null`.\n   */\n  lastTokenBufferStart;\n  /**\n   * Absolute token index. It's the index of the token about to be read via\n   * `LT(1)`. Goes from 0 to the number of tokens in the entire stream,\n   * although the stream size is unknown before the end is reached.\n   *\n   * This value is used to set the token indexes if the stream provides tokens\n   * that implement {@link WritableToken}.\n   */\n  currentTokenIndex = 0;\n  constructor(tokenSource, bufferSize) {\n    this.tokenSource = tokenSource;\n    bufferSize = bufferSize ?? 256;\n    this.tokens = new Array(bufferSize);\n    this.n = 0;\n    this.fill(1);\n  }\n  get(i) {\n    const bufferStartIndex = this.getBufferStartIndex();\n    if (i < bufferStartIndex || i >= bufferStartIndex + this.n) {\n      throw new Error(\"get(\" + i + \") outside buffer: \" + bufferStartIndex + \"..\" + (bufferStartIndex + this.n));\n    }\n    return this.tokens[i - bufferStartIndex];\n  }\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  LT(i) {\n    if (i === -1) {\n      return this.lastToken;\n    }\n    this.sync(i);\n    const index = this.p + i - 1;\n    if (index < 0) {\n      throw new Error(\"LT(\" + i + \") gives negative index\");\n    }\n    if (index >= this.n) {\n      return this.tokens[this.n - 1];\n    }\n    return this.tokens[index];\n  }\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  LA(i) {\n    return this.LT(i).type;\n  }\n  getText() {\n    return \"\";\n  }\n  getTextFromContext(ctx) {\n    return this.getTextFromInterval(ctx.getSourceInterval());\n  }\n  getTextFromInterval(interval) {\n    const bufferStartIndex = this.getBufferStartIndex();\n    const bufferStopIndex = bufferStartIndex + this.tokens.length - 1;\n    const start = interval.start;\n    const stop = interval.stop;\n    if (start < bufferStartIndex || stop > bufferStopIndex) {\n      throw new Error(\"interval \" + interval + \" not in token buffer window: \" + bufferStartIndex + \"..\" + bufferStopIndex);\n    }\n    const a = start - bufferStartIndex;\n    const b = stop - bufferStartIndex;\n    let result = \"\";\n    for (let i = a; i <= b; i++) {\n      const t = this.tokens[i];\n      result += t.text;\n    }\n    return result;\n  }\n  getTextFromRange(start, stop) {\n    return this.getTextFromInterval(Interval.of(start.tokenIndex, stop.tokenIndex));\n  }\n  consume() {\n    if (this.LA(1) === Token.EOF) {\n      throw new Error(\"cannot consume EOF\");\n    }\n    this.lastToken = this.tokens[this.p];\n    if (this.p === this.n - 1 && this.numMarkers === 0) {\n      this.n = 0;\n      this.p = -1;\n      this.lastTokenBufferStart = this.lastToken;\n    }\n    this.p++;\n    this.currentTokenIndex++;\n    this.sync(1);\n  }\n  /**\n   * Return a marker that we can release later.\n   *\n   * The specific marker value used for this class allows for some level of\n   * protection against misuse where `seek()` is called on a mark or\n   * `release()` is called in the wrong order.\n   */\n  mark() {\n    if (this.numMarkers === 0) {\n      this.lastTokenBufferStart = this.lastToken;\n    }\n    const mark = -this.numMarkers - 1;\n    this.numMarkers++;\n    return mark;\n  }\n  release(marker) {\n    const expectedMark = -this.numMarkers;\n    if (marker !== expectedMark) {\n      throw new Error(\"release() called with an invalid marker.\");\n    }\n    this.numMarkers--;\n    if (this.numMarkers === 0) {\n      if (this.p > 0) {\n        this.tokens.copyWithin(0, this.p, this.n);\n        this.n = this.n - this.p;\n        this.p = 0;\n      }\n      this.lastTokenBufferStart = this.lastToken;\n    }\n  }\n  get index() {\n    return this.currentTokenIndex;\n  }\n  seek(index) {\n    if (index === this.currentTokenIndex) {\n      return;\n    }\n    if (index > this.currentTokenIndex) {\n      this.sync(index - this.currentTokenIndex);\n      index = Math.min(index, this.getBufferStartIndex() + this.n - 1);\n    }\n    const bufferStartIndex = this.getBufferStartIndex();\n    const i = index - bufferStartIndex;\n    if (i < 0) {\n      throw new Error(\"cannot seek to negative index \" + index);\n    } else {\n      if (i >= this.n) {\n        throw new Error(\"seek to index outside buffer: \" + index + \" not in \" + bufferStartIndex + \"..\" + (bufferStartIndex + this.n));\n      }\n    }\n    this.p = i;\n    this.currentTokenIndex = index;\n    if (this.p === 0) {\n      this.lastToken = this.lastTokenBufferStart;\n    } else {\n      this.lastToken = this.tokens[this.p - 1];\n    }\n  }\n  get size() {\n    throw new Error(\"Unbuffered stream cannot know its size\");\n  }\n  getSourceName() {\n    return this.tokenSource.sourceName;\n  }\n  setLine(line) {\n    this.tokenSource.line = line;\n  }\n  setColumn(column) {\n    this.tokenSource.column = column;\n  }\n  /**\n   * Make sure we have 'need' elements from current position {@link #p p}. Last valid\n   * `p` index is `tokens.length-1`.  `p+need-1` is the tokens index 'need' elements\n   * ahead.  If we need 1 element, `(p+1-1)==p` must be less than `tokens.length`.\n   */\n  sync(want) {\n    const need = this.p + want - 1 - this.n + 1;\n    if (need > 0) {\n      this.fill(need);\n    }\n  }\n  /**\n   * Add `n` elements to the buffer. Returns the number of tokens\n   * actually added to the buffer. If the return value is less than `n`,\n   * then EOF was reached before `n` tokens could be added.\n   */\n  fill(n2) {\n    for (let i = 0; i < n2; i++) {\n      if (this.n > 0 && this.tokens[this.n - 1].type === Token.EOF) {\n        return i;\n      }\n      const t = this.tokenSource.nextToken();\n      this.add(t);\n    }\n    return n2;\n  }\n  add(t) {\n    if (this.n >= this.tokens.length) {\n      this.tokens.length = this.tokens.length * 2;\n    }\n    if (isWritableToken(t)) {\n      t.setTokenIndex(this.getBufferStartIndex() + this.n);\n    }\n    this.tokens[this.n++] = t;\n  }\n  getBufferStartIndex() {\n    return this.currentTokenIndex - this.p;\n  }\n};\nexport {\n  ATN,\n  ATNConfig,\n  ATNConfigSet,\n  ATNDeserializer,\n  ATNSerializer,\n  ATNSimulator,\n  ATNState,\n  AbstractParseTreeVisitor,\n  AbstractPredicateTransition,\n  ActionTransition,\n  ArrayPredictionContext,\n  AtomTransition,\n  BailErrorStrategy,\n  BaseErrorListener,\n  BasicBlockStartState,\n  BasicState,\n  BitSet,\n  BlockEndState,\n  BlockStartState,\n  BufferedTokenStream,\n  CannotInvokeStartRuleError,\n  CharStream,\n  CharStreamImpl,\n  Chunk,\n  CodePointTransitions,\n  CommonToken,\n  CommonTokenFactory,\n  CommonTokenStream,\n  ConsoleErrorListener,\n  DFA,\n  DFASerializer,\n  DFAState,\n  DecisionInfo,\n  DecisionState,\n  DefaultErrorStrategy,\n  DiagnosticErrorListener,\n  DoubleDict,\n  EmptyPredictionContext,\n  EpsilonTransition,\n  ErrorNode,\n  FailedPredicateException,\n  HashMap,\n  HashSet,\n  InputMismatchException,\n  IntStream,\n  InterpreterDataReader,\n  InterpreterRuleContext,\n  Interval,\n  IntervalSet,\n  LL1Analyzer,\n  Lexer,\n  LexerATNConfig,\n  LexerATNSimulator,\n  LexerActionExecutor,\n  LexerActionType,\n  LexerChannelAction,\n  LexerCustomAction,\n  LexerDFASerializer,\n  LexerIndexedCustomAction,\n  LexerInterpreter,\n  LexerModeAction,\n  LexerMoreAction,\n  LexerNoViableAltException,\n  LexerPopModeAction,\n  LexerPushModeAction,\n  LexerSkipAction,\n  LexerTypeAction,\n  ListTokenSource,\n  LoopEndState,\n  MurmurHash,\n  NoViableAltException,\n  NotSetTransition,\n  OrderedATNConfigSet,\n  OrderedHashMap,\n  OrderedHashSet,\n  ParseCancellationException,\n  ParseInfo,\n  ParseTreeMatch,\n  ParseTreePattern,\n  ParseTreePatternMatcher,\n  ParseTreeWalker,\n  Parser,\n  ParserATNSimulator,\n  ParserInterpreter,\n  ParserRuleContext,\n  PlusBlockStartState,\n  PlusLoopbackState,\n  PrecedencePredicateTransition,\n  PredPrediction,\n  PredicateTransition,\n  PredictionContext,\n  PredictionContextCache,\n  PredictionMode,\n  ProfilingATNSimulator,\n  ProxyErrorListener,\n  RangeTransition,\n  RecognitionException,\n  Recognizer,\n  RuleStartState,\n  RuleStopState,\n  RuleTagToken,\n  RuleTransition,\n  RuntimeMetaData,\n  SemanticContext,\n  SetTransition,\n  SingletonPredictionContext,\n  StarBlockStartState,\n  StarLoopEntryState,\n  StarLoopbackState,\n  StartRuleDoesNotConsumeFullPatternError,\n  TagChunk,\n  TerminalNode,\n  TextChunk,\n  Token,\n  TokenStreamRewriter,\n  TokenTagToken,\n  TokensStartState,\n  TraceListener,\n  Transition,\n  Trees,\n  UnbufferedTokenStream,\n  Vocabulary,\n  WildcardTransition,\n  XPath,\n  XPathElement,\n  XPathLexer,\n  XPathLexerErrorListener,\n  XPathRuleAnywhereElement,\n  XPathRuleElement,\n  XPathTokenAnywhereElement,\n  XPathTokenElement,\n  XPathWildcardAnywhereElement,\n  XPathWildcardElement,\n  arrayToString,\n  combineCommonParents,\n  createSingletonPredictionContext,\n  equalArrays,\n  equalNumberArrays,\n  escapeWhitespace,\n  getCachedPredictionContext,\n  isComparable,\n  isToken,\n  isWritableToken,\n  merge,\n  mergeRoot,\n  mergeSingletons,\n  predictionContextFromRuleContext\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","// Generated from c:/Users/minip/source/repos/ahk2-antlr4-demo/src/grammar/MainGrammar.g4 by ANTLR 4.13.1\r\n\r\nimport * as antlr from \"antlr4ng\";\r\nimport { Token } from \"antlr4ng\";\r\n\r\n\r\nexport class MainGrammarLexer extends antlr.Lexer {\r\n    public static readonly AND = 1;\r\n    public static readonly OR = 2;\r\n    public static readonly NOT = 3;\r\n    public static readonly EQ = 4;\r\n    public static readonly COMMA = 5;\r\n    public static readonly SEMI = 6;\r\n    public static readonly LPAREN = 7;\r\n    public static readonly RPAREN = 8;\r\n    public static readonly LCURLY = 9;\r\n    public static readonly RCURLY = 10;\r\n    public static readonly INT = 11;\r\n    public static readonly ID = 12;\r\n    public static readonly WS = 13;\r\n\r\n    public static readonly channelNames = [\r\n        \"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"\r\n    ];\r\n\r\n    public static readonly literalNames = [\r\n        null, \"'and'\", \"'or'\", \"'not'\", \"'='\", \"','\", \"';'\", \"'('\", \"')'\", \r\n        \"'{'\", \"'}'\"\r\n    ];\r\n\r\n    public static readonly symbolicNames = [\r\n        null, \"AND\", \"OR\", \"NOT\", \"EQ\", \"COMMA\", \"SEMI\", \"LPAREN\", \"RPAREN\", \r\n        \"LCURLY\", \"RCURLY\", \"INT\", \"ID\", \"WS\"\r\n    ];\r\n\r\n    public static readonly modeNames = [\r\n        \"DEFAULT_MODE\",\r\n    ];\r\n\r\n    public static readonly ruleNames = [\r\n        \"AND\", \"OR\", \"NOT\", \"EQ\", \"COMMA\", \"SEMI\", \"LPAREN\", \"RPAREN\", \"LCURLY\", \r\n        \"RCURLY\", \"INT\", \"ID\", \"WS\",\r\n    ];\r\n\r\n\r\n    public constructor(input: antlr.CharStream) {\r\n        super(input);\r\n        this.interpreter = new antlr.LexerATNSimulator(this, MainGrammarLexer._ATN, MainGrammarLexer.decisionsToDFA, new antlr.PredictionContextCache());\r\n    }\r\n\r\n    public get grammarFileName(): string { return \"MainGrammar.g4\"; }\r\n\r\n    public get literalNames(): (string | null)[] { return MainGrammarLexer.literalNames; }\r\n    public get symbolicNames(): (string | null)[] { return MainGrammarLexer.symbolicNames; }\r\n    public get ruleNames(): string[] { return MainGrammarLexer.ruleNames; }\r\n\r\n    public get serializedATN(): number[] { return MainGrammarLexer._serializedATN; }\r\n\r\n    public get channelNames(): string[] { return MainGrammarLexer.channelNames; }\r\n\r\n    public get modeNames(): string[] { return MainGrammarLexer.modeNames; }\r\n\r\n    public static readonly _serializedATN: number[] = [\r\n        4,0,13,71,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,\r\n        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,\r\n        1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,\r\n        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,4,10,54,8,10,11,10,12,10,55,\r\n        1,11,1,11,5,11,60,8,11,10,11,12,11,63,9,11,1,12,4,12,66,8,12,11,\r\n        12,12,12,67,1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,\r\n        17,9,19,10,21,11,23,12,25,13,1,0,4,1,0,48,57,3,0,65,90,95,95,97,\r\n        122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,73,0,1,1,0,\r\n        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,\r\n        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,\r\n        0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,31,1,0,0,0,5,34,1,0,0,0,\r\n        7,38,1,0,0,0,9,40,1,0,0,0,11,42,1,0,0,0,13,44,1,0,0,0,15,46,1,0,\r\n        0,0,17,48,1,0,0,0,19,50,1,0,0,0,21,53,1,0,0,0,23,57,1,0,0,0,25,65,\r\n        1,0,0,0,27,28,5,97,0,0,28,29,5,110,0,0,29,30,5,100,0,0,30,2,1,0,\r\n        0,0,31,32,5,111,0,0,32,33,5,114,0,0,33,4,1,0,0,0,34,35,5,110,0,0,\r\n        35,36,5,111,0,0,36,37,5,116,0,0,37,6,1,0,0,0,38,39,5,61,0,0,39,8,\r\n        1,0,0,0,40,41,5,44,0,0,41,10,1,0,0,0,42,43,5,59,0,0,43,12,1,0,0,\r\n        0,44,45,5,40,0,0,45,14,1,0,0,0,46,47,5,41,0,0,47,16,1,0,0,0,48,49,\r\n        5,123,0,0,49,18,1,0,0,0,50,51,5,125,0,0,51,20,1,0,0,0,52,54,7,0,\r\n        0,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,22,\r\n        1,0,0,0,57,61,7,1,0,0,58,60,7,2,0,0,59,58,1,0,0,0,60,63,1,0,0,0,\r\n        61,59,1,0,0,0,61,62,1,0,0,0,62,24,1,0,0,0,63,61,1,0,0,0,64,66,7,\r\n        3,0,0,65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,\r\n        69,1,0,0,0,69,70,6,12,0,0,70,26,1,0,0,0,4,0,55,61,67,1,6,0,0\r\n    ];\r\n\r\n    private static __ATN: antlr.ATN;\r\n    public static get _ATN(): antlr.ATN {\r\n        if (!MainGrammarLexer.__ATN) {\r\n            MainGrammarLexer.__ATN = new antlr.ATNDeserializer().deserialize(MainGrammarLexer._serializedATN);\r\n        }\r\n\r\n        return MainGrammarLexer.__ATN;\r\n    }\r\n\r\n\r\n    private static readonly vocabulary = new antlr.Vocabulary(MainGrammarLexer.literalNames, MainGrammarLexer.symbolicNames, []);\r\n\r\n    public override get vocabulary(): antlr.Vocabulary {\r\n        return MainGrammarLexer.vocabulary;\r\n    }\r\n\r\n    private static readonly decisionsToDFA = MainGrammarLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );\r\n}","// Generated from c:/Users/minip/source/repos/ahk2-antlr4-demo/src/grammar/MainGrammar.g4 by ANTLR 4.13.1\r\n\r\nimport * as antlr from \"antlr4ng\";\r\nimport { Token } from \"antlr4ng\";\r\n\r\nimport { MainGrammarListener } from \"./MainGrammarListener.js\";\r\nimport { MainGrammarVisitor } from \"./MainGrammarVisitor.js\";\r\n\r\n// for running tests with parameters, TODO: discuss strategy for typed parameters in CI\r\n// eslint-disable-next-line no-unused-vars\r\ntype int = number;\r\n\r\n\r\nexport class MainGrammarParser extends antlr.Parser {\r\n    public static readonly AND = 1;\r\n    public static readonly OR = 2;\r\n    public static readonly NOT = 3;\r\n    public static readonly EQ = 4;\r\n    public static readonly COMMA = 5;\r\n    public static readonly SEMI = 6;\r\n    public static readonly LPAREN = 7;\r\n    public static readonly RPAREN = 8;\r\n    public static readonly LCURLY = 9;\r\n    public static readonly RCURLY = 10;\r\n    public static readonly INT = 11;\r\n    public static readonly ID = 12;\r\n    public static readonly WS = 13;\r\n    public static readonly RULE_program = 0;\r\n    public static readonly RULE_stat = 1;\r\n    public static readonly RULE_def = 2;\r\n    public static readonly RULE_expr = 3;\r\n    public static readonly RULE_func = 4;\r\n\r\n    public static readonly literalNames = [\r\n        null, \"'and'\", \"'or'\", \"'not'\", \"'='\", \"','\", \"';'\", \"'('\", \"')'\", \r\n        \"'{'\", \"'}'\"\r\n    ];\r\n\r\n    public static readonly symbolicNames = [\r\n        null, \"AND\", \"OR\", \"NOT\", \"EQ\", \"COMMA\", \"SEMI\", \"LPAREN\", \"RPAREN\", \r\n        \"LCURLY\", \"RCURLY\", \"INT\", \"ID\", \"WS\"\r\n    ];\r\n    public static readonly ruleNames = [\r\n        \"program\", \"stat\", \"def\", \"expr\", \"func\",\r\n    ];\r\n\r\n    public get grammarFileName(): string { return \"MainGrammar.g4\"; }\r\n    public get literalNames(): (string | null)[] { return MainGrammarParser.literalNames; }\r\n    public get symbolicNames(): (string | null)[] { return MainGrammarParser.symbolicNames; }\r\n    public get ruleNames(): string[] { return MainGrammarParser.ruleNames; }\r\n    public get serializedATN(): number[] { return MainGrammarParser._serializedATN; }\r\n\r\n    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {\r\n        return new antlr.FailedPredicateException(this, predicate, message);\r\n    }\r\n\r\n    public constructor(input: antlr.TokenStream) {\r\n        super(input);\r\n        this.interpreter = new antlr.ParserATNSimulator(this, MainGrammarParser._ATN, MainGrammarParser.decisionsToDFA, new antlr.PredictionContextCache());\r\n    }\r\n    public program(): ProgramContext {\r\n        let localContext = new ProgramContext(this.context, this.state);\r\n        this.enterRule(localContext, 0, MainGrammarParser.RULE_program);\r\n        try {\r\n            this.state = 16;\r\n            this.errorHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {\r\n            case 1:\r\n                this.enterOuterAlt(localContext, 1);\r\n                {\r\n                this.state = 10;\r\n                this.stat();\r\n                this.state = 11;\r\n                this.match(MainGrammarParser.EOF);\r\n                }\r\n                break;\r\n            case 2:\r\n                this.enterOuterAlt(localContext, 2);\r\n                {\r\n                this.state = 13;\r\n                this.def();\r\n                this.state = 14;\r\n                this.match(MainGrammarParser.EOF);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof antlr.RecognitionException) {\r\n                this.errorHandler.reportError(this, re);\r\n                this.errorHandler.recover(this, re);\r\n            } else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return localContext;\r\n    }\r\n    public stat(): StatContext {\r\n        let localContext = new StatContext(this.context, this.state);\r\n        this.enterRule(localContext, 2, MainGrammarParser.RULE_stat);\r\n        try {\r\n            this.state = 26;\r\n            this.errorHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this.tokenStream, 1, this.context) ) {\r\n            case 1:\r\n                this.enterOuterAlt(localContext, 1);\r\n                {\r\n                this.state = 18;\r\n                this.match(MainGrammarParser.ID);\r\n                this.state = 19;\r\n                this.match(MainGrammarParser.EQ);\r\n                this.state = 20;\r\n                this.expr(0);\r\n                this.state = 21;\r\n                this.match(MainGrammarParser.SEMI);\r\n                }\r\n                break;\r\n            case 2:\r\n                this.enterOuterAlt(localContext, 2);\r\n                {\r\n                this.state = 23;\r\n                this.expr(0);\r\n                this.state = 24;\r\n                this.match(MainGrammarParser.SEMI);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof antlr.RecognitionException) {\r\n                this.errorHandler.reportError(this, re);\r\n                this.errorHandler.recover(this, re);\r\n            } else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return localContext;\r\n    }\r\n    public def(): DefContext {\r\n        let localContext = new DefContext(this.context, this.state);\r\n        this.enterRule(localContext, 4, MainGrammarParser.RULE_def);\r\n        let _la: number;\r\n        try {\r\n            this.enterOuterAlt(localContext, 1);\r\n            {\r\n            this.state = 28;\r\n            this.match(MainGrammarParser.ID);\r\n            this.state = 29;\r\n            this.match(MainGrammarParser.LPAREN);\r\n            this.state = 30;\r\n            this.match(MainGrammarParser.ID);\r\n            this.state = 35;\r\n            this.errorHandler.sync(this);\r\n            _la = this.tokenStream.LA(1);\r\n            while (_la === 5) {\r\n                {\r\n                {\r\n                this.state = 31;\r\n                this.match(MainGrammarParser.COMMA);\r\n                this.state = 32;\r\n                this.match(MainGrammarParser.ID);\r\n                }\r\n                }\r\n                this.state = 37;\r\n                this.errorHandler.sync(this);\r\n                _la = this.tokenStream.LA(1);\r\n            }\r\n            this.state = 38;\r\n            this.match(MainGrammarParser.RPAREN);\r\n            this.state = 39;\r\n            this.match(MainGrammarParser.LCURLY);\r\n            this.state = 43;\r\n            this.errorHandler.sync(this);\r\n            _la = this.tokenStream.LA(1);\r\n            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 6152) !== 0)) {\r\n                {\r\n                {\r\n                this.state = 40;\r\n                this.stat();\r\n                }\r\n                }\r\n                this.state = 45;\r\n                this.errorHandler.sync(this);\r\n                _la = this.tokenStream.LA(1);\r\n            }\r\n            this.state = 46;\r\n            this.match(MainGrammarParser.RCURLY);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof antlr.RecognitionException) {\r\n                this.errorHandler.reportError(this, re);\r\n                this.errorHandler.recover(this, re);\r\n            } else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return localContext;\r\n    }\r\n\r\n    public expr(): ExprContext;\r\n    public expr(_p: number): ExprContext;\r\n    public expr(_p?: number): ExprContext {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n\r\n        let parentContext = this.context;\r\n        let parentState = this.state;\r\n        let localContext = new ExprContext(this.context, parentState);\r\n        let previousContext = localContext;\r\n        let _startState = 6;\r\n        this.enterRecursionRule(localContext, 6, MainGrammarParser.RULE_expr, _p);\r\n        try {\r\n            let alternative: number;\r\n            this.enterOuterAlt(localContext, 1);\r\n            {\r\n            this.state = 54;\r\n            this.errorHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {\r\n            case 1:\r\n                {\r\n                this.state = 49;\r\n                this.match(MainGrammarParser.ID);\r\n                }\r\n                break;\r\n            case 2:\r\n                {\r\n                this.state = 50;\r\n                this.match(MainGrammarParser.INT);\r\n                }\r\n                break;\r\n            case 3:\r\n                {\r\n                this.state = 51;\r\n                this.func();\r\n                }\r\n                break;\r\n            case 4:\r\n                {\r\n                this.state = 52;\r\n                this.match(MainGrammarParser.NOT);\r\n                this.state = 53;\r\n                this.expr(3);\r\n                }\r\n                break;\r\n            }\r\n            this.context!.stop = this.tokenStream.LT(-1);\r\n            this.state = 64;\r\n            this.errorHandler.sync(this);\r\n            alternative = this.interpreter.adaptivePredict(this.tokenStream, 6, this.context);\r\n            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {\r\n                if (alternative === 1) {\r\n                    if (this.parseListeners != null) {\r\n                        this.triggerExitRuleEvent();\r\n                    }\r\n                    previousContext = localContext;\r\n                    {\r\n                    this.state = 62;\r\n                    this.errorHandler.sync(this);\r\n                    switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {\r\n                    case 1:\r\n                        {\r\n                        localContext = new ExprContext(parentContext, parentState);\r\n                        this.pushNewRecursionContext(localContext, _startState, MainGrammarParser.RULE_expr);\r\n                        this.state = 56;\r\n                        if (!(this.precpred(this.context, 2))) {\r\n                            throw this.createFailedPredicateException(\"this.precpred(this.context, 2)\");\r\n                        }\r\n                        this.state = 57;\r\n                        this.match(MainGrammarParser.AND);\r\n                        this.state = 58;\r\n                        this.expr(3);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                        localContext = new ExprContext(parentContext, parentState);\r\n                        this.pushNewRecursionContext(localContext, _startState, MainGrammarParser.RULE_expr);\r\n                        this.state = 59;\r\n                        if (!(this.precpred(this.context, 1))) {\r\n                            throw this.createFailedPredicateException(\"this.precpred(this.context, 1)\");\r\n                        }\r\n                        this.state = 60;\r\n                        this.match(MainGrammarParser.OR);\r\n                        this.state = 61;\r\n                        this.expr(2);\r\n                        }\r\n                        break;\r\n                    }\r\n                    }\r\n                }\r\n                this.state = 66;\r\n                this.errorHandler.sync(this);\r\n                alternative = this.interpreter.adaptivePredict(this.tokenStream, 6, this.context);\r\n            }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof antlr.RecognitionException) {\r\n                this.errorHandler.reportError(this, re);\r\n                this.errorHandler.recover(this, re);\r\n            } else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(parentContext);\r\n        }\r\n        return localContext;\r\n    }\r\n    public func(): FuncContext {\r\n        let localContext = new FuncContext(this.context, this.state);\r\n        this.enterRule(localContext, 8, MainGrammarParser.RULE_func);\r\n        let _la: number;\r\n        try {\r\n            this.enterOuterAlt(localContext, 1);\r\n            {\r\n            this.state = 67;\r\n            this.match(MainGrammarParser.ID);\r\n            this.state = 68;\r\n            this.match(MainGrammarParser.LPAREN);\r\n            this.state = 69;\r\n            this.expr(0);\r\n            this.state = 74;\r\n            this.errorHandler.sync(this);\r\n            _la = this.tokenStream.LA(1);\r\n            while (_la === 5) {\r\n                {\r\n                {\r\n                this.state = 70;\r\n                this.match(MainGrammarParser.COMMA);\r\n                this.state = 71;\r\n                this.expr(0);\r\n                }\r\n                }\r\n                this.state = 76;\r\n                this.errorHandler.sync(this);\r\n                _la = this.tokenStream.LA(1);\r\n            }\r\n            this.state = 77;\r\n            this.match(MainGrammarParser.RPAREN);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof antlr.RecognitionException) {\r\n                this.errorHandler.reportError(this, re);\r\n                this.errorHandler.recover(this, re);\r\n            } else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return localContext;\r\n    }\r\n\r\n    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {\r\n        switch (ruleIndex) {\r\n        case 3:\r\n            return this.expr_sempred(localContext as ExprContext, predIndex);\r\n        }\r\n        return true;\r\n    }\r\n    private expr_sempred(localContext: ExprContext | null, predIndex: number): boolean {\r\n        switch (predIndex) {\r\n        case 0:\r\n            return this.precpred(this.context, 2);\r\n        case 1:\r\n            return this.precpred(this.context, 1);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static readonly _serializedATN: number[] = [\r\n        4,1,13,80,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,1,0,1,\r\n        0,1,0,1,0,3,0,17,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,27,8,1,\r\n        1,2,1,2,1,2,1,2,1,2,5,2,34,8,2,10,2,12,2,37,9,2,1,2,1,2,1,2,5,2,\r\n        42,8,2,10,2,12,2,45,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,55,8,\r\n        3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,63,8,3,10,3,12,3,66,9,3,1,4,1,4,1,\r\n        4,1,4,1,4,5,4,73,8,4,10,4,12,4,76,9,4,1,4,1,4,1,4,0,1,6,5,0,2,4,\r\n        6,8,0,0,84,0,16,1,0,0,0,2,26,1,0,0,0,4,28,1,0,0,0,6,54,1,0,0,0,8,\r\n        67,1,0,0,0,10,11,3,2,1,0,11,12,5,0,0,1,12,17,1,0,0,0,13,14,3,4,2,\r\n        0,14,15,5,0,0,1,15,17,1,0,0,0,16,10,1,0,0,0,16,13,1,0,0,0,17,1,1,\r\n        0,0,0,18,19,5,12,0,0,19,20,5,4,0,0,20,21,3,6,3,0,21,22,5,6,0,0,22,\r\n        27,1,0,0,0,23,24,3,6,3,0,24,25,5,6,0,0,25,27,1,0,0,0,26,18,1,0,0,\r\n        0,26,23,1,0,0,0,27,3,1,0,0,0,28,29,5,12,0,0,29,30,5,7,0,0,30,35,\r\n        5,12,0,0,31,32,5,5,0,0,32,34,5,12,0,0,33,31,1,0,0,0,34,37,1,0,0,\r\n        0,35,33,1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,35,1,0,0,0,38,39,\r\n        5,8,0,0,39,43,5,9,0,0,40,42,3,2,1,0,41,40,1,0,0,0,42,45,1,0,0,0,\r\n        43,41,1,0,0,0,43,44,1,0,0,0,44,46,1,0,0,0,45,43,1,0,0,0,46,47,5,\r\n        10,0,0,47,5,1,0,0,0,48,49,6,3,-1,0,49,55,5,12,0,0,50,55,5,11,0,0,\r\n        51,55,3,8,4,0,52,53,5,3,0,0,53,55,3,6,3,3,54,48,1,0,0,0,54,50,1,\r\n        0,0,0,54,51,1,0,0,0,54,52,1,0,0,0,55,64,1,0,0,0,56,57,10,2,0,0,57,\r\n        58,5,1,0,0,58,63,3,6,3,3,59,60,10,1,0,0,60,61,5,2,0,0,61,63,3,6,\r\n        3,2,62,56,1,0,0,0,62,59,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,64,65,\r\n        1,0,0,0,65,7,1,0,0,0,66,64,1,0,0,0,67,68,5,12,0,0,68,69,5,7,0,0,\r\n        69,74,3,6,3,0,70,71,5,5,0,0,71,73,3,6,3,0,72,70,1,0,0,0,73,76,1,\r\n        0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,\r\n        78,5,8,0,0,78,9,1,0,0,0,8,16,26,35,43,54,62,64,74\r\n    ];\r\n\r\n    private static __ATN: antlr.ATN;\r\n    public static get _ATN(): antlr.ATN {\r\n        if (!MainGrammarParser.__ATN) {\r\n            MainGrammarParser.__ATN = new antlr.ATNDeserializer().deserialize(MainGrammarParser._serializedATN);\r\n        }\r\n\r\n        return MainGrammarParser.__ATN;\r\n    }\r\n\r\n\r\n    private static readonly vocabulary = new antlr.Vocabulary(MainGrammarParser.literalNames, MainGrammarParser.symbolicNames, []);\r\n\r\n    public override get vocabulary(): antlr.Vocabulary {\r\n        return MainGrammarParser.vocabulary;\r\n    }\r\n\r\n    private static readonly decisionsToDFA = MainGrammarParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );\r\n}\r\n\r\nexport class ProgramContext extends antlr.ParserRuleContext {\r\n    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {\r\n        super(parent, invokingState);\r\n    }\r\n    public stat(): StatContext | null {\r\n        return this.getRuleContext(0, StatContext);\r\n    }\r\n    public EOF(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.EOF, 0)!;\r\n    }\r\n    public def(): DefContext | null {\r\n        return this.getRuleContext(0, DefContext);\r\n    }\r\n    public override get ruleIndex(): number {\r\n        return MainGrammarParser.RULE_program;\r\n    }\r\n    public override enterRule(listener: MainGrammarListener): void {\r\n        if(listener.enterProgram) {\r\n             listener.enterProgram(this);\r\n        }\r\n    }\r\n    public override exitRule(listener: MainGrammarListener): void {\r\n        if(listener.exitProgram) {\r\n             listener.exitProgram(this);\r\n        }\r\n    }\r\n    public override accept<Result>(visitor: MainGrammarVisitor<Result>): Result | null {\r\n        if (visitor.visitProgram) {\r\n            return visitor.visitProgram(this);\r\n        } else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class StatContext extends antlr.ParserRuleContext {\r\n    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {\r\n        super(parent, invokingState);\r\n    }\r\n    public ID(): antlr.TerminalNode | null {\r\n        return this.getToken(MainGrammarParser.ID, 0);\r\n    }\r\n    public EQ(): antlr.TerminalNode | null {\r\n        return this.getToken(MainGrammarParser.EQ, 0);\r\n    }\r\n    public expr(): ExprContext {\r\n        return this.getRuleContext(0, ExprContext)!;\r\n    }\r\n    public SEMI(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.SEMI, 0)!;\r\n    }\r\n    public override get ruleIndex(): number {\r\n        return MainGrammarParser.RULE_stat;\r\n    }\r\n    public override enterRule(listener: MainGrammarListener): void {\r\n        if(listener.enterStat) {\r\n             listener.enterStat(this);\r\n        }\r\n    }\r\n    public override exitRule(listener: MainGrammarListener): void {\r\n        if(listener.exitStat) {\r\n             listener.exitStat(this);\r\n        }\r\n    }\r\n    public override accept<Result>(visitor: MainGrammarVisitor<Result>): Result | null {\r\n        if (visitor.visitStat) {\r\n            return visitor.visitStat(this);\r\n        } else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class DefContext extends antlr.ParserRuleContext {\r\n    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {\r\n        super(parent, invokingState);\r\n    }\r\n    public ID(): antlr.TerminalNode[];\r\n    public ID(i: number): antlr.TerminalNode | null;\r\n    public ID(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {\r\n    \tif (i === undefined) {\r\n    \t\treturn this.getTokens(MainGrammarParser.ID);\r\n    \t} else {\r\n    \t\treturn this.getToken(MainGrammarParser.ID, i);\r\n    \t}\r\n    }\r\n    public LPAREN(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.LPAREN, 0)!;\r\n    }\r\n    public RPAREN(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.RPAREN, 0)!;\r\n    }\r\n    public LCURLY(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.LCURLY, 0)!;\r\n    }\r\n    public RCURLY(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.RCURLY, 0)!;\r\n    }\r\n    public COMMA(): antlr.TerminalNode[];\r\n    public COMMA(i: number): antlr.TerminalNode | null;\r\n    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {\r\n    \tif (i === undefined) {\r\n    \t\treturn this.getTokens(MainGrammarParser.COMMA);\r\n    \t} else {\r\n    \t\treturn this.getToken(MainGrammarParser.COMMA, i);\r\n    \t}\r\n    }\r\n    public stat(): StatContext[];\r\n    public stat(i: number): StatContext | null;\r\n    public stat(i?: number): StatContext[] | StatContext | null {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(StatContext);\r\n        }\r\n\r\n        return this.getRuleContext(i, StatContext);\r\n    }\r\n    public override get ruleIndex(): number {\r\n        return MainGrammarParser.RULE_def;\r\n    }\r\n    public override enterRule(listener: MainGrammarListener): void {\r\n        if(listener.enterDef) {\r\n             listener.enterDef(this);\r\n        }\r\n    }\r\n    public override exitRule(listener: MainGrammarListener): void {\r\n        if(listener.exitDef) {\r\n             listener.exitDef(this);\r\n        }\r\n    }\r\n    public override accept<Result>(visitor: MainGrammarVisitor<Result>): Result | null {\r\n        if (visitor.visitDef) {\r\n            return visitor.visitDef(this);\r\n        } else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class ExprContext extends antlr.ParserRuleContext {\r\n    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {\r\n        super(parent, invokingState);\r\n    }\r\n    public ID(): antlr.TerminalNode | null {\r\n        return this.getToken(MainGrammarParser.ID, 0);\r\n    }\r\n    public INT(): antlr.TerminalNode | null {\r\n        return this.getToken(MainGrammarParser.INT, 0);\r\n    }\r\n    public func(): FuncContext | null {\r\n        return this.getRuleContext(0, FuncContext);\r\n    }\r\n    public NOT(): antlr.TerminalNode | null {\r\n        return this.getToken(MainGrammarParser.NOT, 0);\r\n    }\r\n    public expr(): ExprContext[];\r\n    public expr(i: number): ExprContext | null;\r\n    public expr(i?: number): ExprContext[] | ExprContext | null {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ExprContext);\r\n        }\r\n\r\n        return this.getRuleContext(i, ExprContext);\r\n    }\r\n    public AND(): antlr.TerminalNode | null {\r\n        return this.getToken(MainGrammarParser.AND, 0);\r\n    }\r\n    public OR(): antlr.TerminalNode | null {\r\n        return this.getToken(MainGrammarParser.OR, 0);\r\n    }\r\n    public override get ruleIndex(): number {\r\n        return MainGrammarParser.RULE_expr;\r\n    }\r\n    public override enterRule(listener: MainGrammarListener): void {\r\n        if(listener.enterExpr) {\r\n             listener.enterExpr(this);\r\n        }\r\n    }\r\n    public override exitRule(listener: MainGrammarListener): void {\r\n        if(listener.exitExpr) {\r\n             listener.exitExpr(this);\r\n        }\r\n    }\r\n    public override accept<Result>(visitor: MainGrammarVisitor<Result>): Result | null {\r\n        if (visitor.visitExpr) {\r\n            return visitor.visitExpr(this);\r\n        } else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class FuncContext extends antlr.ParserRuleContext {\r\n    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {\r\n        super(parent, invokingState);\r\n    }\r\n    public ID(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.ID, 0)!;\r\n    }\r\n    public LPAREN(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.LPAREN, 0)!;\r\n    }\r\n    public expr(): ExprContext[];\r\n    public expr(i: number): ExprContext | null;\r\n    public expr(i?: number): ExprContext[] | ExprContext | null {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ExprContext);\r\n        }\r\n\r\n        return this.getRuleContext(i, ExprContext);\r\n    }\r\n    public RPAREN(): antlr.TerminalNode {\r\n        return this.getToken(MainGrammarParser.RPAREN, 0)!;\r\n    }\r\n    public COMMA(): antlr.TerminalNode[];\r\n    public COMMA(i: number): antlr.TerminalNode | null;\r\n    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {\r\n    \tif (i === undefined) {\r\n    \t\treturn this.getTokens(MainGrammarParser.COMMA);\r\n    \t} else {\r\n    \t\treturn this.getToken(MainGrammarParser.COMMA, i);\r\n    \t}\r\n    }\r\n    public override get ruleIndex(): number {\r\n        return MainGrammarParser.RULE_func;\r\n    }\r\n    public override enterRule(listener: MainGrammarListener): void {\r\n        if(listener.enterFunc) {\r\n             listener.enterFunc(this);\r\n        }\r\n    }\r\n    public override exitRule(listener: MainGrammarListener): void {\r\n        if(listener.exitFunc) {\r\n             listener.exitFunc(this);\r\n        }\r\n    }\r\n    public override accept<Result>(visitor: MainGrammarVisitor<Result>): Result | null {\r\n        if (visitor.visitFunc) {\r\n            return visitor.visitFunc(this);\r\n        } else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"ahk2-antlr4-demo.34df32e0.js.map","sourceRoot":"/__parcel_source_root/"}